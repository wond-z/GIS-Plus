// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("../../../chunks/_rollupPluginBabelHelpers ../../../chunks/tslib.es6 ../../../core/arrayUtils ../../../core/Error ../../../core/maybe ../../../core/promiseUtils ../../../core/Logger ../../../core/accessorSupport/ensureType ../../../core/has ../../../core/accessorSupport/decorators/subclass ../../../layers/support/fieldType ../../../layers/support/fieldUtils ../../statistics/support/predominanceUtils ../../statistics/support/statsWorker ../../statistics/support/utils ../../statistics/support/WorkerClient ../utils ./FeatureLayerAdapter ./support/utils".split(" "),
function(q,H,I,r,C,J,z,Q,R,K,L,D,M,w,N,O,E,P,t){z=function(F){function A(e){return F.call(this,e)||this}q._inheritsLoose(A,F);var p=A.prototype;p._getNormalizationTotalFromMemory=function(){var e=q._asyncToGenerator(function*(a,b,c){const {featuresJSON:d,graphics:n,layerView:h,query:l}=b;a=(!d&&!n&&h&&"queryAggregateSummaryStatistics"in h?yield h.queryAggregateSummaryStatistics(l,{field:a},{signal:c}):d?yield this.workerClient.summaryStatistics({field:a},d):yield w.summaryStatistics({attribute:{field:a},
features:n})).sum;if(null==a)throw new r("feature-layer-binning-adapter:invalid","invalid normalizationTotal");return a});return function(a,b,c){return e.apply(this,arguments)}}();p._processStatsFromMemoryParams=function(){var e=q._asyncToGenerator(function*(a){const {features:b,filter:c}=a;if(b?.length)return this._getFilteredFeatures(b,c);const {view:d,field:n,field2:h,field3:l,normalizationField:f,valueExpression:g,returnGeometry:m,layerViewFunc:k,signal:v}=a;let u=a=null,x=null,B=null,G=null;
if(d)try{if(a=yield d.whenLayerView(this.layer),u=k in a&&"function"===typeof a[k]){yield this._waitForLayerViewUpdate(a);const y=yield E.getFieldsList({field:n,field2:h,field3:l,normalizationField:f,valueExpression:g});t.getMissingFieldsForBinning(this,y).length?u=!1:(x="createAggregateQuery"in a&&a.createAggregateQuery())?(x.outFields=y,x.returnGeometry=!1,this._updateQueryWithFeatureFilter(x,c)):u=!1;a.suspended&&(u=!1)}}catch{u=!1}if(!u&&(G=t.getFeatureReductionFields(this.layer).map(y=>y.toJSON()),
B=yield this._fetchFeaturesForStats({field:n,field2:h,field3:l,valueExpression:g,normalizationField:f,returnGeometry:m,filter:c,view:d,signal:v},"json"),!B?.length))throw new r("feature-layer-binning-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:a,query:x,featuresJSON:B,fieldInfos:G}});return function(a){return e.apply(this,arguments)}}();p._summaryStatsFromMemory=function(){var e=q._asyncToGenerator(function*(a,b){const {view:c,field:d,valueExpression:n,
normalizationType:h,signal:l}=a,f={field:d,valueExpression:n,normalizationType:h,normalizationField:a.normalizationField,normalizationTotal:a.normalizationTotal,minValue:a.minValue,maxValue:a.maxValue},{featuresJSON:g,graphics:m,layerView:k,query:v,fieldInfos:u}=yield this._processStatsFromMemoryParams({...a,layerViewFunc:"queryAggregateSummaryStatistics"});n&&c&&(g||m)&&(f.fieldType=b?.type?L.kebabDict.toJSON(b.type):null,f.viewInfoParams=t.getViewInfoParams(c),f.fieldInfos=u);"percent-of-total"===
h&&null==a.normalizationTotal&&(f.normalizationTotal=yield this._getNormalizationTotalFromMemory(d,{featuresJSON:g,graphics:m,layerView:k,query:v},l));return!g&&!m&&k&&"queryAggregateSummaryStatistics"in k?k.queryAggregateSummaryStatistics(v,f,{signal:l}):g?this.workerClient.summaryStatistics(f,g):w.summaryStatistics({attribute:f,features:m})});return function(a,b){return e.apply(this,arguments)}}();p._uvFromMemory=function(){var e=q._asyncToGenerator(function*(a,b){const {view:c,field:d,valueExpression:n,
returnAllCodedValues:h,signal:l}=a,{featuresJSON:f,graphics:g,layerView:m,query:k,fieldInfos:v}=yield this._processStatsFromMemoryParams({...a,layerViewFunc:"queryAggregateUniqueValues"});a={field:d,field2:a.field2,field3:a.field3,fieldDelimiter:E.FIELD_DELIMITER,valueExpression:n,domains:b,returnAllCodedValues:h};n&&c&&(f||g)&&(a.viewInfoParams=t.getViewInfoParams(c),a.fieldInfos=v);return!f&&!g&&m&&"queryAggregateUniqueValues"in m?m.queryAggregateUniqueValues(k,a,{signal:l}):f?this.workerClient.uniqueValues(a,
f):w.uniqueValues({attribute:a,features:g})});return function(a,b){return e.apply(this,arguments)}}();p._histogramFromMemory=function(){var e=q._asyncToGenerator(function*(a){const {view:b,field:c,valueExpression:d,signal:n}=a,{featuresJSON:h,graphics:l,layerView:f,query:g,fieldInfos:m}=yield this._processStatsFromMemoryParams({...a,layerViewFunc:"queryAggregateHistogram"}),k={field:c,valueExpression:d,normalizationType:a.normalizationType,normalizationField:a.normalizationField,normalizationTotal:a.normalizationTotal,
minValue:a.minValue,maxValue:a.maxValue,standardDeviationInterval:a.standardDeviationInterval,classificationMethod:a.classificationMethod,numBins:a.numBins};d&&b&&(h||l)&&(k.viewInfoParams=t.getViewInfoParams(b),k.fieldInfos=m);"percent-of-total"===a.normalizationType&&null==a.normalizationTotal&&(k.normalizationTotal=yield this._getNormalizationTotalFromMemory(c,{featuresJSON:h,graphics:l,layerView:f,query:g},n));return!h&&!l&&f&&"queryAggregateHistogram"in f?f.queryAggregateHistogram(g,k,{signal:n}):
h?this.workerClient.histogram(k,h):w.histogram({attribute:k,features:l})});return function(a){return e.apply(this,arguments)}}();p._classBreaksFromMemory=function(){var e=q._asyncToGenerator(function*(a){const {view:b,field:c,valueExpression:d,signal:n}=a,{featuresJSON:h,graphics:l,layerView:f,query:g,fieldInfos:m}=yield this._processStatsFromMemoryParams({...a,layerViewFunc:"queryAggregateClassBreaks"}),k={field:c,valueExpression:d,normalizationType:a.normalizationType,normalizationField:a.normalizationField,
normalizationTotal:a.normalizationTotal,minValue:a.minValue,maxValue:a.maxValue,standardDeviationInterval:a.standardDeviationInterval,classificationMethod:a.classificationMethod,numClasses:a.numClasses};d&&b&&(h||l)&&(k.viewInfoParams=t.getViewInfoParams(b),k.fieldInfos=m);"percent-of-total"===a.normalizationType&&null==a.normalizationTotal&&(k.normalizationTotal=yield this._getNormalizationTotalFromMemory(c,{featuresJSON:h,graphics:l,layerView:f,query:g},n));return!h&&!l&&f&&"queryAggregateClassBreaks"in
f?f.queryAggregateClassBreaks(g,k,{signal:n}):h?this.workerClient.classBreaks(k,h):w.classBreaks({attribute:k,features:l})});return function(a){return e.apply(this,arguments)}}();p.getField=function(e=""){return t.getFeatureReductionFields(this.layer)?.find(a=>a.name.toLowerCase()===e?.toLowerCase())};p.getFieldUsageInfo=function(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!1,supportsStatistics:!0}:null};p.getFieldDomain=function(e,
a){return null};p.summaryStatistics=function(){var e=q._asyncToGenerator(function*(a){var {field:b}=a;const c=b?this.getField(b):null,d=D.isDateField(c);b=a.sqlExpression&&!a.valueExpression&&!b;if(d||b)throw new r("feature-layer-binning-adapter:not-supported","Date field and sqlExpression are not supported");return this._summaryStatsFromMemory(a,c)});return function(a){return e.apply(this,arguments)}}();p.uniqueValues=function(){var e=q._asyncToGenerator(function*(a){const b=yield t.getDomainsForFields(a,
this);return this._uvFromMemory(a,b)});return function(a){return e.apply(this,arguments)}}();p.histogram=function(){var e=q._asyncToGenerator(function*(a){var {field:b}=a,c=b?this.getField(b):null;c=D.isDateField(c);b=a.sqlExpression&&!a.valueExpression&&!b;if(c||b)throw new r("feature-layer-binning-adapter:not-supported","Date field and sqlExpression are not supported");return this._histogramFromMemory(a)});return function(a){return e.apply(this,arguments)}}();p.classBreaks=function(){var e=q._asyncToGenerator(function*(a){return(!1!==
a.analyzeData?this._classBreaksFromMemory(a):this._classBreaksFromInterpolation(a)).catch(()=>{J.throwIfAborted(a.signal);return this._classBreaksFromMemory(a)})});return function(a){return e.apply(this,arguments)}}();p.queryFeatureCount=function(){var e=q._asyncToGenerator(function*(a){const b=yield a.view.whenLayerView(this.layer);if(!("queryAggregateCount"in b&&b.queryAggregateCount))throw new r("feature-layer-binning-adapter:not-supported","LayerView is not supported.");yield this._waitForLayerViewUpdate(b);
const c=b.createAggregateQuery();c.where=N.mergeWhereClauses(c.where,a.whereClause);this._updateQueryWithFeatureFilter(c,a.filter);return b.queryAggregateCount(c,{signal:a.signal})});return function(a){return e.apply(this,arguments)}}();p.generateRenderer=function(e,a){throw new r("feature-layer-binning-adapter:not-supported","'generateRenderer' is not supported.");};p.heatmapStatistics=function(e){throw new r("feature-layer-binning-adapter:not-supported","'heatmapStatistics' is not supported.");
};p.predominantCategories=function(){var e=q._asyncToGenerator(function*(a){const {fields:b,view:c,signal:d}=a;a=M.getArcadeForPredominantCategory(b);a=yield this._uvFromMemory({valueExpression:a,view:c,signal:d});return t.getPredominantCategoriesFromUVInfos(a.uniqueValueInfos,b)});return function(a){return e.apply(this,arguments)}}();p.getSampleFeatures=function(){var e=q._asyncToGenerator(function*(a,b){const {view:c,sampleSize:d,requiredFields:n,returnGeometry:h,filter:l,signal:f}=a;if(!c)throw new r("feature-layer-binning-adapter:not-supported",
"'view' is required to get sample features for binning.");if("3d"===c.type)throw new r("feature-layer-binning-adapter:not-supported","3d 'view' is not supported to get sample features for binning.");const g=yield c.whenLayerView(this.layer);if(!("queryAggregateJSON"in g&&g.queryAggregateJSON&&"queryAggregates"in g&&g.queryAggregates))throw new r("feature-layer-binning-adapter:not-supported","LayerView is not supported.");yield this._waitForLayerViewUpdate(g);if(t.getMissingFieldsForBinning(this,n).length)throw new r("feature-layer-binning-adapter:insufficient-data",
"Layer does not have required fields");b="json"===b;const m=g.createAggregateQuery();m.outSpatialReference=a.spatialReference||c&&c.spatialReference;m.returnGeometry=!!h;m.outFields=n;this._updateQueryWithFeatureFilter(m,l);({features:a}=b?yield g.queryAggregateJSON(m,{signal:f}):yield g.queryAggregates(m,{signal:f}));return a.length&&0<d&&d<=a.length?I.pickRandom(a,d,1):a});return function(a,b){return e.apply(this,arguments)}}();p.load=function(e){var a=this;const b=this.layer.load(e).then(function(){var c=
q._asyncToGenerator(function*(d){a.geometryType="polygon";a.objectIdField=null;a.supportsSQLExpression=!1;a._hasLocalSource=!1;a.hasQueryEngine=!0;a.minScale=d.minScale;a.maxScale=d.maxScale;a.fullExtent=d.fullExtent;if("geometryType"in d&&"point"!==d.geometryType)throw new r("feature-layer-binning-adapter:invalid-parameters","Only 'point' geometry type is supported");d="featureReduction"in d&&d.featureReduction;if("binning"!==d?.type&&"cluster"!==d?.type)throw new r("feature-layer-binning-adapter:invalid-parameters",
`Feature reduction type ${d?.type} is not supported`);a.workerClient=O.WorkerClient.getInstance();yield a.workerClient.open(C.unwrap(C.unwrap(e).signal))});return function(d){return c.apply(this,arguments)}}());this.addResolvingPromise(b);return Promise.resolve(this)};return A}(P);return z=H.__decorate([K.subclass("esri.smartMapping.support.adapters.FeatureLayerBinningAdapter")],z)});