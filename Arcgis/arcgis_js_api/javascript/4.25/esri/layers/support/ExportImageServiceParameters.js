// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/JSONSupport ../../core/accessorSupport/decorators/property ../../core/arrayUtils ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../core/accessorSupport/decorators/writer ./imageryRendererUtils ./MosaicRule ./rasterEnums ./RasterFunction".split(" "),function(c,q,d,u,e,x,y,v,l,h,w,m,p){c.ExportImageServiceParameters=function(r){function n(){var a=r.apply(this,arguments)||
this;a.layer=null;a.adjustAspectRatio=void 0;a.compression=void 0;a.pixelType=void 0;a.lercVersion=2;return a}q._inheritsLoose(n,r);var g=n.prototype;g.writeAdjustAspectRatio=function(a,b,f){10.3>this.layer.version||(b[f]=a)};g.writeCompressionQuality=function(a,b,f){this.format&&this.format.toLowerCase().includes("jpg")&&null!=a&&(b[f]=a)};g.writeCompressionTolerance=function(a,b,f){"lerc"===this.format&&null!=a&&(b[f]=a)};g.writeLercVersion=function(a,b,f){"lerc"===this.format&&10.5<=this.layer.version&&
(b[f]=a)};g.combineRendererWithRenderingRule=function(a){const b=this.layer,{rasterInfo:f,renderer:k}=b;a=a||b.renderingRule;return k&&h.isSupportedRendererType(k)?h.combineRenderingRules(h.convertRendererToRenderingRule(k,{rasterAttributeTable:f.attributeTable,pixelType:f.pixelType,dataType:f.dataType,bandProperties:f.keyProperties?.BandProperties,convertColorRampToColormap:10.6>b.version,convertToRFT:a?.rasterFunctionDefinition?!0:!1,bandCount:f.bandCount}),a):a};g._addResampleRasterFunction=function(a){if("vector-field"!==
this.layer.renderer?.type||"Resample"===a?.functionName)return a;let b=new p({functionName:"Resample",functionArguments:{ResamplingType:"esriImageServiceDataTypeVector-UV"===this.layer.serviceDataType?7:10,InputCellSize:this.layer.serviceRasterInfo.pixelSize}});b=a?.rasterFunctionDefinition?new p({rasterFunctionDefinition:h.convertRenderingRuleToRFT(b)}):b;return h.combineRenderingRules(b,a)};g._addClipFunction=function(a,b){b=new p({functionName:"Clip",functionArguments:{ClippingGeometry:b.toJSON(),
ClippingType:1}});return h.combineRenderingRules(b,a)};q._createClass(n,[{key:"bandIds",get:function(){return this.layer.bandIds},set:function(a){this.layer&&(this.layer.bandIds=a)}},{key:"compressionQuality",get:function(){return this.layer?.compressionQuality},set:function(a){this.layer&&(this.layer.compressionQuality=a)}},{key:"compressionTolerance",get:function(){return this.layer?.compressionTolerance},set:function(a){this.layer&&(this.layer.compressionTolerance=a)}},{key:"format",get:function(){return"vector-field"===
this.layer.renderer?.type?"lerc":this.layer.format}},{key:"interpolation",get:function(){return this.layer?.interpolation},set:function(a){this.layer&&(this.layer.interpolation=a)}},{key:"noData",get:function(){return this.layer?.noData},set:function(a){this.layer&&(this.layer.noData=a)}},{key:"noDataInterpretation",get:function(){return this.layer?.noDataInterpretation},set:function(a){this.layer&&(this.layer.noDataInterpretation=a)}},{key:"version",get:function(){const a=this.layer;a.commitProperty("bandIds");
a.commitProperty("format");a.commitProperty("compressionQuality");a.commitProperty("compressionTolerance");a.commitProperty("interpolation");a.commitProperty("noData");a.commitProperty("noDataInterpretation");a.commitProperty("mosaicRule");a.commitProperty("renderingRule");a.commitProperty("adjustAspectRatio");a.commitProperty("pixelFilter");a.commitProperty("definitionExpression");a.commitProperty("multidimensionalSubset");return(this._get("version")||0)+1},set:function(a){this._set("version",a)}},
{key:"mosaicRule",get:function(){var a=this.layer;let b=a.mosaicRule;a=a.definitionExpression;b?a&&a!==b.where&&(b=b.clone(),b.where=a):a&&(b=new w({where:a}));return b}},{key:"renderingRule",get:function(){const a=this.layer;let b=a.renderingRule;const f=a.pixelFilter,k=!a.format||a.format.includes("jpg")||a.format.includes("png");b=this._addResampleRasterFunction(b);const t=a.multidimensionalSubset?.areaOfInterest;t&&(b=this._addClipFunction(b,t));k&&!f&&"vector-field"!==a.renderer?.type&&(b=this.combineRendererWithRenderingRule(b));
return b}}]);return n}(u.JSONSupport);d.__decorate([e.property()],c.ExportImageServiceParameters.prototype,"layer",void 0);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"adjustAspectRatio",void 0);d.__decorate([l.writer("adjustAspectRatio")],c.ExportImageServiceParameters.prototype,"writeAdjustAspectRatio",null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"bandIds",null);d.__decorate([e.property({json:{write:!0}})],
c.ExportImageServiceParameters.prototype,"compression",void 0);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"compressionQuality",null);d.__decorate([l.writer("compressionQuality")],c.ExportImageServiceParameters.prototype,"writeCompressionQuality",null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"compressionTolerance",null);d.__decorate([l.writer("compressionTolerance")],c.ExportImageServiceParameters.prototype,"writeCompressionTolerance",
null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"format",null);d.__decorate([e.property({type:String,json:{read:{reader:m.interpolationKebab.read},write:{writer:m.interpolationKebab.write}}})],c.ExportImageServiceParameters.prototype,"interpolation",null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"noData",null);d.__decorate([e.property({type:String,json:{read:{reader:m.noDataInterpretationKebab.read},write:{writer:m.noDataInterpretationKebab.write}}})],
c.ExportImageServiceParameters.prototype,"noDataInterpretation",null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"pixelType",void 0);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"lercVersion",void 0);d.__decorate([l.writer("lercVersion")],c.ExportImageServiceParameters.prototype,"writeLercVersion",null);d.__decorate([e.property({type:Number})],c.ExportImageServiceParameters.prototype,"version",null);d.__decorate([e.property({json:{write:!0}})],
c.ExportImageServiceParameters.prototype,"mosaicRule",null);d.__decorate([e.property({json:{write:!0}})],c.ExportImageServiceParameters.prototype,"renderingRule",null);c.ExportImageServiceParameters=d.__decorate([v.subclass("esri.layers.mixins.ExportImageServiceParameters")],c.ExportImageServiceParameters);Object.defineProperties(c,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});