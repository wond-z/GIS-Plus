// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("../chunks/_rollupPluginBabelHelpers ../chunks/tslib.es6 ../geometry ../core/Error ../core/maybe ../core/promiseUtils ../core/urlUtils ../core/accessorSupport/decorators/property ../core/arrayUtils ../core/accessorSupport/ensureType ../core/accessorSupport/decorators/reader ../core/accessorSupport/decorators/subclass ./FeatureLayer ./graphics/sources/CSVSource ./graphics/sources/support/clientSideDefaults ../rest/support/Query ../chunks/persistableUrlUtils ../geometry/SpatialReference".split(" "),
function(h,d,c,n,p,v,w,g,C,D,x,y,z,q,A,m,r,B){function t(k,l){throw new n(l,`CSVLayer (title: ${k.title}, id: ${k.id}) cannot be saved to a portal item`);}c=function(k){function l(...a){a=k.call(this,...a)||this;a.geometryType="point";a.capabilities=A.createCapabilities(!1,!1);a.delimiter=null;a.editingEnabled=!1;a.fields=null;a.latitudeField=null;a.locationType="coordinates";a.longitudeField=null;a.operationalLayerType="CSV";a.outFields=["*"];a.path=null;a.spatialReference=B.WGS84;a.source=null;
a.type="csv";return a}h._inheritsLoose(l,k);var e=l.prototype;e.normalizeCtorArgs=function(a,b){return"string"===typeof a?{url:a,...b}:a};e.load=function(a){var b=this;const f=p.isSome(a)?a.signal:null;a=this.loadFromPortal({supportedTypes:["CSV"],supportsData:!1},a).catch(v.throwIfAbortError).then(h._asyncToGenerator(function*(){return b.initLayerProperties(yield b.createGraphicsSource(f))}));this.addResolvingPromise(a);return Promise.resolve(this)};e.readWebMapLabelsVisible=function(a,b){return null!=
b.showLabels?b.showLabels:!!(b.layerDefinition&&b.layerDefinition.drawingInfo&&b.layerDefinition.drawingInfo.labelingInfo)};e.createGraphicsSource=function(){var a=h._asyncToGenerator(function*(b){const f=new q.CSVSource({loadOptions:{delimiter:this.delimiter,fields:this.fields,latitudeField:this.latitudeField,longitudeField:this.longitudeField,spatialReference:this.spatialReference,timeInfo:this.timeInfo,url:this.url},customParameters:this.customParameters});this._set("source",f);yield f.load({signal:b});
this.read({locationInfo:f.locationInfo,columnDelimiter:f.delimiter},{origin:"service",url:this.parsedUrl});return f});return function(b){return a.apply(this,arguments)}}();e.queryFeatures=function(a,b){return this.load().then(()=>this.source.queryFeatures(m.from(a)||this.createQuery())).then(f=>{if(f?.features)for(const u of f.features)u.layer=u.sourceLayer=this;return f})};e.queryObjectIds=function(a,b){return this.load().then(()=>this.source.queryObjectIds(m.from(a)||this.createQuery()))};e.queryFeatureCount=
function(a,b){return this.load().then(()=>this.source.queryFeatureCount(m.from(a)||this.createQuery()))};e.queryExtent=function(a,b){return this.load().then(()=>this.source.queryExtent(m.from(a)||this.createQuery()))};e.read=function(a,b){k.prototype.read.call(this,a,b);b&&"service"===b.origin&&this.revert(["latitudeField","longitudeField"],"service")};e.write=function(a,b){return k.prototype.write.call(this,a,{...b,writeLayerSchema:!0})};e.clone=function(){throw new n("csv-layer:clone",`CSVLayer (title: ${this.title}, id: ${this.id}) cannot be cloned`);
};e.save=function(){var a=h._asyncToGenerator(function*(b){return t(this,"csv-layer:save")});return function(b){return a.apply(this,arguments)}}();e.saveAs=function(){var a=h._asyncToGenerator(function*(b,f){return t(this,"csv-layer:save-as")});return function(b,f){return a.apply(this,arguments)}}();e.hasDataChanged=function(){var a=h._asyncToGenerator(function*(){try{const {dataChanged:b,updates:f}=yield this.source.refresh(this.customParameters);p.isSome(f)&&this.read(f,{origin:"service",url:this.parsedUrl,
ignoreDefaults:!0});return b}catch{}return!1});return function(){return a.apply(this,arguments)}}();e._verifyFields=function(){};e._verifySource=function(){};e._hasMemorySource=function(){return!1};h._createClass(l,[{key:"isTable",get:function(){return this.loaded&&null==this.geometryType}},{key:"url",set:function(a){a?(a=w.urlToObject(a),this._set("url",a.path),a.query&&(this.customParameters={...this.customParameters,...a.query})):this._set("url",a)}}]);return l}(z);d.__decorate([g.property({readOnly:!0,
json:{read:!1,write:!1}})],c.prototype,"capabilities",void 0);d.__decorate([g.property({type:[","," ",";","|","\t"],json:{read:{source:"columnDelimiter"},write:{target:"columnDelimiter",ignoreOrigin:!0}}})],c.prototype,"delimiter",void 0);d.__decorate([g.property({readOnly:!0,type:Boolean,json:{origins:{"web-scene":{read:!1,write:!1}}}})],c.prototype,"editingEnabled",void 0);d.__decorate([g.property({json:{read:{source:"layerDefinition.fields"},write:{target:"layerDefinition.fields"}}})],c.prototype,
"fields",void 0);d.__decorate([g.property({type:Boolean,readOnly:!0})],c.prototype,"isTable",null);d.__decorate([x.reader("web-map","labelsVisible",["layerDefinition.drawingInfo.labelingInfo","showLabels"])],c.prototype,"readWebMapLabelsVisible",null);d.__decorate([g.property({type:String,json:{read:{source:"locationInfo.latitudeFieldName"},write:{target:"locationInfo.latitudeFieldName",ignoreOrigin:!0}}})],c.prototype,"latitudeField",void 0);d.__decorate([g.property({type:["show","hide"]})],c.prototype,
"listMode",void 0);d.__decorate([g.property({type:["coordinates"],json:{read:{source:"locationInfo.locationType"},write:{target:"locationInfo.locationType",ignoreOrigin:!0,isRequired:!0}}})],c.prototype,"locationType",void 0);d.__decorate([g.property({type:String,json:{read:{source:"locationInfo.longitudeFieldName"},write:{target:"locationInfo.longitudeFieldName",ignoreOrigin:!0}}})],c.prototype,"longitudeField",void 0);d.__decorate([g.property({type:["CSV"]})],c.prototype,"operationalLayerType",
void 0);d.__decorate([g.property()],c.prototype,"outFields",void 0);d.__decorate([g.property({type:String,json:{origins:{"web-scene":{read:!1,write:!1}},read:!1,write:!1}})],c.prototype,"path",void 0);d.__decorate([g.property({json:{read:!1},cast:null,type:q.CSVSource,readOnly:!0})],c.prototype,"source",void 0);d.__decorate([g.property({json:{read:!1},value:"csv",readOnly:!0})],c.prototype,"type",void 0);d.__decorate([g.property({json:{read:r.read,write:{isRequired:!0,ignoreOrigin:!0,writer:r.write}}})],
c.prototype,"url",null);return c=d.__decorate([y.subclass("esri.layers.CSVLayer")],c)});