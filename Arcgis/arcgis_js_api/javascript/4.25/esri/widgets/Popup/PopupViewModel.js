// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../geometry ../../Graphic ../../symbols ../../core/Collection ../../core/Error ../../core/Handles ../../core/Logger ../../core/maybe ../../core/reactiveUtils ../../core/accessorSupport/decorators/property ../../core/arrayUtils ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../geometry/support/webMercatorUtils ../../layers/Layer ../../layers/LayerConstants ../../support/actions/ActionBase ../../support/actions/ActionButton ../../support/actions/ActionToggle ../../symbols/support/symbolUtils ../../views/input/InputManager ../../views/support/layerViewUtils ../Feature/FeatureViewModel ./actions ./actionUtils ../support/AnchorElementViewModel ../support/GoTo ../../symbols/SimpleFillSymbol ../../geometry/Point".split(" "),
function(t,f,d,E,U,F,y,G,z,A,p,g,V,W,H,I,B,J,K,L,M,N,O,C,P,w,r,Q,R,S,T){const u=F.ofType({key:"type",defaultKeyValue:"button",base:K,typeMap:{button:L,toggle:M}});d=function(D){function x(a){a=D.call(this,a)||this;a._handles=new G;a._pendingPromises=new Set;a._fetchFeaturesController=null;a._selectedClusterFeature=null;a.featurePage=null;a.actions=new u;a.activeFeature=null;a.defaultPopupTemplateEnabled=!1;a.autoCloseEnabled=!1;a.autoOpenEnabled=!0;a.browseClusterEnabled=!1;a.content=null;a.featuresPerPage=
20;a.featureViewModelAbilities=null;a.featureViewModels=[];a.highlightEnabled=!0;a.includeDefaultActions=!0;a.selectedClusterBoundaryFeature=new E({symbol:new S({outline:{width:1.5,color:"cyan"},style:"none"})});a.title=null;a.updateLocationEnabled=!1;a.view=null;a.visible=!1;a.zoomFactor=4;a.zoomToLocation=null;return a}t._inheritsLoose(x,D);var e=x.prototype;e.initialize=function(){this._handles.add([p.watch(()=>[this.autoOpenEnabled,this.view],()=>this._autoOpenEnabledChange()),this.on("view-change",
()=>this._autoClose()),p.watch(()=>[this.highlightEnabled,this.selectedFeature,this.visible,this.view],()=>this._highlightSelectedFeature()),p.watch(()=>[this.highlightEnabled,this.activeFeature,this.visible,this.view],()=>this._highlightActiveFeature()),p.watch(()=>this.view?.animation?.state,a=>this._animationStateChange(a)),p.watch(()=>this.location,a=>this._locationChange(a)),p.watch(()=>this.selectedFeature,a=>this._selectedFeatureChange(a)),p.watch(()=>[this.selectedFeatureIndex,this.featureCount,
this.featuresPerPage],()=>this._selectedFeatureIndexChange()),p.watch(()=>[this.featurePage,this.selectedFeatureIndex,this.featureCount,this.featuresPerPage,this.featureViewModels],()=>this._setGraphicOnFeatureViewModels()),p.watch(()=>this.featureViewModels,()=>this._featureViewModelsChange()),this.on("trigger-action",a=>r.triggerAction({event:a,view:this.view})),p.when(()=>!this.waitingForResult,()=>this._waitingForResultChange(),p.sync),p.watch(()=>[this.features,this.view?.map,this.view?.spatialReference],
()=>this._updateFeatureVMs()),p.watch(()=>this.view?.scale,()=>this._viewScaleChange()),p.when(()=>!this.visible,()=>this.browseClusterEnabled=!1),p.watch(()=>this.browseClusterEnabled,a=>a?this.enableClusterBrowsing():this.disableClusterBrowsing())])};e.destroy=function(){this._cancelFetchingFeatures();this._handles.destroy();this._handles=null;this._pendingPromises.clear();this.browseClusterEnabled=!1;this.view=null};e.centerAtLocation=function(){const {view:a}=this,b=r.getSelectedTarget(this);
return b?this.callGoTo({target:{target:b,scale:a.scale}}):Promise.reject(new y("center-at-location:invalid-target-or-view","Cannot center at a location without a target and view.",{target:b,view:a}))};e.zoomTo=function(a){return this.callGoTo(a)};e.clear=function(){this.set({promises:[],features:[],content:null,title:null,location:null,activeFeature:null})};e.fetchFeatures=function(a,b){const {view:c}=this;if(!c||!a)throw new y("fetch-features:invalid-screenpoint-or-view","Cannot fetch features without a screenPoint and view.",
{screenPoint:a,view:c});return c.fetchPopupFeatures(a,{event:b&&b.event,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,signal:b&&b.signal})};e.open=function(a){a={updateLocationEnabled:!1,promises:[],fetchFeatures:!1,...a,visible:!0};var {fetchFeatures:b}=a;delete a.fetchFeatures;b&&this._setFetchFeaturesPromises(a.location);b=["actionsMenuOpen","collapsed","featureMenuOpen"];for(const c of b)delete a[c];this.set(a)};e.triggerAction=function(a){(a=this.allActions.getItemAt(a))&&!a.disabled&&
this.emit("trigger-action",{action:a})};e.next=function(){this.selectedFeatureIndex+=1;return this};e.previous=function(){--this.selectedFeatureIndex;return this};e.disableClusterBrowsing=function(){r.removeClusteredFeaturesForBrowsing(this);this._clearBrowsedClusterGraphics()};e.enableClusterBrowsing=function(){var a=t._asyncToGenerator(function*(){const {view:b,selectedFeature:c}=this;"2d"!==b?.type?z.getLogger(this.declaredClass).warn("enableClusterBrowsing:invalid-view: View must be 2d MapView.",
c):r.isClusterFeature(c)?(yield r.displayClusterExtent(this),yield r.browseAggregateFeatures(this)):z.getLogger(this.declaredClass).warn("enableClusterBrowsing:invalid-selectedFeature: Selected feature must represent an aggregate/cluster graphic.",c)});return function(){return a.apply(this,arguments)}}();e._animationStateChange=function(a){this.zoomToLocation||(w.zoomToFeature.disabled="waiting-for-target"===a)};e._clearBrowsedClusterGraphics=function(){const a=this.view?.graphics;a&&(a.remove(this.selectedClusterBoundaryFeature),
a.remove(this._selectedClusterFeature));this._selectedClusterFeature=null;this.selectedClusterBoundaryFeature.geometry=null};e._viewScaleChange=function(){r.isClusterFeature(this.selectedFeature)?(this.visible=this.browseClusterEnabled=!1,this.clear()):this.browseClusterEnabled&&(this.features=[this.selectedFeature])};e._locationChange=function(a){const {selectedFeature:b,updateLocationEnabled:c}=this;c&&a&&(!b||b.geometry)&&this.centerAtLocation()};e._selectedFeatureIndexChange=function(){this.featurePage=
1<this.featureCount?Math.floor(this.selectedFeatureIndex/this.featuresPerPage)+1:null};e._featureViewModelsChange=function(){this.featurePage=1<this.featureCount?1:null};e._setGraphicOnFeatureViewModels=function(){const {features:a,featureCount:b,featurePage:c,featuresPerPage:k,featureViewModels:l}=this;if(null!==c){var h=((c-1)*k+b)%b;l.slice(h,h+k).forEach((m,n)=>{m&&!m.graphic&&(m.graphic=a[h+n])})}};e._selectedFeatureChange=function(){var a=t._asyncToGenerator(function*(b){if(b){var {location:c,
updateLocationEnabled:k,view:l}=this;this.browseClusterEnabled?(this._selectedClusterFeature&&(l.graphics.remove(this._selectedClusterFeature),this._selectedClusterFeature=null),r.isClusterFeature(b)||(b.symbol=yield N.getDisplayedSymbol(b),this._selectedClusterFeature=b,l.graphics.add(this._selectedClusterFeature))):!k&&c||!b.geometry?k&&!b.geometry&&this.centerAtLocation().then(()=>{this.location=l.center.clone()}):this.location=A.unwrap(this._getPointFromGeometry(b.geometry))}});return function(b){return a.apply(this,
arguments)}}();e._waitingForResultChange=function(){!this.featureCount&&this.promises&&(this.visible=!1)};e._setFetchFeaturesPromises=function(a){return this._fetchFeaturesWithController(this._getScreenPoint(a||this.location)).then(b=>{const {clientOnlyGraphics:c,promisesPerLayerView:k}=b;b=Promise.resolve(c);const l=k.map(h=>h.promise);this.promises=[b,...l]})};e._destroyFeatureVMs=function(){this.featureViewModels.forEach(a=>a&&!a.destroyed&&a.destroy());this._set("featureViewModels",[])};e._updateFeatureVMs=
function(){const {selectedFeature:a,features:b,featureViewModels:c}=this;r.isClusterFeature(a)||(this.browseClusterEnabled=!1);this._destroyFeatureVMs();if(b&&b.length){var k=c.slice(0),l=[];b.forEach((h,m)=>{if(h){var n=null;k.some((q,v)=>{q&&q.graphic===h&&(n=q,k.splice(v,1));return!!n});if(n)l[m]=n;else{const q=new P({abilities:this.featureViewModelAbilities,defaultPopupTemplateEnabled:this.defaultPopupTemplateEnabled,spatialReference:this.view?.spatialReference,graphic:h===a?h:null,map:this.view?.map,
view:this.view});l[m]=q}}});k.forEach(h=>h&&!h.destroyed&&h.destroy());this._set("featureViewModels",l)}};e._getScreenPoint=function(a){const {view:b}=this;return b&&a&&"function"===typeof b.toScreen?b.toScreen(a):null};e._autoOpenEnabledChange=function(){const {_handles:a,autoOpenEnabled:b}=this;a.remove("auto-fetch-features");if(b&&this.view){const c=this.view.on("click",k=>{"mouse"===k.pointerType&&0!==k.button||this._fetchFeaturesAndOpen(k)},O.ViewEventPriorities.WIDGET);a.add(c,"auto-fetch-features")}};
e._cancelFetchingFeatures=function(){const a=this._fetchFeaturesController;a&&a.abort();this._fetchFeaturesController=null;this.notifyChange("waitingForResult")};e._fetchFeaturesWithController=function(a,b){this._cancelFetchingFeatures();const c=new AbortController,{signal:k}=c;this._fetchFeaturesController=c;this.notifyChange("waitingForResult");a=this.fetchFeatures(a,{signal:k,event:b});a.catch(()=>{}).then(()=>{this._fetchFeaturesController=null;this.notifyChange("waitingForResult")});return a};
e._fetchFeaturesAndOpen=function(a){const {screenPoint:b,mapPoint:c}=a,{view:k}=this;this._fetchFeaturesWithController(b,a).then(l=>{const {clientOnlyGraphics:h,promisesPerLayerView:m,location:n}=l,q=[Promise.resolve(h),...m.map(v=>v.promise)];k.popup.open({location:n||c,promises:q});return l})};e._updatePendingPromises=function(a){a&&this._pendingPromises.has(a)&&(this._pendingPromises.delete(a),this.notifyChange("pendingPromisesCount"))};e._autoClose=function(){this.autoCloseEnabled&&(this.visible=
!1)};e._getPointFromGeometry=function(a){return A.isNone(a)?null:"point"===a.type?a:"extent"===a.type?a.center:"polygon"===a.type?a.centroid:"multipoint"===a.type||"polyline"===a.type?a.extent?.center:null};e._getLayerView=function(){var a=t._asyncToGenerator(function*(b,c){yield b.when();return b.whenLayerView(c)});return function(b,c){return a.apply(this,arguments)}}();e._getHighlightLayer=function(a){const {layer:b,sourceLayer:c}=a;return c&&"layer"in c&&c.layer?c.layer:"map-notes"===c?.type||
"subtype-group"===c?.type?c:b};e._getHighlightTarget=function(a,b){b="imagery"===b.type?void 0:"objectIdField"in b?b.objectIdField||J.fallbackObjectIDAttribute:null;const c=a.attributes;return c&&b&&c[b]||a};e._highlightActiveFeature=function(){var a=t._asyncToGenerator(function*(){this._handles.remove("highlight-active-feature");const {highlightEnabled:b,view:c,activeFeature:k,visible:l}=this;if(k&&c&&b&&l){var h=this._getHighlightLayer(k);if(h&&h instanceof B){var m=this._getLayerView(c,h);this._highlightActiveFeaturePromise=
m;var n=yield m;n&&C.highlightsSupported(n)&&this._highlightActiveFeaturePromise===m&&this.activeFeature&&this.highlightEnabled&&(h=n.highlight(this._getHighlightTarget(k,h)),this._handles.add(h,"highlight-active-feature"))}}});return function(){return a.apply(this,arguments)}}();e._highlightSelectedFeature=function(){var a=t._asyncToGenerator(function*(){this._handles.remove("highlight-selected-feature");const {selectedFeature:b,highlightEnabled:c,view:k,visible:l}=this;if(b&&k&&c&&l){var h=this._getHighlightLayer(b);
if(h&&h instanceof B){var m=this._getLayerView(k,h);this._highlightSelectedFeaturePromise=m;var n=yield m;n&&C.highlightsSupported(n)&&this._highlightSelectedFeaturePromise===m&&this.selectedFeature&&this.highlightEnabled&&this.visible&&(h=n.highlight(this._getHighlightTarget(b,h)),this._handles.add(h,"highlight-selected-feature"))}}});return function(){return a.apply(this,arguments)}}();e._updateFeatures=function(a){const {features:b}=this;a&&a.length&&(b.length?(a=a.filter(c=>!b.includes(c)),this.features=
b.concat(a)):this.features=a)};t._createClass(x,[{key:"isLoadingFeature",get:function(){return this.featureViewModels.some(a=>a.waitingForContent)}},{key:"active",get:function(){return!(!this.visible||this.waitingForResult)}},{key:"allActions",get:function(){const a=this._get("allActions")||new u;a.removeAll();const {actions:b,defaultActions:c,defaultPopupTemplateEnabled:k,includeDefaultActions:l,selectedFeature:h}=this;var m=l?c.concat(b):b;const n=h&&("function"===typeof h.getEffectivePopupTemplate&&
h.getEffectivePopupTemplate(k)||h.popupTemplate),q=n&&n.actions;(m=n&&n.overwriteActions?q:q?q.concat(m):m)&&m.filter(Boolean).forEach(v=>a.add(v));return a}},{key:"defaultActions",get:function(){const a=this._get("defaultActions")||new u;a.removeAll();a.addMany(r.isClusterFeature(this.selectedFeature)?[w.zoomToClusteredFeatures.clone(),w.browseClusteredFeatures.clone()]:[w.zoomToFeature.clone()]);return a}},{key:"featureCount",get:function(){return this.features.length}},{key:"features",get:function(){return this._get("features")||
[]},set:function(a){a=a||[];this._set("features",a);const {pendingPromisesCount:b,promiseCount:c,selectedFeatureIndex:k}=this,l=c&&a.length;l&&b&&-1===k?this.selectedFeatureIndex=0:l&&-1!==k||(this.selectedFeatureIndex=a.length?0:-1)}},{key:"location",get:function(){return this._get("location")||null},set:function(a){const b=this.get("view.spatialReference.isWebMercator");a&&a.get("spatialReference.isWGS84")&&b&&(a=I.geographicToWebMercator(a));this._set("location",a)}},{key:"pendingPromisesCount",
get:function(){return this._pendingPromises.size}},{key:"waitingForResult",get:function(){return!(!(this._fetchFeaturesController||0<this.pendingPromisesCount)||0!==this.featureCount)}},{key:"promiseCount",get:function(){return this.promises.length}},{key:"promises",get:function(){return this._get("promises")||[]},set:function(a){this._pendingPromises.clear();this.features=[];Array.isArray(a)&&a.length?(this._set("promises",a),a=a.slice(0),a.forEach(b=>{this._pendingPromises.add(b);b.then(c=>{this._pendingPromises.has(b)&&
this._updateFeatures(c);this._updatePendingPromises(b)},()=>this._updatePendingPromises(b))})):this._set("promises",[]);this.notifyChange("pendingPromisesCount")}},{key:"selectedFeature",get:function(){const {features:a,selectedFeatureIndex:b}=this;return-1===b?null:a[b]||null}},{key:"selectedFeatureIndex",get:function(){const a=this._get("selectedFeatureIndex");return"number"===typeof a?a:-1},set:function(a){const {featureCount:b}=this;a=isNaN(a)||-1>a||!b?-1:(a+b)%b;this.activeFeature=null;this._set("selectedFeatureIndex",
a)}},{key:"selectedFeatureViewModel",get:function(){return this.featureViewModels[this.selectedFeatureIndex]||null}},{key:"state",get:function(){return this.get("view.ready")?"ready":"disabled"}}]);return x}(R.GoToMixin(Q));f.__decorate([g.property()],d.prototype,"featurePage",void 0);f.__decorate([g.property()],d.prototype,"isLoadingFeature",null);f.__decorate([g.property({type:u})],d.prototype,"actions",void 0);f.__decorate([g.property({readOnly:!0})],d.prototype,"active",null);f.__decorate([g.property()],
d.prototype,"activeFeature",void 0);f.__decorate([g.property({readOnly:!0})],d.prototype,"allActions",null);f.__decorate([g.property({type:Boolean})],d.prototype,"defaultPopupTemplateEnabled",void 0);f.__decorate([g.property()],d.prototype,"autoCloseEnabled",void 0);f.__decorate([g.property()],d.prototype,"autoOpenEnabled",void 0);f.__decorate([g.property()],d.prototype,"browseClusterEnabled",void 0);f.__decorate([g.property()],d.prototype,"content",void 0);f.__decorate([g.property({type:u,readOnly:!0})],
d.prototype,"defaultActions",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"featureCount",null);f.__decorate([g.property()],d.prototype,"features",null);f.__decorate([g.property()],d.prototype,"featuresPerPage",void 0);f.__decorate([g.property()],d.prototype,"featureViewModelAbilities",void 0);f.__decorate([g.property({readOnly:!0})],d.prototype,"featureViewModels",void 0);f.__decorate([g.property()],d.prototype,"highlightEnabled",void 0);f.__decorate([g.property()],d.prototype,"includeDefaultActions",
void 0);f.__decorate([g.property({type:T})],d.prototype,"location",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"pendingPromisesCount",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"selectedClusterBoundaryFeature",void 0);f.__decorate([g.property({readOnly:!0})],d.prototype,"waitingForResult",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"promiseCount",null);f.__decorate([g.property()],d.prototype,"promises",null);f.__decorate([g.property({value:null,readOnly:!0})],
d.prototype,"selectedFeature",null);f.__decorate([g.property({value:-1})],d.prototype,"selectedFeatureIndex",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"selectedFeatureViewModel",null);f.__decorate([g.property({readOnly:!0})],d.prototype,"state",null);f.__decorate([g.property()],d.prototype,"title",void 0);f.__decorate([g.property()],d.prototype,"updateLocationEnabled",void 0);f.__decorate([g.property()],d.prototype,"view",void 0);f.__decorate([g.property()],d.prototype,"visible",
void 0);f.__decorate([g.property()],d.prototype,"zoomFactor",void 0);f.__decorate([g.property()],d.prototype,"zoomToLocation",void 0);f.__decorate([g.property()],d.prototype,"centerAtLocation",null);return d=f.__decorate([H.subclass("esri.widgets.Popup.PopupViewModel")],d)});