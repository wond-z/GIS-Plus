// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("exports ../../chunks/_rollupPluginBabelHelpers ../../chunks/tslib.es6 ../../core/Evented ../../core/HandleOwner ../../core/lang ../../core/maybe ../../core/promiseUtils ../../core/reactiveUtils ../../core/screenUtils ../../core/accessorSupport/decorators/property ../../core/accessorSupport/ensureType ../../core/accessorSupport/decorators/subclass ../../layers/graphics/dehydratedFeatureComparison ../../support/elevationInfoUtils ../ViewingMode ./DrawingMode ./DrawManipulator ../interactive/coordinateHelper ../interactive/dragEventPipeline ../interactive/editGeometry/EditGeometry ../interactive/editGeometry/EditGeometryOperations ../interactive/sketch/SketchLabelOptions ../interactive/sketch/SketchTooltipOptions ../interactive/snapping/SnappingContext ../interactive/snapping/SnappingDragPipelineStep ../interactive/snapping/SnappingOperation".split(" "),
function(g,w,h,E,F,G,d,H,u,I,l,R,J,x,K,L,y,M,N,q,z,O,A,B,C,P,Q){g.DrawOperation=function(D){function r(a){var b=D.call(this,a)||this;b._createOperationCompleted=!1;b._pointerDownStates=new Set;b._snappingPipeline=new P.SnappingPipeline;b.isDraped=!0;b.labelOptions=new A;b.tooltipOptions=new B;b.snapToSceneEnabled=null;b.lastVertex=null;d.isNone(a.elevationInfo)&&(b.elevationInfo=K.getEffectiveElevationInfo(a.hasZ));return b}w._inheritsLoose(r,D);var k=r.prototype;k.initialize=function(){const {geometryType:a,
view:b}=this,{spatialReference:e}=b,f="viewingMode"in b.state?b.state.viewingMode:L.ViewingMode.Local,n="segment"===a||"multipoint"===a?"polyline":a;this.coordinateHelper=N.createCoordinateHelper(this.hasZ,this.hasM,e);this._editGeometryOperations=new O.EditGeometryOperations(new z.EditGeometry(n,this.coordinateHelper));this._snappingOperation=new Q.SnappingOperation({view:b,constrainResult:c=>d.isNone(c)?c:this._getEffectiveDrawSurface().constrainZ(c)});this.handles.add(u.watch(()=>this.stagedVertex,
c=>{d.isNone(c)||this.emit("cursor-update",{updated:null,vertices:[{componentIndex:0,vertexIndex:this._activeComponent.vertices.length,coordinates:this.coordinateHelper.pointToArray(c)}],operation:"apply",type:"vertex-update"})},{sync:!0,equals:(c,p)=>d.equalsMaybe(c,p,x.pointEquals)}));this._activeComponent=new z.Component(e,f);this._editGeometryOperations.data.components.push(this._activeComponent);const m=this.segmentLabels;d.isSome(m)&&(m.context={view:b,editGeometryOperations:this._editGeometryOperations,
elevationInfo:this.elevationInfo,labelOptions:this.labelOptions},this.handles.add([u.watch(()=>this.labelOptions.enabled,c=>{m.visible=c},u.syncAndInitial),this.on("cursor-update",()=>{const c=this.stagedVertex;m.stagedVertex=d.isSome(c)?this.coordinateHelper.pointToVector(c):null})]));this.handles.add(this._editGeometryOperations.on(["vertex-add","vertex-update","vertex-remove"],c=>{const p=c.vertices.map(t=>({componentIndex:0,vertexIndex:t.index,coordinates:this.coordinateHelper.vectorToArray(t.pos)})),
v=p.map(t=>t.coordinates);switch(c.type){case "vertex-add":this.emit(c.type,{...c,added:v,vertices:p});break;case "vertex-update":this.emit(c.type,{...c,updated:v,vertices:p});break;case "vertex-remove":this.emit(c.type,{...c,removed:v,vertices:p})}c=this._activeComponent.getLastVertex();c=d.isSome(c)?this.coordinateHelper.vectorToDehydratedPoint(c.pos):null;if(d.isNone(c)||d.isNone(this.lastVertex)||!x.pointEquals(this.lastVertex,c))this.lastVertex=c}));this._manipulator=new M.DrawManipulator({grabbableForEvent:c=>
"click"!==this.drawingMode?!0:"touch"===c.pointerType&&this._snappingEnabled&&1===this._pointerDownStates.size});this.manipulators.add(this._manipulator);this._manipulator.grabbable="point"!==a;this.handles.add([this._createManipulatorDragPipeline(this._manipulator),this._manipulator.events.on("immediate-click",c=>this._onImmediateClick(c)),this._manipulator.events.on("immediate-double-click",c=>this._onImmediateDoubleClick(c))])};k.destroy=function(){d.destroyMaybe(this.segmentLabels);d.destroyMaybe(this._snappingOperation);
this._editGeometryOperations=d.destroyMaybe(this._editGeometryOperations)};k.cancel=function(){this.complete({aborted:!0})};k.commitStagedVertex=function(){this._snappingOperation.abort();if(d.isSome(this.stagedVertex)){const {stagedVertex:a}=this;this.stagedVertex=null;this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(a))}};k.complete=function(a){a=a&&a.aborted||!1;this._snappingOperation.abort();d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();"segment"===
this.geometryType||"point"===this.geometryType?this.commitStagedVertex():this.stagedVertex=null;this._createOperationCompleted=!("multipoint"===this.geometryType&&0===this.numVertices||"polyline"===this.geometryType&&2>this.numVertices||"polygon"===this.geometryType&&3>this.numVertices);(this.isCompleted||a)&&this.emit("complete",{vertices:this.vertices.map((b,e)=>({componentIndex:0,vertexIndex:e,coordinates:b})),aborted:a,type:"complete"})};k.onInputEvent=function(a){switch(a.type){case "pointer-down":this._pointerDownStates.add(a.pointerId);
break;case "pointer-up":this._pointerDownStates.delete(a.pointerId)}switch(a.type){case "pointer-move":return this._onPointerMove(a);case "hold":return this._onHold(a)}};k.redo=function(){this._editGeometryOperations.redo()};k.undo=function(){d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();this._editGeometryOperations.undo()};k._closeOnClickVertexIndex=function(a){const b=this._activeComponent;if("polygon"===this.geometryType&&2<b.vertices.length){if(this._vertexWithinPointerDistance(b.vertices[0].pos,
a))return 0;if(this._vertexWithinPointerDistance(b.vertices[b.vertices.length-1].pos,a))return b.vertices.length-1}return null};k._createManipulatorDragPipeline=function(a){switch(d.unwrap(this.drawingMode)){case "click":return this._createManipulatorDragPipelineClick(a);case "freehand":return this._createManipulatorDragPipelineFreehand(a);case "hybrid":return this._createManipulatorDragPipelineHybrid(a)}};k._createManipulatorDragPipelineClick=function(a){return q.createManipulatorDragEventPipeline(a,
(b,e,f,n)=>{const m="touch"===n&&this._snappingEnabled;!this.isCompleted&&m&&(f=f.next(c=>{m&&d.isSome(this.snappingManager)&&this.snappingManager.doneSnapping();return c}),e.next(this._screenToMapDragEventStep()).next(c=>{"start"===c.action&&(this.stagedVertex=c.mapStart,("segment"===this.geometryType||m&&0===this.numVertices)&&this.commitStagedVertex());return c}).next(q.sceneSnappingAtLocation(this.view,this.elevationInfo)).next(this._snappingPipeline.createSnapDragEventPipelineStep({predicate:()=>
m,cancel:f,snappingManager:this.snappingManager,snappingContext:new C.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:n,visualizer:this.snappingVisualizer}),updatingHandles:this.updatingHandles,useZ:!this._requiresScenePoint}),this._snappingPipeline.next).next(c=>{m&&(this.stagedVertex=c.mapEnd,"end"===c.action&&this.commitStagedVertex());return c}).next(c=>{"end"!==c.action||"segment"!==this.geometryType&&"point"!==this.geometryType||
this.complete();return c}))})};k._createManipulatorDragPipelineFreehand=function(a){return q.createManipulatorDragEventPipeline(a,(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(f=>{"start"===f.action&&(d.isNone(this.stagedVertex)&&(this.stagedVertex=f.mapStart),"segment"===this.geometryType&&this.commitStagedVertex());return f}).next(f=>{switch(f.action){case "start":case "update":this.stagedVertex=f.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();
break;case "end":this.complete()}return f})})};k._createManipulatorDragPipelineHybrid=function(a){return q.createManipulatorDragEventPipeline(a,(b,e)=>{this.isCompleted||e.next(this._screenToMapDragEventStep()).next(f=>{"start"===f.action&&(d.isNone(this.stagedVertex)&&(this.stagedVertex=f.mapStart),this.commitStagedVertex());return f}).next(f=>{switch(f.action){case "start":case "update":this.stagedVertex=f.mapEnd;"polygon"!==this.geometryType&&"polyline"!==this.geometryType||this.commitStagedVertex();
break;case "end":"segment"!==this.geometryType&&"point"!==this.geometryType||this.complete()}return f})})};k._getEffectiveDrawSurface=function(){if(d.isNone(this.elevationDrawSurface))return this.drawSurface;if(!this.coordinateHelper.hasZ())return this.elevationDrawSurface.defaultZ=null,this.elevationDrawSurface;let a=this.defaultZ,b=!1;d.isSome(this.elevationInfo)&&"absolute-height"===this.elevationInfo.mode&&(b=!0);d.isSome(this.snapToSceneEnabled)&&(b=this.snapToSceneEnabled);d.isSome(this.elevationInfo)&&
"on-the-ground"===this.elevationInfo.mode&&(b=!1);this._drawAtFixedElevation&&(a=this.coordinateHelper.getZ(this._activeComponent.vertices[0].pos),b=!1);if(b)return this.drawSurface;this.elevationDrawSurface.defaultZ=a;return this.elevationDrawSurface};k._mapToScreen=function(a){return this._getEffectiveDrawSurface().mapToScreen(a)};k._onHold=function(a){this._snappingOperation.abort();"click"===this.drawingMode&&"touch"===a.pointerType&&this._snappingEnabled&&(this.stagedVertex=a.mapPoint);a.stopPropagation()};
k._onImmediateClick=function(a){if(!("mouse"===a.pointerType&&2===a.button||this._manipulator.dragging)){var b=this._activeComponent,e=this._closeOnClickVertexIndex(a.screenPoint);if(d.isSome(e))a.stopPropagation(),this.complete();else{e=this._screenToMap(a.screenPoint);if(d.isSome(e))switch(this.drawingMode){case "freehand":"point"===this.geometryType&&(d.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),this.complete());
break;case "click":case "hybrid":this._snappingOperation.abort(),d.isSome(this.stagedVertex)?this.commitStagedVertex():this._editGeometryOperations.appendVertex(this.coordinateHelper.pointToVector(e)),("point"===this.geometryType||"segment"===this.geometryType&&2===b.vertices.length||"segment"===this.geometryType&&"hybrid"===this.drawingMode&&1===b.vertices.length)&&this.complete()}a.stopPropagation()}}};k._onImmediateDoubleClick=function(a){this._manipulator.dragging||"point"===this.geometryType||
(this.complete(),a.stopPropagation())};k._onPointerMove=function(a){var b=I.createScreenPoint(a.x,a.y);const e=this._snappingOperation;if(this._manipulator.dragging||this._pointerDownStates.has(a.pointerId)||this._manipulator.grabbing||!this._manipulator.interactive)e.abort();else{a.stopPropagation();var f=this._closeOnClickVertexIndex(b);if(d.isSome(f))this._closeOnVertex(f),e.abort();else if(f=this._screenToMap(b),b=this._requiresScenePoint?this.drawSurface.screenToMap(b):null,this._manipulator.cursor=
d.isSome(f)?"crosshair":null,d.isNone(f))e.abort();else{var n=this.snappingManager;if(d.isNone(n))this.stagedVertex=f,e.abort();else{var m=this._drawAtFixedElevation?d.applySome(this.elevationDrawSurface,({defaultZ:c})=>c):null;a=new C.SnappingContext({editGeometryOperations:this._editGeometryOperations,elevationInfo:this.elevationInfo,pointer:a.pointerType,visualizer:this.snappingVisualizer,selfSnappingZ:d.isSome(m)?{value:m,elevationInfo:this.elevationInfo}:null});this.updatingHandles.addPromise(H.ignoreAbortErrors(e.snap({point:f,
scenePoint:b},n,a)))}}}};k._closeOnVertex=function(a){this.stagedVertex=null;a={componentIndex:0,vertexIndex:a,coordinates:this.coordinateHelper.vectorToArray(this._activeComponent.vertices[a].pos)};this.emit("cursor-update",{updated:null,vertices:[a],operation:"apply",type:"vertex-update"})};k._screenToMap=function(a){return this._getEffectiveDrawSurface().screenToMap(a)};k._screenToMapDragEventStep=function(){let a=null;return b=>{"start"===b.action&&(a=this._screenToMap(b.screenStart));if(d.isNone(a))return null;
const e=this._screenToMap(b.screenEnd);return d.isSome(e)?{...b,mapStart:a,mapEnd:e}:null}};k._vertexWithinPointerDistance=function(a,b){const e=this._mapToScreen(this.coordinateHelper.vectorToDehydratedPoint(a));d.isSome(e)?(a=e.x-b.x,b=e.y-b.y,b=25>=a*a+b*b):b=!1;return b};w._createClass(r,[{key:"_snappingEnabled",get:function(){return d.isSome(this.snappingManager)&&this.snappingManager.options.effectiveEnabled}},{key:"_requiresScenePoint",get:function(){const a=this._getEffectiveDrawSurface();
return"3d"===this.view.type&&this.drawSurface!==a}},{key:"canRedo",get:function(){return this._editGeometryOperations.canRedo}},{key:"canUndo",get:function(){return this._editGeometryOperations.canUndo}},{key:"committedVertices",get:function(){return this._activeComponent.vertices.map(a=>this.coordinateHelper.vectorToArray(a.pos))}},{key:"drawingMode",set:function(a){this._set("drawingMode",a??y.defaultDrawingMode)}},{key:"interactive",get:function(){return this._manipulator.interactive},set:function(a){this._manipulator.interactive=
a}},{key:"isCompleted",get:function(){return this._createOperationCompleted}},{key:"numCommittedVertices",get:function(){return this._activeComponent.vertices.length}},{key:"numVertices",get:function(){return d.isSome(this.stagedVertex)?this._activeComponent.vertices.length+1:this._activeComponent.vertices.length}},{key:"stagedVertex",get:function(){return this._snappingOperation.stagedPoint},set:function(a){this._snappingOperation.stagedPoint=G.clone(a)}},{key:"updating",get:function(){return this.updatingHandles.updating}},
{key:"vertices",get:function(){const a=this.committedVertices;d.isSome(this.stagedVertex)&&a.push(this.coordinateHelper.pointToArray(this.stagedVertex));return a}},{key:"_drawAtFixedElevation",get:function(){return("segment"===this.geometryType||"polygon"===this.geometryType)&&0<this.numCommittedVertices}}]);return r}(E.EventedMixin(F.HandleOwner));h.__decorate([l.property()],g.DrawOperation.prototype,"_snappingEnabled",null);h.__decorate([l.property()],g.DrawOperation.prototype,"defaultZ",void 0);
h.__decorate([l.property()],g.DrawOperation.prototype,"isDraped",void 0);h.__decorate([l.property({value:y.defaultDrawingMode})],g.DrawOperation.prototype,"drawingMode",null);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"elevationDrawSurface",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"elevationInfo",void 0);h.__decorate([l.property({constructOnly:!0,type:A})],g.DrawOperation.prototype,"labelOptions",void 0);h.__decorate([l.property({constructOnly:!0,
type:B})],g.DrawOperation.prototype,"tooltipOptions",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"geometryType",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"hasM",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"hasZ",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"manipulators",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"drawSurface",
void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"segmentLabels",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingManager",void 0);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"snappingVisualizer",void 0);h.__decorate([l.property()],g.DrawOperation.prototype,"snapToSceneEnabled",void 0);h.__decorate([l.property()],g.DrawOperation.prototype,"_snappingOperation",void 0);h.__decorate([l.property()],g.DrawOperation.prototype,
"stagedVertex",null);h.__decorate([l.property()],g.DrawOperation.prototype,"lastVertex",void 0);h.__decorate([l.property()],g.DrawOperation.prototype,"updating",null);h.__decorate([l.property({constructOnly:!0})],g.DrawOperation.prototype,"view",void 0);g.DrawOperation=h.__decorate([J.subclass("esri.views.draw.DrawOperation")],g.DrawOperation);Object.defineProperties(g,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});