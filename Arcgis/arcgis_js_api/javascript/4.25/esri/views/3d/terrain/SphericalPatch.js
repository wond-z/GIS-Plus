// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("exports ../../../chunks/_rollupPluginBabelHelpers ../../../core/mathUtils ../../../chunks/vec3 ../../../chunks/vec3f64 ../../../geometry/projection ../../../geometry/projectionEllipsoid ../../../geometry/support/frustum ./interfaces ./PatchGeometryFactory ./Tile".split(" "),function(f,C,y,g,z,n,D,p,k,q,r){r=function(l){function t(b,a,e){var d=l.call(this)||this;d._obb=Array(8);for(let c=0;8>c;c++)d._obb[c]=z.create();void 0!==b&&d.init(b,a,e);return d}C._inheritsLoose(t,l);var m=t.prototype;
m.init=function(b,a,e){l.prototype.init.call(this,b,a,e);a=this.ellipsoid.radius;e=this.extentInRadians[0];const d=this.extentInRadians[1],c=this.extentInRadians[2],h=this.extentInRadians[3];b=b[0];const u=y.lerp(d,h,.5),v=y.lerp(e,c,.5);this._edgeLen=(c-e)*Math.cos(0===b?0:Math.min(Math.abs(d),Math.abs(h)))*a;this._edgeLen2=this._edgeLen*this._edgeLen;this._curvatureHeight=a-Math.sqrt(a*a-this._edgeLen2/4);n.lonLatToSphericalPCPF(this.centerAtSeaLevel,v,u,this.ellipsoid.radius);a=z.fromArray(this.centerAtSeaLevel);
g.normalize(a,a);this.up=a;this._updateOBB();this.updateRadiusAndCenter()};m.updateRadiusAndCenter=function(){if(0===this.lij[0])g.set(this._center[f.CenterPosition.MIDDLE],0,0,0),g.set(this._center[f.CenterPosition.TOP],0,0,0),g.set(this._center[f.CenterPosition.BOTTOM],0,0,0),this.ellipsoid||(this.ellipsoid=D.getReferenceEllipsoid(this.surface.spatialReference)),this._center[f.CenterPosition.MIDDLE][3]=this.ellipsoid.radius+this.elevationBounds[1];else{this._updateCenter();const b=Math.max(g.squaredDistance(this._center[f.CenterPosition.MIDDLE],
this._obb[0]),g.squaredDistance(this._center[f.CenterPosition.MIDDLE],this._obb[1]));this._center[f.CenterPosition.MIDDLE][3]=Math.sqrt(b)}};m._calculateFrustumVisibilityStatus=function(b){if(!p.intersectsSphere(b,this._center[f.CenterPosition.MIDDLE]))return k.TileFrustumVisibility.OUTSIDE;if(10>this.lij[0])return k.TileFrustumVisibility.INTERSECTS;const a=this._obb,e=this.surface.view.state.camera.near;let d=!0;for(let h=0;h<p.NumPlanes.NUM;h++){var c=b[h];const u=c[0],v=c[1],E=c[2];c=c[3]-(h===
p.PlaneIndex.NEAR?e:0);let A=!1;for(let w=0;8>w;++w){const x=a[w];if(0>u*x[0]+v*x[1]+E*x[2]+c){if(A=!0,!d)break}else d=!1}if(!A)return k.TileFrustumVisibility.OUTSIDE}return d?k.TileFrustumVisibility.INSIDE:k.TileFrustumVisibility.INTERSECTS};m.computeElevationBounds=function(){l.prototype.computeElevationBounds.call(this);this._updateOBB()};m.createGeometry=function(){const b=this._getPatchType(this.lij[1],this.lij[0]);q.createSphericalGlobePatch(this.renderData,b);this.setMemoryDirty()};m._updateOBB=
function(){const b=this.extentInRadians,a=this._obb;for(let e=0;2>e;e++){const d=this.elevationBounds[e];let c=4*e;n.lonLatToSphericalPCPF(a[c++],b[0],b[1],this.ellipsoid.radius+d);n.lonLatToSphericalPCPF(a[c++],b[0],b[3],this.ellipsoid.radius+d);n.lonLatToSphericalPCPF(a[c++],b[2],b[3],this.ellipsoid.radius+d);n.lonLatToSphericalPCPF(a[c++],b[2],b[1],this.ellipsoid.radius+d)}if(this.surface.isWebMercator)switch(this._getPatchType(this.lij[1],this.lij[0])){case k.PatchType.HAS_NORTH_POLE:g.set(a[1],
0,0,this.ellipsoid.radius);g.set(a[2],0,0,this.ellipsoid.radius);g.set(a[5],0,0,this.ellipsoid.radius);g.set(a[6],0,0,this.ellipsoid.radius);break;case k.PatchType.HAS_SOUTH_POLE:g.set(a[0],0,0,-this.ellipsoid.radius),g.set(a[3],0,0,-this.ellipsoid.radius),g.set(a[4],0,0,-this.ellipsoid.radius),g.set(a[7],0,0,-this.ellipsoid.radius)}};m._getPatchType=function(b,a){return b===(1<<a)-1?0===b?k.PatchType.HAS_BOTH_POLES:k.PatchType.HAS_SOUTH_POLE:0===b?k.PatchType.HAS_NORTH_POLE:k.PatchType.REGULAR};
m.intersectsRay=function(b,a,e,d){var c=this._center[f.CenterPosition.MIDDLE];e=c[3]+e;var h=c[0]-b[0];d=c[1]-b[1];b=c[2]-b[2];c=(h*a[0]+d*a[1]+b*a[2])/(a[0]*a[0]+a[1]*a[1]+a[2]*a[2]);h=a[0]*c-h;d=a[1]*c-d;a=a[2]*c-b;return h*h+d*d+a*a<e*e};m.getDefaultVerticesPerRowOnLevel=function(){return this.level<B.length?B[this.level]+1:2};m.updateCornerElevations=function(){q.updateCornerSpherical(this.renderData)};m.updateEdgeElevations=function(){q.updateEdgesAndCornersSpherical(this.renderData)};return t}(r.Tile);
const B=[128,64,32,16,16,8,8,4];f.CenterPosition=void 0;(function(l){l[l.TOP=0]="TOP";l[l.MIDDLE=1]="MIDDLE";l[l.BOTTOM=2]="BOTTOM"})(f.CenterPosition||(f.CenterPosition={}));f.SphericalPatch=r;Object.defineProperties(f,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});