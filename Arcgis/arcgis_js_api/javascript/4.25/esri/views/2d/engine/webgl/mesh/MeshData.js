// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("exports ../../../../../chunks/_rollupPluginBabelHelpers ../../../tiling/PagedTileQueue ../../../tiling/TileInfoView ../../../tiling/TileKey ../../../tiling/TileQueue ../../../tiling/TileStrategy ../definitions ../DisplayId ../enums ../Utils ./VertexDataWriter ../../../layers/features/support/tileUtils".split(" "),function(n,v,p,B,w,C,D,m,x,g,q,r,y){function t(l){switch(l){case 1:case 8:case 32:return-1;case 2:case 64:return 0;case 4:case 16:case 128:return 1}}function u(l){switch(l){case 1:case 2:case 4:return-1;
case 8:case 16:return 0;case 32:case 64:case 128:return 1}}p=function(){function l(a,d,b,c,f,k=0){this.hasRecords=this._hasAggregate=!1;this._data={self:new Map,neighbors:[]};this._version=0;this._current={geometryType:0,writer:null,overlaps:0,start:0,insertAfter:0,sortKey:0,id:0,materialKey:0,indexStart:0,vertStart:0,isDotDensity:!1,bufferingEnabled:!1,metricBoxLenPointer:0};this.hint=d;this.tileKey=a;this._hasAggregate=c;this._pixelBufferEnabled=f;this._version=k;this._symbologyType=b}var e=l.prototype;
e.serialize=function(a){const d=[];d.push(this._serializeTileVertexData(this.tileKey,this.tileKey,this._data.self));this._data.neighbors.forEach((b,c)=>{var f=1<<c;c=t(f);f=u(f);c=y.getPow2NeighborKey(new w(this.tileKey),c,f,a);c=this._serializeTileVertexData(this.tileKey,c.id,b.vertexData);c.message.bufferIds=b.displayIds;d.push(c)});return d};e._serializeTileVertexData=function(a,d,b){const c=[];b={[g.WGLGeometryType.MARKER]:b.get(g.WGLGeometryType.MARKER)?.serialize(c),[g.WGLGeometryType.FILL]:b.get(g.WGLGeometryType.FILL)?.serialize(c),
[g.WGLGeometryType.LINE]:b.get(g.WGLGeometryType.LINE)?.serialize(c),[g.WGLGeometryType.TEXT]:b.get(g.WGLGeometryType.TEXT)?.serialize(c),[g.WGLGeometryType.LABEL]:b.get(g.WGLGeometryType.LABEL)?.serialize(c)};return{message:{tileKeyOrigin:a,tileKey:d,data:b,version:this._version},transferList:c}};e.featureStart=function(a,d){this._current.insertAfter=a;this._current.sortKey=d};e.featureEnd=function(){};e.recordStart=function(a,d,b,c){this._current.writer=this._getVertexWriter(b);this._current.overlaps=
0;this._current.indexStart=this._current.writer.indexCount;this._current.vertStart=this._current.writer.vertexCount;this._current.bufferingEnabled=c;this._current.id=a;this._current.materialKey=d;this._current.geometryType=b;this._current.isDotDensity=!1;this._current.writer.recordStart()};e.recordCount=function(){return this._current.writer.recordCount};e.vertexCount=function(){return this._current.writer.vertexCount};e.indexCount=function(){return this._current.writer.indexCount};e.vertexEnsureSize=
function(a){this._current.writer.vertexEnsureSize(a)};e.indexEnsureSize=function(a){this._current.writer.indexEnsureSize(a)};e.vertexBounds=function(a,d,b,c){this._current.bufferingEnabled&&this._addOverlap(a,d,b,c)};e.vertexWrite=function(a){this._current.writer.writeVertex(a)};e.vertexWriteF32=function(a){this._current.writer.writeVertexF32(a)};e.vertexEnd=function(){};e.vertexWriter=function(){return this._current.writer.vertexWriter};e.indexWrite=function(a){this._current.writer.writeIndex(a)};
e.indexWriter=function(){return this._current.writer.indexWriter};e.metricWriter=function(){return this._current.writer.metricWriter};e.metricStart=function(a,d,b,c,f,k,z,A){this._current.writer=this._getVertexWriter(g.WGLGeometryType.LABEL);const h=this._current.writer.metricWriter;h.push(x.getDisplayIdTexel(a));h.push(d);h.push(b);h.push(c);h.push(f);h.push(k);h.push(z);h.push(A);h.push(255);this._current.metricBoxLenPointer=h.push(0)};e.metricEnd=function(){const a=this._current.writer.metricWriter;
0===a.getValue(this._current.metricBoxLenPointer)&&a.seek(a.length-10)};e.metricBoxWrite=function(a,d,b,c){const f=this._current.writer.metricWriter;f.incr(this._current.metricBoxLenPointer);f.push(0);f.push(0);f.push(a);f.push(d);f.push(b);f.push(c)};e.recordEnd=function(){var a=this._current.vertStart,d=this._current.writer.vertexCount-a;if(!d)return!1;this.hasRecords=!0;var b=this._current.indexStart;this._current.writer.recordEnd(this._current.id,this._current.materialKey,this._current.insertAfter,
b,this._current.writer.indexCount-b,a,d,this._current.sortKey);if(!this._pixelBufferEnabled||this._hasAggregate||0===this._current.overlaps||this._current.geometryType===g.WGLGeometryType.LABEL)return!0;a=this._current.writer;for(d=0;8>d;d++){var c=1<<d;if(this._current.overlaps&c){this._data.neighbors[d]||(this._data.neighbors[d]={vertexData:new Map,displayIds:new Set});b=this._data.neighbors[d];var f=this._current.geometryType;if(!b.vertexData.has(f)){var k=q.getStrides(f,this._symbologyType).geometry;
k=new r.VertexDataWriter(f,k,m.PATCH_PIXEL_BUFFER_ALLOC_SIZE);b.vertexData.set(f,k)}f=b.vertexData.get(this._current.geometryType);k=4096*-t(c);c=4096*-u(c);f.copyLastFrom(a,k,c);b.displayIds.add(this._current.id)}}return!0};e._addOverlap=function(a,d,b,c){this._current.overlaps|=255^((a<0+b?148:a>=m.TILE_SIZE-b?41:189)|(d<0+c?224:d>=m.TILE_SIZE-c?7:231))};e._getVertexWriter=function(a){if(!this._data.self.has(a)){const d=this._data.self,b=q.getStrides(a,this._symbologyType).geometry;d.set(a,new r.VertexDataWriter(a,
b,this.hint.records))}return this._data.self.get(a)};v._createClass(l,[{key:"hasAggregates",get:function(){return this._hasAggregate}},{key:"hasPixelBufferEnabled",get:function(){return this._pixelBufferEnabled}}]);return l}();n.MeshData=p;Object.defineProperties(n,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});