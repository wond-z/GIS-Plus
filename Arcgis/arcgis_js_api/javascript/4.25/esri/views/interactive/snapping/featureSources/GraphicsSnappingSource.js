// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.25/esri/copyright.txt for details.
//>>built
define("exports ../../../../chunks/_rollupPluginBabelHelpers ../../../../chunks/tslib.es6 ../../../../core/Accessor ../../../../core/arrayUtils ../../../../core/asyncUtils ../../../../core/HandleOwner ../../../../core/maybe ../../../../core/promiseUtils ../../../../core/reactiveUtils ../../../../core/accessorSupport/decorators/property ../../../../core/accessorSupport/ensureType ../../../../core/accessorSupport/decorators/subclass ../../../../geometry/Polygon ../../../../geometry/projection ../../../../geometry/support/normalizeUtilsSync ../../../../geometry/support/typeUtils ../../../../layers/graphics/featureConversionUtils ../../../../layers/graphics/OptimizedFeature ../../../../layers/graphics/data/FeatureStore ../../../../layers/graphics/data/QueryEngine ../../../../support/elevationInfoUtils ../../../../symbols/support/utils ../snappingUtils ./queryEngineUtils ./snappingCandidateElevationAlignment ./snappingCandidateElevationFilter ./symbologySnappingCandidates".split(" "),
function(g,p,m,F,G,H,I,k,q,v,n,S,J,K,w,L,M,N,O,P,Q,y,z,A,B,C,R,D){g.GraphicsSnappingSource=function(E){function u(a){a=E.call(this,a)||this;a.availability=1;a._sources={multipoint:null,point:null,polygon:null,polyline:null};a._loadedWkids=new Set;a._loadedWkts=new Set;a._pendingAdds=[];a._extrudedPolygonSymbolsCount=0;return a}p._inheritsLoose(u,E);var e=u.prototype;e.destroy=function(){for(const a of this._pendingAdds)a.task.abort();this._pendingAdds.length=0;this._mapSources(a=>this._destroySource(a))};
e.initialize=function(){this.updatingHandles.add(()=>this.getGraphicsLayers(),c=>{this.updatingHandles.removeHandles("graphics-collections");for(const d of c)this._addMany(d.graphics.toArray()),this.handles.add([d.on("graphic-update",f=>this._onGraphicUpdate(f)),this.updatingHandles.addOnCollectionChange(()=>d.graphics,f=>this._onGraphicsChanged(f))],"graphics-collections")},v.initial);const {view:a}=this,{layer:b}=this.layerSource;k.isSome(a)&&"3d"===a.type&&"map-notes"!==b.type&&this.addHandles([a.elevationProvider.on("elevation-change",
({context:c})=>{y.elevationContextAffectsAlignment(c,b.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),v.watch(()=>b.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),v.initial)])};e.fetchCandidates=function(){var a=p._asyncToGenerator(function*(b,c){const {point:d,coordinateHelper:f,elevationInfo:h}=b;var l=yield q.eachAlwaysValues(this._mapSources(x=>this._fetchCandidatesForSource(x,b,c)));q.throwIfAborted(c);const r=f.hasZ()?y.absoluteHeightElevationInfo:
h,t=this._getGroundElevation;l=l.flat().map(x=>B.convertSnappingCandidate(x,f,r,t));A.sortCandidatesInPlace(d,l,f);return l});return function(b,c){return a.apply(this,arguments)}}();e._fetchCandidatesForSource=function(){var a=p._asyncToGenerator(function*(b,c,d){c=A.makeSnappingQuery(c);b=yield b.queryEngine.executeQueryForSnapping(c,d);q.throwIfAborted(d);b=yield this._snappingElevationAligner.alignCandidates(b.candidates,d);q.throwIfAborted(d);const f=yield this._symbologySnappingFetcher.fetch(b,
d);q.throwIfAborted(d);d=0===f.length?b:[...b,...f];return this._snappingElevationFilter.filter(c,d)});return function(b,c,d){return a.apply(this,arguments)}}();e.refresh=function(){};e._onGraphicUpdate=function(a){if(this.getGraphicsLayers().some(b=>b.graphics.includes(a.graphic)))switch(a.property){case "geometry":case "visible":this._remove(a.graphic),this._addMany([a.graphic])}};e._onGraphicsChanged=function(a){for(const b of a.removed)this._remove(b);this._addMany(a.added)};e._addMany=function(a){const b=
[],c=new Map;for(const d of a)k.isNone(d.geometry)||(this._needsInitializeProjection(d.geometry.spatialReference)?(b.push(d.geometry.spatialReference),c.set(d.uid,d)):this._add(d));this._createPendingAdd(b,c)};e._createPendingAdd=function(a,b){var c=this;if(a.length){var d=H.createTask(function(){var l=p._asyncToGenerator(function*(r){yield w.initializeProjection(a.map(t=>({source:t,dest:c.spatialReference})),{signal:r});c._markLoadedSpatialReferences(a);for(const [,t]of b)c._add(t)});return function(r){return l.apply(this,
arguments)}}());this.updatingHandles.addPromise(d.promise);var f={task:d,graphics:b},h=()=>G.removeUnordered(this._pendingAdds,f);d.promise.then(h,h);this._pendingAdds.push(f)}};e._markLoadedSpatialReferences=function(a){for(const b of a)null!=b.wkid&&this._loadedWkids.add(b.wkid),null!=b.wkt&&this._loadedWkts.add(b.wkt)};e._add=function(a){if(!k.isNone(a.geometry)&&a.visible){var b=a.geometry;if("mesh"!==b.type){"extent"===b.type&&(b=K.fromExtent(b));var c=this._ensureSource(b.type);k.isNone(c)||
(b=this._createOptimizedFeature(a.uid,b),k.isNone(b)||(c.featureStore.add(b),z.symbolHasExtrudeSymbolLayer(a.symbol)&&this._extrudedPolygonSymbolsCount++))}}};e._needsInitializeProjection=function(a){return null!=a.wkid&&this._loadedWkids.has(a.wkid)||null!=a.wkt&&this._loadedWkts.has(a.wkt)?!1:!w.canProjectWithoutEngine(a,this.spatialReference)};e._createOptimizedFeature=function(a,b){b=w.project(L.normalizeCentralMeridianForDisplay(b),this.spatialReference);if(!b)return null;b=this._ensureGeometryHasZ(b);
b=N.convertFromGeometry(b,this._hasZ,!1);return new O.OptimizedFeature(b,{OBJECTID:a},null,a)};e._ensureGeometryHasZ=function(a){if(!this._hasZ)return a;const b=c=>{for(;3>c.length;)c.push(0)};a=a.clone();a.hasZ=!0;switch(a.type){case "point":a.z=a.z??0;break;case "multipoint":a.points.forEach(b);break;case "polyline":a.paths.forEach(c=>c.forEach(b));break;case "polygon":a.rings.forEach(c=>c.forEach(b))}return a};e._ensureSource=function(a){var b=this._sources[a];if(k.isSome(b))return b;b=this._createSource(a);
return this._sources[a]=b};e._createSource=function(a){var b=M.featureGeometryTypeKebabDictionary.toJSON(a);const c=this._hasZ,d=new P({geometryType:b,hasZ:c,hasM:!1});b=new Q.QueryEngine({featureStore:d,fields:[{name:"OBJECTID",type:"esriFieldTypeOID",alias:"OBJECTID"}],geometryType:b,hasM:!1,hasZ:c,objectIdField:"OBJECTID",spatialReference:this.spatialReference,scheduler:k.isSome(this.view)&&"3d"===this.view.type?this.view.resourceController.scheduler:null});return{featureStore:d,queryEngine:b,
type:a}};e._remove=function(a){this._mapSources(b=>this._removeFromSource(b,a));for(const b of this._pendingAdds)b.graphics.delete(a.uid),0===b.graphics.size&&b.task.abort()};e._removeFromSource=function(a,b){a.featureStore.has(b.uid)&&(a.featureStore.removeById(b.uid),z.symbolHasExtrudeSymbolLayer(b.symbol)&&this._extrudedPolygonSymbolsCount--)};e._destroySource=function(a){a.queryEngine.destroy();this._sources[a.type]=null};e._mapSources=function(a){const {point:b,polygon:c,polyline:d,multipoint:f}=
this._sources,h=[];k.isSome(b)&&h.push(a(b));k.isSome(c)&&h.push(a(c));k.isSome(d)&&h.push(a(d));k.isSome(f)&&h.push(a(f));return h};p._createClass(u,[{key:"updating",get:function(){return this.updatingHandles.updating}},{key:"_hasZ",get:function(){const a=this.view;return k.isSome(a)&&"3d"===a.type&&"map-notes"!==this.layerSource.layer.type}},{key:"_snappingElevationAligner",get:function(){const {view:a}=this,{layer:b}=this.layerSource,c=k.isSome(a)&&"3d"===a.type;if(!c||"map-notes"===b.type)return C.getSnappingCandidateElevationAligner();
const d=function(){var f=p._asyncToGenerator(function*(h,l){return(yield q.whenOrAbort(a.whenLayerView(b),l)).elevationAlignPointsInFeatures(h,l)});return function(h,l){return f.apply(this,arguments)}}();return C.getSnappingCandidateElevationAligner(c,{elevationInfo:b.elevationInfo,alignPointsInFeatures:d,spatialReference:a.spatialReference})}},{key:"_snappingElevationFilter",get:function(){var {view:a}=this;a=k.isSome(a)&&"3d"===a.type&&"map-notes"!==this.layerSource.layer.type;return R.getSnappingCandidateElevationFilter(a)}},
{key:"_symbologySnappingFetcher",get:function(){const {view:a}=this,{layer:b}=this.layerSource,c=k.isSome(a)&&"3d"===a.type,d=0<this._extrudedPolygonSymbolsCount;return c&&"map-notes"!==b.type&&d?D.getSymbologySnappingCandidatesFetcher(d,function(){var f=p._asyncToGenerator(function*(h,l){const r=yield a.whenLayerView(b);q.throwIfAborted(l);return r.queryForSymbologySnapping({candidates:h,spatialReference:a.spatialReference},l)});return function(h,l){return f.apply(this,arguments)}}()):D.getSymbologySnappingCandidatesFetcher()}},
{key:"_getGroundElevation",get:function(){return B.makeGetGroundElevation(this.view)}}]);return u}(I.HandleOwnerMixin(F));m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"getGraphicsLayers",void 0);m.__decorate([n.property({constructOnly:!0})],g.GraphicsSnappingSource.prototype,"layerSource",void 0);m.__decorate([n.property({constructOnly:!0})],g.GraphicsSnappingSource.prototype,"spatialReference",void 0);m.__decorate([n.property({constructOnly:!0})],g.GraphicsSnappingSource.prototype,
"view",void 0);m.__decorate([n.property({readOnly:!0})],g.GraphicsSnappingSource.prototype,"updating",null);m.__decorate([n.property({readOnly:!0})],g.GraphicsSnappingSource.prototype,"availability",void 0);m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"_hasZ",null);m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"_snappingElevationAligner",null);m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"_snappingElevationFilter",null);m.__decorate([n.property()],
g.GraphicsSnappingSource.prototype,"_symbologySnappingFetcher",null);m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"_extrudedPolygonSymbolsCount",void 0);m.__decorate([n.property()],g.GraphicsSnappingSource.prototype,"_getGroundElevation",null);g.GraphicsSnappingSource=m.__decorate([J.subclass("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],g.GraphicsSnappingSource);Object.defineProperties(g,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});