/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../chunks/tslib.es6.js";import{JSONSupport as r}from"../core/JSONSupport.js";import{clone as o}from"../core/lang.js";import{L as e}from"../chunks/Logger.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"../chunks/ensureType.js";import{subclass as n}from"../core/accessorSupport/decorators/subclass.js";import i from"../views/3d/environment/SunnyWeather.js";import{a as p,v as a}from"../chunks/weather.js";import{l as c}from"../chunks/lightingTypes.js";import m from"./SunLighting.js";import l from"./VirtualLighting.js";import h from"./background/Background.js";import u from"./background/ColorBackground.js";import"../core/Accessor.js";import"../core/Handles.js";import"../chunks/maybe.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/metadata.js";import"../chunks/object.js";import"../chunks/ArrayPool.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../core/promiseUtils.js";import"../core/Error.js";import"../config.js";import"../chunks/string.js";import"../chunks/enumeration.js";import"../chunks/jsonMap.js";import"../views/3d/environment/CloudyWeather.js";import"../views/3d/environment/FoggyWeather.js";import"../views/3d/environment/RainyWeather.js";import"../views/3d/environment/SnowyWeather.js";import"../chunks/reader.js";import"../chunks/writer.js";import"../Color.js";import"../chunks/colorUtils.js";import"../chunks/mathUtils.js";import"../chunks/vec3.js";import"../chunks/common.js";import"../chunks/materialUtils.js";import"../chunks/screenUtils.js";import"../chunks/opacityUtils.js";const j={base:h,key:"type",typeMap:{color:u}},d={types:j,json:{read:(g=j,(t,r,o)=>{if(!t)return t;for(const r in g.typeMap)if(t.type===r){const e=new g.typeMap[r];return e.read(t,o),e}}),write:{overridePolicy:(t,r,o)=>({enabled:!o||!o.isPresentation})}}};var g,k;const y=e.getLogger("esri.webscene.Environment"),b=(t,r,o)=>({enabled:!o||!o.isPresentation});let w=k=class extends r{constructor(t){super(t),this.lighting=new m,this.background=null,this.atmosphereEnabled=!0,this.starsEnabled=!0}set weather(t){a(t?.type,y)&&this._set("weather",t)}clone(){return new k(this.cloneConstructProperties())}cloneConstructProperties(){return{lighting:this.lighting&&"virtual"===this.lighting.type?l.prototype.clone.call(this.lighting):m.prototype.clone.call(this.lighting),background:o(this.background),atmosphereEnabled:this.atmosphereEnabled,starsEnabled:this.starsEnabled,weather:this.weather.clone()}}};t([s({types:c,nonNullable:!0,json:{write:!0}})],w.prototype,"lighting",void 0),t([s(d)],w.prototype,"background",void 0),t([s({type:Boolean,nonNullable:!0,json:{write:{overridePolicy:b}}})],w.prototype,"atmosphereEnabled",void 0),t([s({type:Boolean,nonNullable:!0,json:{write:{overridePolicy:b}}})],w.prototype,"starsEnabled",void 0),t([s({types:p,nonNullable:!0,json:{write:!0},value:new i})],w.prototype,"weather",null),w=k=t([n("esri.webscene.Environment")],w);const v=w;export{v as default};
