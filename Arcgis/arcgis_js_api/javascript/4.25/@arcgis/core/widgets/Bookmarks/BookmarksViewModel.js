/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import e from"../../Viewpoint.js";import o from"../../core/Collection.js";import i from"../../core/Error.js";import r from"../../core/Evented.js";import{i as s}from"../../chunks/maybe.js";import{property as a}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import{cast as n}from"../../core/accessorSupport/decorators/cast.js";import{subclass as m}from"../../core/accessorSupport/decorators/subclass.js";import{S as c}from"../../chunks/SlideThumbnail.js";import p from"../../webmap/Bookmark.js";import{GoToMixin as l}from"../support/GoTo.js";import"../../Camera.js";import"../../core/Clonable.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../chunks/object.js";import"../../chunks/Logger.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/ArrayPool.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../chunks/ensureType.js";import"../../chunks/Cyclical.js";import"../../chunks/mathUtils.js";import"../../chunks/vec3.js";import"../../chunks/common.js";import"../../core/JSONSupport.js";import"../../chunks/reader.js";import"../../chunks/writer.js";import"../../geometry/Point.js";import"../../geometry/Geometry.js";import"../../geometry/SpatialReference.js";import"../../geometry/support/webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../../geometry.js";import"../../geometry/Extent.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../chunks/jsonMap.js";import"../../geometry/support/jsonUtils.js";import"../../chunks/shared.js";import"../../chunks/SimpleObservable.js";import"../../TimeExtent.js";import"../../chunks/timeUtils.js";import"../../core/Identifiable.js";const u=o.ofType(p),k={width:128,height:128,format:"png"},h={takeScreenshot:!0,captureViewpoint:!0,captureRotation:!0,captureScale:!0,captureTimeExtent:!0},j={time:!0};let d=class extends(l(r.EventedAccessor)){constructor(t){super(t),this.abilities={...j},this.activeBookmark=null,this.view=null}destroy(){this.view=null,this._set("activeBookmark",null)}castAbilities(t){return{...j,...t}}get bookmarks(){return this.view?.map?.bookmarks??new u}set bookmarks(t){this._overrideIfSome("bookmarks",t)}set defaultCreateOptions(t){this._set("defaultCreateOptions",{...h,...t})}get defaultCreateOptions(){return h}set defaultEditOptions(t){this._set("defaultEditOptions",{...h,...t})}get defaultEditOptions(){return h}get state(){const t=this.get("view");return t&&!t.ready?"loading":"ready"}async createBookmark(t){const{view:e,defaultCreateOptions:o,abilities:r}=this;if(!e)throw new i("create-bookmark:invalid-view","Cannot create a bookmark without a view.");const{takeScreenshot:a,screenshotSettings:n,captureViewpoint:m,captureRotation:c,captureScale:l,captureTimeExtent:u}={...o,...t},k=a?await this._createThumbnail(n):void 0,h=r.time&&u&&s(e.timeExtent)?e.timeExtent.clone():void 0;return new p({...k&&{thumbnail:k},...u&&{timeExtent:h},...m&&{viewpoint:this._createViewpoint({view:e,captureScale:l,captureRotation:c})}})}async editBookmark(t,e){const{view:o,defaultEditOptions:r}=this;if(!o)throw new i("edit-bookmark:invalid-view","Cannot edit a bookmark without a view.");const{takeScreenshot:a,screenshotSettings:n,captureViewpoint:m,captureRotation:c,captureScale:p,captureTimeExtent:l}={...r,...e},u=a?await this._createThumbnail(n):void 0;return u&&(t.thumbnail=u),m&&(t.viewpoint=this._createViewpoint({view:o,captureScale:p,captureRotation:c})),l&&s(o.timeExtent)&&(t.timeExtent=o.timeExtent.clone()),this.emit("bookmark-edit",{bookmark:t}),t}goTo(t){const{abilities:e,view:o}=this;if(!o)throw new i("go-to:invalid-view","Cannot go to a bookmark without a view");const r=t?.viewpoint;if(!r)throw new i("go-to:invalid-bookmark","Cannot go to a bookmark that does not contain a 'viewpoint'.",{bookmark:t});this._set("activeBookmark",t);const s={target:r},a=this.callGoTo(s),n=t?.timeExtent;return e.time&&n&&(o.timeExtent=n),this.emit("bookmark-select",{bookmark:t}),a.catch((()=>{})).then((()=>this._set("activeBookmark",null))),a}async _createThumbnail(t){const e=await this.view.takeScreenshot({...k,...t});return new c({url:e.dataUrl})}_createViewpoint({view:t,captureRotation:o,captureScale:i}){const r=t.viewpoint?.clone();return new e({targetGeometry:t.extent?.clone(),rotation:o&&r?.rotation||0,scale:i&&r?.scale||0})}};t([a()],d.prototype,"abilities",void 0),t([n("abilities")],d.prototype,"castAbilities",null),t([a({readOnly:!0})],d.prototype,"activeBookmark",void 0),t([a({type:u})],d.prototype,"bookmarks",null),t([a()],d.prototype,"defaultCreateOptions",null),t([a()],d.prototype,"defaultEditOptions",null),t([a({readOnly:!0})],d.prototype,"state",null),t([a()],d.prototype,"view",void 0),d=t([m("esri.widgets.Bookmarks.BookmarksViewModel")],d);const w=d;export{w as default};
