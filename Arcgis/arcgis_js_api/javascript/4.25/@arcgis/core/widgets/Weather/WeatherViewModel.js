/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../core/Accessor.js";import r from"../../core/Handles.js";import{L as s}from"../../chunks/Logger.js";import{a as o,d as n,i,g as a,e as h}from"../../chunks/maybe.js";import{watch as p,syncAndInitial as c}from"../../core/reactiveUtils.js";import{property as m}from"../../core/accessorSupport/decorators/property.js";import{subclass as u}from"../../core/accessorSupport/decorators/subclass.js";import l from"../../views/3d/environment/CloudyWeather.js";import d from"../../views/3d/environment/FoggyWeather.js";import y from"../../views/3d/environment/RainyWeather.js";import w from"../../views/3d/environment/SnowyWeather.js";import j from"../../views/3d/environment/SunnyWeather.js";import{v}from"../../chunks/weather.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../core/lang.js";import"../../chunks/metadata.js";import"../../chunks/object.js";import"../../chunks/ArrayPool.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../core/Error.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/ensureType.js";import"../../core/JSONSupport.js";import"../../chunks/enumeration.js";import"../../chunks/jsonMap.js";var g,f;!function(e){e.Disabled="disabled",e.Ready="ready",e.Error="error"}(g||(g={})),function(e){e.NotVisible="not-visible",e.LocalScene="local-scene",e.NoAtmosphere="no-atmosphere",e.UnsupportedView="unsupported-view"}(f||(f={}));const _=s.getLogger("esri.widgets.Weather.WeatherViewModel");let k=class extends t{constructor(e){super(e),this.view=null,this._handles=new r,this._settingWeather=!1,this._weatherByType={sunny:new j,cloudy:new l,rainy:new y,snowy:new w,foggy:new d}}initialize(){this._handles.add([p((()=>this.current),(e=>{this._settingWeather||o(e)||(this._weatherByType={...this._weatherByType,[e.type]:e})}),c)])}destroy(){this._handles=n(this._handles)}get state(){const e=this.view;return o(e)||!e.ready?g.Disabled:i(this.error)?this.error===f.NotVisible?g.Ready:g.Error:g.Ready}get error(){const e=this.view;return o(e)||!e.ready?null:"3d"!==e.type?f.UnsupportedView:"local"===e.viewingMode?f.LocalScene:e.environment.atmosphereEnabled?e.environmentManager.weatherVisible?null:f.NotVisible:f.NoAtmosphere}get current(){const e=a(this._environment,(e=>e.weather));return h(e,this._weatherByType.sunny)}set current(e){a(this._environment,(t=>t.weather=e))}get test(){return{...this._weatherByType}}get _environment(){const e=this.view;return i(e)&&"3d"===e.type?e.environment:null}setWeatherByType(e){if(!v(e,_))return;const t=this._environment;i(t)&&(this._settingWeather=!0,t.weather=this._weatherByType[e],this._settingWeather=!1)}setSnowCoverEnabled(e){const t=this.current;"snowCover"in t&&(t.snowCover=e?"enabled":"disabled")}};e([m()],k.prototype,"view",void 0),e([m()],k.prototype,"state",null),e([m()],k.prototype,"error",null),e([m()],k.prototype,"current",null),e([m()],k.prototype,"_environment",null),k=e([u("esri.widgets.Weather.WeatherViewModel")],k);const b=k;export{g as W,f as a,b as default};
