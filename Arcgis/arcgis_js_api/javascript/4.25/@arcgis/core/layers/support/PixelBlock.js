/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as t}from"../../chunks/tslib.es6.js";import s from"../../core/Error.js";import{JSONSupport as e}from"../../core/JSONSupport.js";import{clone as i}from"../../core/lang.js";import{L as r}from"../../chunks/Logger.js";import{i as l,a}from"../../chunks/maybe.js";import{property as o}from"../../core/accessorSupport/decorators/property.js";import{cast as h}from"../../core/accessorSupport/decorators/cast.js";import{subclass as n}from"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/object.js";import"../../config.js";import"../../chunks/string.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../chunks/ArrayPool.js";import"../../chunks/tracking.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../core/promiseUtils.js";import"../../chunks/ensureType.js";class c{constructor(t=null,s=null,e=null){this.minValue=t,this.maxValue=s,this.noDataValue=e}}var p;let u=p=class extends e{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.statistics=null}static createEmptyBand(t,s){return new(p.getPixelArrayConstructor(t))(s)}static getPixelArrayConstructor(t){let s;switch(t){case"u1":case"u2":case"u4":case"u8":s=Uint8Array;break;case"u16":s=Uint16Array;break;case"u32":s=Uint32Array;break;case"s8":s=Int8Array;break;case"s16":s=Int16Array;break;case"s32":s=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":s=Float32Array;break;case"f64":s=Float64Array}return s}castPixelType(t){if(!t)return"f32";let s=t.toLowerCase();return["u1","u2","u4"].includes(s)?s="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].includes(s)||(s="f32"),s}getPlaneCount(){return this.pixels?.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new s("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics??new c)}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){if(!this.pixels)return;this.statistics=this.pixels.map((t=>this._calculateBandStatistics(t,this.mask)));const t=this.mask;let s=0;if(l(t))for(let e=0;e<t.length;e++)t[e]&&s++;else s=this.width*this.height;this.validPixelCount=s}clamp(t){if(!t||"f64"===t||"f32"===t||!this.pixels)return;let s;switch(t){case"u8":s=[0,255];break;case"u16":s=[0,65535];break;case"u32":s=[0,4294967295];break;case"s8":s=[-128,127];break;case"s16":s=[-32768,32767];break;case"s32":s=[-2147483648,2147483647];break;default:s=[-34e38,34e38]}const[e,i]=s,r=this.pixels,l=this.width*this.height,a=r.length;let o,h,n;const c=[];for(let s=0;s<a;s++){n=p.createEmptyBand(t,l),o=r[s];for(let t=0;t<l;t++)h=o[t],n[t]=h>i?i:h<e?e:h;c.push(n)}this.pixels=c,this.pixelType=t}extractBands(t){const{pixels:s,statistics:e}=this;if(a(t)||0===t.length||!s||0===s.length)return this;const i=s.length,r=t.some((t=>t>=s.length)),l=i===t.length&&!t.some(((t,s)=>t!==s));return r||l?this:new p({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map((t=>s[t])),statistics:e&&t.map((t=>e[t]))})}clone(){const t=new p({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let s;l(this.mask)&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const e=p.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const i=!!this.pixels[0].slice;for(s=0;s<this.pixels.length;s++)t.pixels[s]=i?this.pixels[s].slice(0,this.pixels[s].length):new e(this.pixels[s])}if(this.statistics)for(t.statistics=[],s=0;s<this.statistics.length;s++)t.statistics[s]=i(this.statistics[s]);return t}_fillFrom8Bit(t){const{mask:s,maskIsAlpha:e,pixels:i}=this;if(!t||!i||!i.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let a,o,h,n;a=o=h=i[0],i.length>=3?(o=i[1],h=i[2]):2===i.length&&(o=i[1]);const c=new Uint32Array(t),p=this.width*this.height;if(a.length===p)if(l(s)&&s.length===p)if(e)for(n=0;n<p;n++)s[n]&&(c[n]=s[n]<<24|h[n]<<16|o[n]<<8|a[n]);else for(n=0;n<p;n++)s[n]&&(c[n]=255<<24|h[n]<<16|o[n]<<8|a[n]);else for(n=0;n<p;n++)c[n]=255<<24|h[n]<<16|o[n]<<8|a[n];else r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:s,mask:e,statistics:i}=this;if(!t||!s||!s.length)return void r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const a=this.pixelType;let o=1,h=0,n=1;if(i&&i.length>0){for(const t of i)if(null!=t.minValue&&(h=Math.min(h,t.minValue)),null!=t.maxValue&&null!=t.minValue){const s=t.maxValue-t.minValue;n=Math.max(n,s)}o=255/n}else{let t=255;"s8"===a?(h=-128,t=127):"u16"===a?t=65535:"s16"===a?(h=-32768,t=32767):"u32"===a?t=4294967295:"s32"===a?(h=-2147483648,t=2147483647):"f32"===a?(h=-34e38,t=34e38):"f64"===a&&(h=-Number.MAX_VALUE,t=Number.MAX_VALUE),o=255/(t-h)}const c=new Uint32Array(t),p=this.width*this.height;let u,m,g,f,d;if(u=m=g=s[0],u.length!==p)return r.getLogger(this.declaredClass).error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(s.length>=2)if(m=s[1],s.length>=3&&(g=s[2]),l(e)&&e.length===p)for(f=0;f<p;f++)e[f]&&(c[f]=255<<24|(g[f]-h)*o<<16|(m[f]-h)*o<<8|(u[f]-h)*o);else for(f=0;f<p;f++)c[f]=255<<24|(g[f]-h)*o<<16|(m[f]-h)*o<<8|(u[f]-h)*o;else if(l(e)&&e.length===p)for(f=0;f<p;f++)d=(u[f]-h)*o,e[f]&&(c[f]=255<<24|d<<16|d<<8|d);else for(f=0;f<p;f++)d=(u[f]-h)*o,c[f]=255<<24|d<<16|d<<8|d}_fillFrom32Bit(t){const{pixels:s,mask:e}=this;if(!t||!s||!s.length)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let i,a,o,h;i=a=o=s[0],s.length>=3?(a=s[1],o=s[2]):2===s.length&&(a=s[1]);const n=this.width*this.height;if(i.length!==n)return r.getLogger(this.declaredClass).error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let c=0;if(l(e)&&e.length===n)for(h=0;h<n;h++)t[c++]=i[h],t[c++]=a[h],t[c++]=o[h],t[c++]=1&e[h];else for(h=0;h<n;h++)t[c++]=i[h],t[c++]=a[h],t[c++]=o[h],t[c++]=1}_calculateBandStatistics(t,s){let e=1/0,i=-1/0;const r=t.length;let a,o=0;if(l(s))for(a=0;a<r;a++)s[a]&&(o=t[a],e=o<e?o:e,i=o>i?o:i);else for(a=0;a<r;a++)o=t[a],e=o<e?o:e,i=o>i?o:i;return new c(e,i)}};t([o({json:{write:!0}})],u.prototype,"width",void 0),t([o({json:{write:!0}})],u.prototype,"height",void 0),t([o({json:{write:!0}})],u.prototype,"pixelType",void 0),t([h("pixelType")],u.prototype,"castPixelType",null),t([o({json:{write:!0}})],u.prototype,"validPixelCount",void 0),t([o({json:{write:!0}})],u.prototype,"mask",void 0),t([o({json:{write:!0}})],u.prototype,"maskIsAlpha",void 0),t([o({json:{write:!0}})],u.prototype,"pixels",void 0),t([o({json:{write:!0}})],u.prototype,"statistics",void 0),u=p=t([n("esri.layers.support.PixelBlock")],u);const m=u;export{m as default};
