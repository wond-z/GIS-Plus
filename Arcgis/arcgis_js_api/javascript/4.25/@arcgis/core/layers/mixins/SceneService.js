/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../../chunks/tslib.es6.js";import t from"../../request.js";import r from"../../core/Error.js";import"../../chunks/object.js";import{L as s}from"../../chunks/Logger.js";import{i}from"../../chunks/maybe.js";import{debounce as o}from"../../core/promiseUtils.js";import{urlToObject as a}from"../../core/urlUtils.js";import{property as n}from"../../core/accessorSupport/decorators/property.js";import"../../core/lang.js";import"../../chunks/ensureType.js";import{r as l}from"../../chunks/reader.js";import{subclass as p}from"../../core/accessorSupport/decorators/subclass.js";import{w as c}from"../../chunks/writer.js";import{u as m}from"../../chunks/originUtils.js";import u from"../../geometry/Extent.js";import d from"../../geometry/HeightModelInfo.js";import h from"../../geometry/SpatialReference.js";import{t as y,p as f,c as j,a as g,w as v}from"../../chunks/arcgisLayerUrl.js";import{i as S,u as w}from"../../chunks/commonProperties.js";import{f as I}from"../../chunks/I3SIndexInfo.js";import x from"../../portal/Portal.js";import k from"../../portal/PortalItem.js";import{s as b}from"../../chunks/saveUtils.js";import"../../config.js";import"../../kernel.js";import"../../chunks/string.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../chunks/tracking.js";import"../../chunks/multiOriginJSONSupportUtils.js";import"../../geometry/Geometry.js";import"../../core/JSONSupport.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/ArrayPool.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../geometry/Point.js";import"../../core/accessorSupport/decorators/cast.js";import"../../geometry/support/webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../../chunks/jsonMap.js";import"../../chunks/unitUtils.js";import"../../chunks/projectionEllipsoid.js";import"../../chunks/persistableUrlUtils.js";import"../../TimeExtent.js";import"../../chunks/timeUtils.js";import"../../support/timeUtils.js";import"../../chunks/ElevationInfo.js";import"../support/fieldUtils.js";import"../../chunks/arcadeOnDemand.js";import"../../geometry.js";import"../../geometry/Multipoint.js";import"../../chunks/zmUtils.js";import"../../geometry/Polygon.js";import"../../chunks/extentUtils.js";import"../../geometry/Polyline.js";import"../../chunks/typeUtils.js";import"../../geometry/support/jsonUtils.js";import"../../chunks/unitConversionUtils.js";import"../../chunks/lengthUtils.js";import"../../chunks/opacityUtils.js";import"../../core/Loadable.js";import"../../core/Promise.js";import"../../chunks/locale.js";import"../../portal/PortalQueryParams.js";import"../../portal/PortalQueryResult.js";import"../../portal/PortalUser.js";import"../../portal/PortalFolder.js";import"../../portal/PortalGroup.js";import"../../chunks/assets.js";import"../../portal/PortalItemResource.js";import"../../portal/PortalRating.js";import"../../chunks/asyncUtils.js";import"../../chunks/uuid.js";import"../../chunks/resourceUtils.js";const U=s.getLogger("esri.layers.mixins.SceneService"),_=s=>{let _=class extends s{constructor(){super(...arguments),this.spatialReference=null,this.fullExtent=null,this.heightModelInfo=null,this.minScale=0,this.maxScale=0,this.version={major:Number.NaN,minor:Number.NaN,versionString:""},this.copyright=null,this.sublayerTitleMode="item-title",this.title=null,this.layerId=null,this.indexInfo=null,this._debouncedSaveOperations=o((async(e,t,r)=>{switch(e){case O.SAVE:return this._save(t);case O.SAVE_AS:return this._saveAs(r,t)}}))}readSpatialReference(e,t){return this._readSpatialReference(t)}_readSpatialReference(e){if(null!=e.spatialReference)return h.fromJSON(e.spatialReference);{const t=e.store,r=t.indexCRS||t.geographicCRS,s=r&&parseInt(r.substring(r.lastIndexOf("/")+1,r.length),10);return null!=s?new h(s):null}}readFullExtent(e,t,r){if(null!=e&&"object"==typeof e){const s=null==e.spatialReference?{...e,spatialReference:this._readSpatialReference(t)}:e;return u.fromJSON(s,r)}const s=t.store,i=this._readSpatialReference(t);return null==i||null==s||null==s.extent||!Array.isArray(s.extent)||s.extent.some((e=>e<R))?null:new u({xmin:s.extent[0],ymin:s.extent[1],xmax:s.extent[2],ymax:s.extent[3],spatialReference:i})}parseVersionString(e){const t={major:Number.NaN,minor:Number.NaN,versionString:e},r=e.split(".");return r.length>=2&&(t.major=parseInt(r[0],10),t.minor=parseInt(r[1],10)),t}readVersion(e,t){const r=t.store,s=null!=r.version?r.version.toString():"";return this.parseVersionString(s)}readTitlePortalItem(e){return"item-title"!==this.sublayerTitleMode?void 0:e}readTitleService(e,t){const r=this.portalItem&&this.portalItem.title;if("item-title"===this.sublayerTitleMode)return y(this.url,t.name);let s=t.name;if(!s&&this.url){const e=f(this.url);i(e)&&(s=e.title)}return"item-title-and-service-name"===this.sublayerTitleMode&&r&&(s=r+" - "+s),j(s)}set url(e){const t=g({layer:this,url:e,nonStandardUrlAllowed:!1,logger:U});this._set("url",t.url),null!=t.layerId&&this._set("layerId",t.layerId)}writeUrl(e,t,r,s){v(this,e,"layers",t,s)}get parsedUrl(){const e=this._get("url"),t=a(e);return null!=this.layerId&&(t.path=`${t.path}/layers/${this.layerId}`),t}async _fetchIndexAndUpdateExtent(e,t){this.indexInfo=I(this.parsedUrl.path,this.rootNode,e,this.apiKey,U,t),null==this.fullExtent||this.fullExtent.hasZ||this._updateExtent(await this.indexInfo)}_updateExtent(e){if("page"===e?.type){const t=e.rootIndex%e.pageSize,s=e.rootPage?.nodes?.[t];if(null==s||null==s.obb||null==s.obb.center||null==s.obb.halfSize)throw new r("sceneservice:invalid-node-page","Invalid node page.");if(s.obb.center[0]<R||null==this.fullExtent||this.fullExtent.hasZ)return;const i=s.obb.halfSize,o=s.obb.center[2],a=Math.sqrt(i[0]*i[0]+i[1]*i[1]+i[2]*i[2]);this.fullExtent.zmin=o-a,this.fullExtent.zmax=o+a}else if("node"===e?.type){const t=e.rootNode?.mbs;if(!Array.isArray(t)||4!==t.length||t[0]<R)return;const r=t[2],s=t[3],{fullExtent:i}=this;i&&(i.zmin=r-s,i.zmax=r+s)}}async _fetchService(e){if(null==this.url)throw new r("sceneservice:url-not-set","Scene service can not be loaded without valid portal item or url");if(null==this.layerId&&/SceneServer\/*$/i.test(this.url)){const t=await this._fetchFirstLayerId(e);null!=t&&(this.layerId=t)}return this._fetchServiceLayer(e)}async _fetchFirstLayerId(e){const r=await t(this.url,{query:{f:"json",token:this.apiKey},responseType:"json",signal:e});if(r.data&&Array.isArray(r.data.layers)&&r.data.layers.length>0)return r.data.layers[0].id}async _fetchServiceLayer(e){const r=await t(this.parsedUrl?.path??"",{query:{f:"json",token:this.apiKey},responseType:"json",signal:e});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));let s=!1;if(r.data.layerType&&"Voxel"===r.data.layerType&&(s=!0),s)return this._fetchVoxelServiceLayer();const i=r.data;this.read(i,{origin:"service",url:this.parsedUrl}),this.validateLayer(i)}async _fetchVoxelServiceLayer(e){const r=(await t(this.parsedUrl?.path+"/layer",{query:{f:"json",token:this.apiKey},responseType:"json",signal:e})).data;this.read(r,{origin:"service",url:this.parsedUrl}),this.validateLayer(r)}async _ensureLoadBeforeSave(){await this.load(),"beforeSave"in this&&"function"==typeof this.beforeSave&&await this.beforeSave()}validateLayer(e){}_updateTypeKeywords(e,t,r){e.typeKeywords||(e.typeKeywords=[]);const s=t.getTypeKeywords();for(const t of s)e.typeKeywords.push(t);e.typeKeywords&&(e.typeKeywords=e.typeKeywords.filter(((e,t,r)=>r.indexOf(e)===t)),r===E.newItem&&(e.typeKeywords=e.typeKeywords.filter((e=>"Hosted Service"!==e))))}async _saveAs(e,t){const s={...P,...t};let i=k.from(e);i||(U.error("_saveAs(): requires a portal item parameter"),await Promise.reject(new r("sceneservice:portal-item-required","_saveAs() requires a portal item to save to"))),i.id&&(i=i.clone(),i.id=null);const o=i.portal||x.getDefault();await this._ensureLoadBeforeSave(),i.type=N,i.portal=o;const a={origin:"portal-item",url:null,messages:[],portal:o,portalItem:i,writtenProperties:[],blockedRelativeUrls:[],resources:{toAdd:[],toUpdate:[],toKeep:[],pendingOperations:[]}},n={layers:[this.write({},a)]};return await Promise.all(a.resources?.pendingOperations??[]),await this._validateAgainstJSONSchema(n,a,s),i.url=this.url,i.title||(i.title=this.title),this._updateTypeKeywords(i,s,E.newItem),await o._signIn(),await(o.user?.addItem({item:i,folder:s&&s.folder,data:n})),await b(this.resourceReferences,a,null),this.portalItem=i,m(a),a.portalItem=i,i}async _save(e){const t={...P,...e};if(!this.portalItem)throw U.error("_save(): requires the .portalItem property to be set"),new r("sceneservice:portal-item-not-set","Portal item to save to has not been set on this SceneService");if(this.portalItem.type!==N)throw U.error("_save(): Non-matching portal item type. Got "+this.portalItem.type+", expected "+N),new r("sceneservice:portal-item-wrong-type",`Portal item needs to have type "${N}"`);await this._ensureLoadBeforeSave();const s={origin:"portal-item",url:this.portalItem.itemUrl&&a(this.portalItem.itemUrl),messages:[],portal:this.portalItem.portal||x.getDefault(),portalItem:this.portalItem,writtenProperties:[],blockedRelativeUrls:[],resources:{toAdd:[],toUpdate:[],toKeep:[],pendingOperations:[]}},i={layers:[this.write({},s)]};return await Promise.all(s.resources?.pendingOperations??[]),await this._validateAgainstJSONSchema(i,s,t),this.portalItem.url=this.url,this.portalItem.title||(this.portalItem.title=this.title),this._updateTypeKeywords(this.portalItem,t,E.existingItem),await this.portalItem.update({data:i}),await b(this.resourceReferences,s,null),m(s),this.portalItem}async _validateAgainstJSONSchema(e,t,s){let i=t.messages?.filter((e=>"error"===e.type)).map((e=>new r(e.name,e.message,e.details)))??[];if(s&&s.validationOptions?.ignoreUnsupported&&(i=i.filter((e=>"layer:unsupported"!==e.name&&"symbol:unsupported"!==e.name&&"symbol-layer:unsupported"!==e.name&&"property:unsupported"!==e.name&&"url:unsupported"!==e.name&&"scenemodification:unsupported"!==e.name))),s.validationOptions?.enabled||A){const t=(await import("../../chunks/schemaValidator.js")).validate(e,s.portalItemLayerType);if(t.length>0){const e=`Layer item did not validate:\n${t.join("\n")}`;if(U.error(`_validateAgainstJSONSchema(): ${e}`),"throw"===s.validationOptions?.failPolicy){const e=t.map((e=>new r("sceneservice:schema-validation",e))).concat(i);throw new r("sceneservice-validate:error","Failed to save layer item due to schema validation, see `details.errors`.",{combined:e})}}}if(i.length>0)throw new r("sceneservice:save","Failed to save SceneService due to unsupported or invalid content. See 'details.errors' for more detailed information",{errors:i})}};return e([n(S)],_.prototype,"id",void 0),e([n({type:h})],_.prototype,"spatialReference",void 0),e([l("spatialReference",["spatialReference","store.indexCRS","store.geographicCRS"])],_.prototype,"readSpatialReference",null),e([n({type:u})],_.prototype,"fullExtent",void 0),e([l("fullExtent",["fullExtent","store.extent","spatialReference","store.indexCRS","store.geographicCRS"])],_.prototype,"readFullExtent",null),e([n({readOnly:!0,type:d})],_.prototype,"heightModelInfo",void 0),e([n({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:{source:"minScale"},write:!1}}}})],_.prototype,"minScale",void 0),e([n({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:{source:"maxScale"},write:!1}}}})],_.prototype,"maxScale",void 0),e([n({readOnly:!0})],_.prototype,"version",void 0),e([l("version",["store.version"])],_.prototype,"readVersion",null),e([n({type:String,json:{read:{source:"copyrightText"}}})],_.prototype,"copyright",void 0),e([n({type:String,json:{read:!1}})],_.prototype,"sublayerTitleMode",void 0),e([n({type:String})],_.prototype,"title",void 0),e([l("portal-item","title")],_.prototype,"readTitlePortalItem",null),e([l("service","title",["name"])],_.prototype,"readTitleService",null),e([n({type:Number,json:{origins:{service:{read:{source:"id"}},"portal-item":{write:{target:"id",isRequired:!0,ignoreOrigin:!0},read:!1}}}})],_.prototype,"layerId",void 0),e([n(w)],_.prototype,"url",null),e([c("url")],_.prototype,"writeUrl",null),e([n()],_.prototype,"parsedUrl",null),e([n({readOnly:!0})],_.prototype,"store",void 0),e([n({type:String,readOnly:!0,json:{read:{source:"store.rootNode"}}})],_.prototype,"rootNode",void 0),_=e([p("esri.layers.mixins.SceneService")],_),_},R=-1e38,A=!1;var E;!function(e){e[e.existingItem=0]="existingItem",e[e.newItem=1]="newItem"}(E||(E={}));const N="Scene Service",P={getTypeKeywords:()=>[],portalItemLayerType:"unknown",validationOptions:{enabled:!0,ignoreUnsupported:!1,failPolicy:"throw"}};var O;!function(e){e[e.SAVE=0]="SAVE",e[e.SAVE_AS=1]="SAVE_AS"}(O||(O={}));export{N as SCENE_SERVICE_ITEM_TYPE,O as SaveOperationType,_ as SceneService};
