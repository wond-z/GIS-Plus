/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"../chunks/tslib.es6.js";import t from"../core/Accessor.js";import s from"../core/Collection.js";import r from"../core/Handles.js";import{when as i,watch as o,sync as n}from"../core/reactiveUtils.js";import{property as a}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"../chunks/ensureType.js";import{subclass as p}from"../core/accessorSupport/decorators/subclass.js";import l from"../core/Evented.js";import{L as m}from"../chunks/Logger.js";import{a as u,e as c,i as h}from"../chunks/maybe.js";import d from"../geometry/SpatialReference.js";import{t as j}from"../chunks/aaBoundingRect.js";import{a as y}from"../geometry/Extent.js";import{updateGeometryElevation as g}from"../layers/support/ElevationSampler.js";import{E as v}from"../chunks/TerrainConst.js";import"../chunks/get.js";import"../chunks/utils.js";import"../chunks/handleUtils.js";import"../chunks/metadata.js";import"../chunks/object.js";import"../chunks/ArrayPool.js";import"../chunks/tracking.js";import"../chunks/watch.js";import"../core/scheduling.js";import"../chunks/nextTick.js";import"../core/promiseUtils.js";import"../core/Error.js";import"../config.js";import"../chunks/string.js";import"../chunks/shared.js";import"../chunks/SimpleObservable.js";import"../core/JSONSupport.js";import"../chunks/writer.js";import"../chunks/mathUtils.js";import"../chunks/vec3.js";import"../chunks/common.js";import"../geometry/Geometry.js";import"../chunks/reader.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"../chunks/Ellipsoid.js";import"../geometry.js";import"../geometry/Multipoint.js";import"../chunks/zmUtils.js";import"../geometry/Polygon.js";import"../chunks/extentUtils.js";import"../geometry/Polyline.js";import"../chunks/typeUtils.js";import"../chunks/jsonMap.js";import"../geometry/support/jsonUtils.js";import"../chunks/unitUtils.js";import"../chunks/projectionEllipsoid.js";import"../geometry/projection.js";import"../chunks/mat4.js";import"../chunks/pe.js";import"../chunks/assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"../chunks/geodesicConstants.js";import"../geometry/support/GeographicTransformation.js";import"../geometry/support/GeographicTransformationStep.js";import"../chunks/zscale.js";import"../layers/support/TileInfo.js";import"../layers/support/LOD.js";import"../chunks/TileKey.js";let k=class extends l.EventedAccessor{constructor(e){super(e),this.demResolution={min:-1,max:-1},this.noDataValue=v}initialize(){this.view.basemapTerrain.on("elevation-change",(()=>this.emit("changed",{})))}get extent(){const e=this.view.basemapTerrain;if(u(e.extent)||u(e.spatialReference))return null;const t=j(e.extent,e.spatialReference);return t.zmin=e.visibleElevationBounds.min,t.zmax=e.visibleElevationBounds.max,t}get spatialReference(){return c(this.view.basemapTerrain.spatialReference,d.WGS84)}elevationAt(e,t){if(u(this.extent)||!y(this.extent,e,t)){const s=h(this.extent)?`${this.extent.xmin}, ${this.extent.ymin}, ${this.extent.xmax}, ${this.extent.ymax}`:null;return m.getLogger(this.declaredClass).warn("#elevationAt()",`Point used to sample elevation (${e}, ${t}) is outside of the sampler extent (${s})`),this.noDataValue}return c(this.view.elevationProvider.getElevation(e,t,0,this.spatialReference,"ground"),this.noDataValue)}queryElevation(e){return g(e.clone(),this)}};e([a({readOnly:!0})],k.prototype,"demResolution",void 0),e([a({readOnly:!0})],k.prototype,"extent",null),e([a({readOnly:!0})],k.prototype,"noDataValue",void 0),e([a()],k.prototype,"spatialReference",null),e([a({constructOnly:!0})],k.prototype,"view",void 0),k=e([p("esri.views.support.GroundViewElevationSampler")],k);const w=k;let f=class extends t{constructor(e){super(e),this._handles=new r,this.view=null,this.layerViews=new s}initialize(){this._handles.add(i((()=>this.view?.map?.ground),(e=>e.load()))),this._handles.add(this.layerViews.on("after-changes",(()=>this._layerViewsAfterChangesHandler())))}destroy(){this._set("view",null),this._handles&&(this._handles.destroy(),this._handles=null)}get elevationSampler(){return this.view?"2d"===this.view.type?null:this.view.ready&&this.view.basemapTerrain&&this.view.basemapTerrain.ready?new w({view:this.view}):null:null}get updating(){return!this.suspended&&this.layerViews.some((e=>e.updating))}get suspended(){return!this.view||this.view.suspended}_layerViewsAfterChangesHandler(){this._handles.remove("updating"),this._handles.add(this.layerViews.map((e=>o((()=>e.updating),(()=>this._updateUpdating()),n))).toArray(),"updating"),this._updateUpdating()}_updateUpdating(){this.notifyChange("updating")}};e([a({readOnly:!0})],f.prototype,"elevationSampler",null),e([a({type:Boolean,readOnly:!0})],f.prototype,"updating",null),e([a({constructOnly:!0})],f.prototype,"view",void 0),e([a({type:s,readOnly:!0})],f.prototype,"layerViews",void 0),e([a({readOnly:!0})],f.prototype,"suspended",null),f=e([p("esri.views.GroundView")],f);const x=f;export{x as default};
