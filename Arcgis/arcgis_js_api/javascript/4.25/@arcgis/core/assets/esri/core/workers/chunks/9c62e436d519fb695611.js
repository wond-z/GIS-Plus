"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[2552],{89241:(e,t,i)=>{i.d(t,{L:()=>r});var s=i(91700);class r{constructor(e,t){this._storage=new s.M,this._storage.maxSize=e,t&&this._storage.registerRemoveFunc("",t)}put(e,t,i){this._storage.put(e,t,i,1)}pop(e){return this._storage.pop(e)}get(e){return this._storage.get(e)}clear(){this._storage.clearAll()}destroy(){this._storage.destroy()}get maxSize(){return this._storage.maxSize}set maxSize(e){this._storage.maxSize=e}}},94751:(e,t,i)=>{i.d(t,{c:()=>a,g:()=>c,o:()=>o,u:()=>l});var s=i(92896),r=i(60947),n=i(32422);const a={102100:{maxX:20037508.342788905,minX:-20037508.342788905,plus180Line:new s.Z({paths:[[[20037508.342788905,-20037508.342788905],[20037508.342788905,20037508.342788905]]],spatialReference:r.Z.WebMercator}),minus180Line:new s.Z({paths:[[[-20037508.342788905,-20037508.342788905],[-20037508.342788905,20037508.342788905]]],spatialReference:r.Z.WebMercator})},4326:{maxX:180,minX:-180,plus180Line:new s.Z({paths:[[[180,-180],[180,180]]],spatialReference:r.Z.WGS84}),minus180Line:new s.Z({paths:[[[-180,-180],[-180,180]]],spatialReference:r.Z.WGS84})}};function o(e,t){return Math.ceil((e-t)/(2*t))}function l(e,t){const i=c(e);for(const e of i)for(const i of e)i[0]+=t;return e}function c(e){return(0,n.oU)(e)?e.rings:e.paths}},95307:(e,t,i)=>{i.d(t,{c:()=>l,s:()=>c}),i(74569);var s=i(82058),r=i(32422),n=i(94216),a=i(32101),o=i(81731);async function l(e,t,i,a){const o=(0,n.p)(e),l=t[0].spatialReference,c={...a,query:{...o.query,f:"json",sr:JSON.stringify(l),target:JSON.stringify({geometryType:(0,r.Ji)(t[0]),geometries:t}),cutter:JSON.stringify(i)}},u=await(0,s.default)(o.path+"/cut",c),{cutIndexes:f,geometries:h=[]}=u.data;return{cutIndexes:f,geometries:h.map((e=>{const t=(0,r.im)(e);return t.spatialReference=l,t}))}}async function c(e,t,i){const n="string"==typeof e?(0,a.mN)(e):e,l=t[0].spatialReference,c=(0,r.Ji)(t[0]),u={...i,query:{...n.query,f:"json",sr:l.wkid?l.wkid:JSON.stringify(l),geometries:JSON.stringify((0,o.e)(t))}},{data:f}=await(0,s.default)(n.path+"/simplify",u);return(0,o.d)(f.geometries,c,l)}},94216:(e,t,i)=>{i.d(t,{a:()=>n,e:()=>o,p:()=>a}),i(31450),i(88762);var s=i(76506),r=i(32101);function n(e,t){return t?{...t,query:{...e,...t.query}}:{query:e}}function a(e){return"string"==typeof e?(0,r.mN)(e):(0,s.d9)(e)}function o(e,t,i){const s={};for(const r in e){if("declaredClass"===r)continue;const n=e[r];if(null!=n&&"function"!=typeof n)if(Array.isArray(n)){s[r]=[];for(let e=0;e<n.length;e++)s[r][e]=o(n[e])}else if("object"==typeof n)if(n.toJSON){const e=n.toJSON(i&&i[r]);s[r]=t?e:JSON.stringify(e)}else s[r]=t?n:JSON.stringify(n);else s[r]=n}return s}i(82058)},81731:(e,t,i)=>{i.d(t,{d:()=>n,e:()=>r});var s=i(32422);function r(e){return{geometryType:(0,s.Ji)(e[0]),geometries:e.map((e=>e.toJSON()))}}function n(e,t,i){const r=(0,s.q9)(t);return e.map((e=>{const t=r.fromJSON(e);return t.spatialReference=i,t}))}},95533:(e,t,i)=>{i.d(t,{aX:()=>y});var s=i(31450),r=i(60991),n=i(92143),a=i(71252),o=i(44567),l=i(92896),c=i(94751),u=i(60947),f=i(35132),h=i(95307);i(71552),i(76506),i(40642),i(34250),i(91306),i(60474),i(66396),i(86656),i(17533),i(6540),i(2906),i(21801),i(73796),i(12047),i(21972),i(91055),i(19657),i(6906),i(50406),i(97714),i(91597),i(86787),i(89623),i(98380),i(32422),i(84069),i(74569),i(22781),i(57251),i(82058),i(88762),i(32101),i(94216),i(81731);const d=n.L.getLogger("esri.geometry.support.normalizeUtils");function p(e,t,i){if(t){const t=function(e,t){if(!(e instanceof l.Z||e instanceof o.Z)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw d.error(e),new r.Z(e)}const i=(0,c.g)(e),s=[];for(const e of i){const i=[];s.push(i),i.push([e[0][0],e[0][1]]);for(let s=0;s<e.length-1;s++){const r=e[s][0],n=e[s][1],a=e[s+1][0],o=e[s+1][1],l=Math.sqrt((a-r)*(a-r)+(o-n)*(o-n)),c=(o-n)/l,u=(a-r)/l,f=l/t;if(f>1){for(let e=1;e<=f-1;e++){const s=e*t,a=u*s+r,o=c*s+n;i.push([a,o])}const e=(l+Math.floor(f-1)*t)/2,s=u*e+r,a=c*e+n;i.push([s,a])}i.push([a,o])}}return function(e){return"polygon"===e.type}(e)?new o.Z({rings:s,spatialReference:e.spatialReference}):new l.Z({paths:s,spatialReference:e.spatialReference})}(e,1e6);e=(0,f.Sx)(t,!0)}return i&&(e=(0,c.u)(e,i)),e}function m(e,t,i){if(Array.isArray(e)){const s=e[0];if(s>t){const i=(0,c.o)(s,t);e[0]=s+i*(-2*t)}else if(s<i){const t=(0,c.o)(s,i);e[0]=s+t*(-2*i)}}else{const s=e.x;if(s>t){const i=(0,c.o)(s,t);e=e.clone().offset(i*(-2*t),0)}else if(s<i){const t=(0,c.o)(s,i);e=e.clone().offset(t*(-2*i),0)}}return e}async function y(e,t,i){if(!Array.isArray(e))return y([e],t);t&&"string"!=typeof t&&d.warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const r="string"==typeof t?t:t?.url??s.Z.geometryServiceUrl;let n,g,x,b,I,w,_,S,v=0;const R=[],T=[];for(const t of e)if((0,a.a)(t))T.push(t);else if(n||(n=t.spatialReference,g=(0,u.g)(n),x=n.isWebMercator,w=x?102100:4326,b=c.c[w].maxX,I=c.c[w].minX,_=c.c[w].plus180Line,S=c.c[w].minus180Line),g)if("mesh"===t.type)T.push(t);else if("point"===t.type)T.push(m(t.clone(),b,I));else if("multipoint"===t.type){const e=t.clone();e.points=e.points.map((e=>m(e,b,I))),T.push(e)}else if("extent"===t.type){const e=t.clone()._normalize(!1,!1,g);T.push(e.rings?new o.Z(e):e)}else if(t.extent){const e=t.extent,i=(0,c.o)(e.xmin,I)*(2*b);let s=0===i?t.clone():(0,c.u)(t.clone(),i);e.offset(i,0),e.intersects(_)&&e.xmax!==b?(v=e.xmax>v?e.xmax:v,s=p(s,x),R.push(s),T.push("cut")):e.intersects(S)&&e.xmin!==I?(v=e.xmax*(2*b)>v?e.xmax*(2*b):v,s=p(s,x,360),R.push(s),T.push("cut")):T.push(s)}else T.push(t.clone());else T.push(t);let C=(0,c.o)(v,b),k=-90;const P=C,F=new l.Z;for(;C>0;){const e=360*C-180;F.addPath([[e,k],[e,-1*k]]),k*=-1,C--}if(R.length>0&&P>0){const t=function(e,t){let i=-1;for(let s=0;s<t.cutIndexes.length;s++){const r=t.cutIndexes[s],n=t.geometries[s],a=(0,c.g)(n);for(let e=0;e<a.length;e++){const t=a[e];t.some((i=>{if(i[0]<180)return!0;{let i=0;for(let e=0;e<t.length;e++){const s=t[e][0];i=s>i?s:i}i=Number(i.toFixed(9));const s=-360*(0,c.o)(i,180);for(let i=0;i<t.length;i++){const t=n.getPoint(e,i);n.setPoint(e,i,t.clone().offset(s,0))}return!0}}))}if(r===i){if("polygon"===e[0].type)for(const t of(0,c.g)(n))e[r]=e[r].addRing(t);else if("polyline"===e[0].type)for(const t of(0,c.g)(n))e[r]=e[r].addPath(t)}else i=r,e[r]=n}return e}(R,await(0,h.c)(r,R,F,i)),s=[],n=[];for(let i=0;i<T.length;i++){const r=T[i];if("cut"!==r)n.push(r);else{const r=t.shift(),o=e[i];(0,a.i)(o)&&"polygon"===o.type&&o.rings&&o.rings.length>1&&r.rings.length>=o.rings.length?(s.push(r),n.push("simplify")):n.push(x?(0,f.$)(r):r)}}if(!s.length)return n;const o=await(0,h.s)(r,s,i),l=[];for(let e=0;e<n.length;e++){const t=n[e];"simplify"!==t?l.push(t):l.push(x?(0,f.$)(o.shift()):o.shift())}return l}const M=[];for(let e=0;e<T.length;e++){const t=T[e];if("cut"!==t)M.push(t);else{const e=R.shift();M.push(!0===x?(0,f.$)(e):e)}}return M}},32552:(e,t,i)=>{i.r(t),i.d(t,{default:()=>$e});var s=i(29768),r=i(86748),n=i(88678),a=i(60991),o=i(71252),l=i(54179),c=i(50406),u=i(58085),f=i(34250),h=(i(76506),i(91306)),d=i(59465),p=i(97714),m=i(17533),y=i(41617),g=i(80462),x=i(21471),b=(i(74569),i(82058)),I=i(92143),w=i(60947),_=i(21132),S=i(67541),v=i(66827),R=i(47868),T=i(56550),C=i(13074),k=i(43352),P=i(12047),F=i(33101),M=i(72246),O=i(53571),B=i(52182),D=i(91597);const z=new Map,N=new class{constructor(e=15e3,t=5e3){this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const i=e+"/"+t,s=this._cachedBlocks;if(s.has(i)){const e=s.get(i);return e.refCount--,e.refCount<=0&&(s.delete(i),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const i=e+"/"+t,s=this._cachedBlocks;if(s.has(i)){const e=s.get(i);return e.ts=Date.now(),e.refCount++,s.delete(i),s.set(i,e),e.block}return null}putBlock(e,t,i,s){const r=this._cachedBlocks,n=e+"/"+t;if(r.has(n)){const e=r.get(n);e.ts=Date.now(),e.refCount++}else r.set(n,{block:i,ts:Date.now(),refCount:1,controller:s});this._trim(),this._updateTimer()}deleteBlock(e,t){const i=this._cachedBlocks,s=e+"/"+t;i.has(s)&&i.delete(s)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),i=Date.now();for(let s=0;s<t.length&&t[s][1].ts<=i-this._duration;s++)e.delete(t[s][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let i=0;i<t.length-this._size;i++)e.delete(t[i][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}};function J(e,t){return null==t?e:`${e}?sliceId=${t}`}function E(e,t,i){const s=z.get(e);if(!s)return null==t?N.decreaseRefCount(e,i):0;if(null==t||null==s[t])return N.decreaseRefCount(e,i);const r=s[t]?.cache,n=r?.get(i);if(r&&n){if(n.refCount--,0===n.refCount){r.delete(i);for(let e=0;e<s.length;e++)s[e]?.cache.delete(i);n.controller&&n.controller.abort()}return n.refCount}return 0}function L(e,t,i){const s=z.get(e);if(!s)return null==t?N.getBlock(e,i):null;if(null==t||null==s[t]){for(let e=0;e<s.length;e++){const t=s[e]?.cache.get(i);if(t)return t.refCount++,t.block}return N.getBlock(e,i)}const r=s[t]?.cache.get(i);if(r)return r.refCount++,r.block;for(let e=0;e<s.length;e++){if(e===t||!s[e])continue;const r=s[e]?.cache,n=r?.get(i);if(r&&n)return n.refCount++,r.set(i,n),n.block}return null}function A(e,t,i,s,r=null){const n=z.get(e);if(!n)return void(null==t&&N.putBlock(e,i,s,r));if(null==t||null==n[t])return void N.putBlock(e,i,s,r);const a={refCount:1,block:s,isResolved:!1,isRejected:!1,controller:r};s.then((()=>a.isResolved=!0)).catch((()=>a.isRejected=!0)),n[t]?.cache.set(i,a)}function H(e,t,i){const s=z.get(e);s?null!=t&&null!=s[t]?s[t]?.cache.delete(i):N.deleteBlock(e,i):null==t&&N.deleteBlock(e,i)}var Z=i(40558),W=i(98264),j=i(7534),q=i(21801),G=i(9538),U=i(1030),$=i(35717),V=(i(73796),i(21972),i(60474),i(66396),i(86656),i(71552)),X=(i(91055),i(6540),i(19657),i(6906),i(31450),i(40642),i(2906),i(84069),i(35132),i(89623),i(86787),i(44567),i(98380),i(92896),i(22781),i(57251),i(32422),i(55306),i(96467),i(63571),i(14249),i(60217),i(30776),i(48027),i(54174),i(82426),i(72836),i(29794),i(63130),i(25696),i(98402),i(42775),i(95834),i(34394),i(57150),i(76726),i(20444),i(76393),i(78548),i(2497),i(49906),i(46527),i(11799),i(48649),i(59877),i(9960),i(30823),i(53326),i(92482),i(5853),i(39141),i(32101)),Y=(i(38742),i(48243),i(15324),i(75067),i(89914),i(34635),i(10401),i(49900),i(88762),i(81184),i(3482),i(67477),i(78533),i(74653),i(91091),i(58943),i(70737),i(36834),i(66122),i(8487),i(17817),i(90814),i(15459),i(97189),i(61847),i(28212),i(16955),i(22401),i(48699),i(77894),i(55187),i(8586),i(44509),i(69814),i(11305),i(62259),i(44790),i(5909),i(60669),i(48208),i(51589),i(65684),i(12158),i(74864),i(63683),i(94479),i(45702),i(51127),i(26822),i(51723),i(23243),i(51669),i(6090),i(3977),i(36741),i(11253),i(90319),i(38822),i(52228),i(74057),i(23761),i(29107),i(30574),i(2157),i(25977),i(58076),i(98242),i(7471),i(54414),i(1648),i(8925),i(33921),i(45154),i(16769),i(93603),i(15438),i(593),i(85699),i(55531),i(96055),i(47776),i(18033),i(6331),i(62048),i(56890),i(30493),i(4292),i(75626),i(72652),i(29641),i(70821),i(3296),i(34229),i(37029),i(48190),i(85557),i(53785),i(95587),i(94070),i(43022),i(16218),i(9075),i(83378),i(81050),i(55436),i(62484),i(76223),i(86951),i(82844),i(95310),i(93939),i(62407),i(90033),i(97807),i(238),i(68714),i(84225),i(95533),i(94751),i(95307),i(94216),i(81731),i(19124),i(41864),i(92200),i(65949),i(22465),i(65775),i(5777),i(73173),i(30831),i(91700),i(53269),i(22337)),K=(i(93314),i(35197),i(1557),i(47842),i(17298),i(65514),i(46987),i(37453),i(66284),i(87239),i(92817),i(3781)),Q=(i(12381),i(1623),i(92624),i(92847),i(97546));i(9801),i(53523),i(42911),i(46826),i(45433),i(54732),i(66774);let ee=class extends((0,F.v)(P.wq)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=(0,B.l)();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:k.Z.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=(0,B.g)(e.spatialReference);return(0,o.i)(t)&&e.extent.width>=t/2}set url(e){this._set("url",(0,_.s)(e,I.L.getLogger(this.declaredClass)))}async open(e){throw new a.Z("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,s={}){const r=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],s)}async identify(e,t={}){e=(0,h.m)(D.Z,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:s}=t,{hasMultidimensionalTranspose:r,multidimensionalInfo:n}=this.rasterInfo;let{transposedVariableName:a}=t;const l=(0,o.i)(n)&&r&&(null!=s||(0,O.i)(i));l&&!a&&(a=(0,o.i)(i)&&i.length>0?i[0].variableName??void 0:n.variables[0].name,t={...t,transposedVariableName:a}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:c,extent:u}=this.rasterInfo,{datumTransformation:f}=t;let d=(0,B.p)(e,c,f);if(!u.intersects(d))return{location:d,value:null};if((0,o.i)(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(d);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};d=e}let p=0;const m=(0,o.i)(a)&&(0,o.i)(n)&&this.rasterInfo.hasMultidimensionalTranspose;if(!m)if(t.srcResolution)p=(0,B.s)(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(p=await this.computeBestPyramidLevelForLocation(e,t),null==p)return{location:d,value:null};const y=this.identifyPixelLocation(d,p,null,m);if(null===y)return{location:d,value:null};const{row:g,col:x,rowOffset:b,colOffset:I,blockWidth:w}=y,_=a??(0,o.u)(t.sliceId),S=J(this.url,_),v=`${p}/${g}/${x}`;let R=L(S,null,v);(0,o.a)(R)&&(R=this.fetchRawTile(p,g,x,t),A(S,null,v,R));const T=await R;if((0,o.a)(T)||!T.pixels?.length)return{location:d,value:null};const C=b*w+I;return this._processIdentifyResult(T,{srcLocation:d,position:C,pyramidLevel:p,useTransposedTile:!!m,requestSomeSlices:l,identifyOptions:t})}async fetchPixels(e,t,i,s={}){if(e=(0,B.a)(e),(s=this._getRequestOptionsWithSliceId(s)).requestRawData)return this._fetchPixels(e,t,i,s);const r=(0,B.g)(e.spatialReference),n=(0,B.b)(e);if((0,o.a)(r)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,s);if(n>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:c}=e,u=Math.round(r/(c-l)*t),f=u-Math.round((r/2-l)/(c-l)*t);let h=0;const d=[];for(let o=0;o<=n;o++){const p=new q.Z({xmin:0===o?l:-r/2,xmax:o===n?c-r*o:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),m=0===o?u-f:o===n?t-h:u;h+=m,d.push(m);const y=s.disableWrapAround&&o>0?null:this._fetchPixels(p,m,i,s);a.push(y)}const p=(await Promise.all(a)).map((e=>e?.pixelBlock));let m=null;const y={width:t,height:i};return m=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:d},s)).pixelBlock:(0,W.m)(p,y,{blockWidths:d}),{extent:e,srcExtent:(0,B.c)(e,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:m}}async fetchRawPixels(e,t,i,s={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,s),{nativeExtent:n,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**e,u=a.x*c,f=a.y*c,h=new q.Z({xmin:n.xmin+u*t.x,xmax:n.xmin+u*(t.x+i.width-1),ymin:n.ymax-f*(t.y+i.height-1),ymax:n.ymax-f*t.y,spatialReference:n.spatialReference});if(!r)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:d,mosaicSize:p}=r;if(1===d.length&&(0,o.i)(d[0])&&d[0].width===i.width&&d[0].height===i.height)return{extent:h,srcExtent:h,pixelBlock:r.pixelBlocks[0]};const m=e>0?l.pyramidBlockWidth:l.blockWidth,y=e>0?l.pyramidBlockHeight:l.blockHeight,g={x:t.x%m,y:t.y%y};let x;return x=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:p,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock:(0,W.m)(d,p,{clipOffset:g,clipSize:i}),{extent:h,srcExtent:h,pixelBlock:x}}fetchRawTile(e,t,i,s){throw new a.Z("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return(0,B.c)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?(0,Z.d)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i=0){const{customFetchParameters:s}=this.ioConfig,{range:r,query:n,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const o=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await(0,b.default)(e,{...t,query:{...n,...s},headers:{...a,...o}})}catch(s){if(i>0)return i--,this.request(e,t,i);throw s}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return(0,o.a)(t)||(0,o.a)(e)||0===e.length?null:(0,O.b)(e,t)}getTileExtentFromTileInfo(e,t,i,s){const r=(0,o.c)(s.lodAt(e));return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:s}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let a=Math.max(s.x,s.y),o=1/.0254*96*a;for(let e=0;e<=n;e++)r.push({level:n-e,resolution:a,scale:o}),a*=2,o*=2;const l=new D.Z({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new k.Z({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,s){const{width:r,height:n,nativeExtent:a,pixelSize:o,spatialReference:l}=e,c=new D.Z({x:a.xmin,y:a.ymax,spatialReference:l});null==s&&(s=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],s);e.storageInfo=new M.R({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,s,r,n=0,a=2){if(1===r.length&&n>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<n;i++)e*=a,t*=a,r.push({x:e,y:t})}const o=[],{x:l,y:c}=s;for(let s=0;s<r.length;s++){const{x:n,y:a}=r[s];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*a)/i/a),maxRow:Math.floor((c-e.ymin-.1*a)/i/a)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(0===e)return t;if((0,o.i)(i)&&i.length)return i[e-1];const r=s**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,s){const{spatialReference:r,nativeExtent:n,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:u}=a,f=s&&(0,o.i)(u)?u.tileSize[0]:a.blockWidth,h=s&&(0,o.i)(u)?u.tileSize[1]:a.blockHeight,d=(0,B.p)(e,r,i);if(!n.intersects(d))return null;if(t<0||t>l)return null;const p=this.getPyramidPixelSize(t),{x:m,y}=p,g=(c.y-d.y)/y/h,x=(d.x-c.x)/m/f,b=Math.min(h-1,Math.floor((g-Math.floor(g))*h)),I=Math.min(f-1,Math.floor((x-Math.floor(x))*f));return{pyramidLevel:t,row:Math.floor(g),col:Math.floor(x),rowOffset:b,colOffset:I,blockWidth:f,srcLocation:d}}getTileExtent(e,t,i,s,r,n){const[a,o]=n,l=s.x+i*a*e.x,c=l+a*e.x,u=s.y-t*o*e.y,f=u-o*e.y;return new q.Z({xmin:l,xmax:c,ymin:f,ymax:u,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const s=this.rasterInfo.storageInfo.blockBoundary[e];return!s||s.maxRow<t||s.maxCol<i||s.minRow>t||s.minCol>i}async _fetchPixels(e,t,i,s={}){let r=(0,B.b)(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,i,s),{pyramidLevel:a,pyramidResolution:l,srcResolution:c,srcExtent:u,srcWidth:f,srcHeight:h}=n;if(0===f||0===h)return{extent:e,srcExtent:u,pixelBlock:null};const d=(0,o.u)(this.rasterInfo.transform),p="gcs-shift"===d?.type,m=(0,o.i)((0,B.g)(e.spatialReference));!p&&m||(r=(0,B.b)(n.srcExtent,p));const y=this.rasterInfo.storageInfo,g={x:Math.floor((u.xmin-y.origin.x)/l.x+.1),y:Math.floor((y.origin.y-u.ymax)/l.y+.1)},x=await this._fetchRawTiles(a,g,{width:f,height:h,wrapCount:r},s);if(!x)return{extent:e,srcExtent:u,pixelBlock:null};const b=a>0?y.pyramidBlockWidth:y.blockWidth,I=a>0?y.pyramidBlockHeight:y.blockHeight,w=b===f&&I===h&&g.x%b==0&&g.y%I==0,_=new D.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),S=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:v}=s;if(!S&&w&&1===x.pixelBlocks.length&&b===t&&I===i&&c.x===_.x&&c.y===_.y)return{extent:e,srcExtent:u,pixelBlock:x.pixelBlocks[0]};const R=m&&(0,o.i)((0,B.g)(u.spatialReference)),T=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");T&&!this.rasterJobHandler&&await(0,B.l)();const C=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:_.toJSON(),datumTransformation:v,rasterTransform:d,hasWrapAround:r>0||R,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:T},s):(0,B.d)({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:_,datumTransformation:v,rasterTransform:d,hasWrapAround:r>0||R,isAdaptive:!1,includeGCSGrid:T});let k;const P=!s.requestRawData,F={rows:C.spacing[0],cols:C.spacing[1]},M=(0,o.u)(this._getRasterTileAlignmentInfo(a,x.extent.xmin)),{pixelBlocks:O,mosaicSize:z,isPartiallyFilled:N}=x;let J=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:O,srcMosaicSize:z,destDimension:P?{width:t,height:i}:null,coefs:P?C.coefficients:null,sampleSpacing:P?F:null,projectDirections:T,gcsGrid:T?C.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:s.interpolation,alignmentInfo:M,blockWidths:null},s);({pixelBlock:k,localNorthDirections:J}=e)}else{const e=(0,W.m)(O,z,{alignmentInfo:M});k=P?(0,W.d)(e,{width:t,height:i},C.coefficients,F,s.interpolation):e,T&&C.gcsGrid&&(J=(0,W.g)({width:t,height:i},C.gcsGrid),k=(0,j.d)(k,this.rasterInfo.dataType,J))}return s.requestRawData||T?{srcExtent:u,pixelBlock:k,transformGrid:C,localNorthDirections:J,extent:e,isPartiallyFilled:N}:{srcExtent:u,extent:e,pixelBlock:k}}async _fetchRawTiles(e,t,i,s){const{origin:r,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:u}=t,{width:f,height:h,wrapCount:d}=i;const p=this._getRasterTileAlignmentInfo(e,0);s.buffer&&(c-=s.buffer.cols,u-=s.buffer.rows,f+=2*s.buffer.cols,h+=2*s.buffer.rows);let m=0,y=0,g=0;d&&(0,o.i)(p)&&(({worldColumnCountFromOrigin:y,originColumnOffset:g,rightPadding:m}=p),y*p.blockWidth-m>=c+f&&(m=0));const x=Math.floor(c/a),b=Math.floor(u/l),I=Math.floor((c+f+m-1)/a),w=Math.floor((u+h+m-1)/l),_=n[e];if(!_)return null;const{minRow:S,minCol:v,maxCol:R,maxRow:T}=_;if(0===d&&(w<S||I<v||b>T||x>R))return null;const C=new Array;let k=!1;const P=null==this.ioConfig.allowPartialFill?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let t=b;t<=w;t++)for(let i=x;i<=I;i++){let r=i;if(!s.disableWrapAround&&d&&(0,o.i)(p)&&y<=i&&(r=i-y-g),t>=S&&r>=v&&T>=t&&R>=r){const i=this._fetchRawTile(e,t,r,s);P?C.push(new Promise((e=>{i.then((t=>e(t))).catch((()=>{k=!0,e(null)}))}))):C.push(i)}else C.push(Promise.resolve(null))}if(0===C.length)return null;const F=await Promise.all(C),M={height:(w-b+1)*l,width:(I-x+1)*a},{spatialReference:O}=this.rasterInfo,B=this.getPyramidPixelSize(e),{x:D,y:z}=B;return{extent:new q.Z({xmin:r.x+x*a*D,xmax:r.x+(I+1)*a*D,ymin:r.y-(w+1)*l*z,ymax:r.y-b*l*z,spatialReference:O}),pixelBlocks:F,mosaicSize:M,isPartiallyFilled:k}}_fetchRawTile(e,t,i,s){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:u}=r;if(t<n||i<a||t>u||i>l)return Promise.resolve(null);const f=J(this.url,s.sliceId),h=`${e}/${t}/${i}`;let d=L(f,s.registryId,h);if((0,o.a)(d)){const r=new AbortController;d=this.fetchRawTile(e,t,i,{...s,signal:r.signal}),A(f,s.registryId,h,d,r),d.catch((()=>H(f,s.registryId,h)))}return s.signal&&(0,c.fu)(s,(()=>{E(f,s.registryId,h)})),d}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const s=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,n]=e,a=[],o=[];for(let e=0;e<s;e++){const[t,i]=(0,j.u)([r[e],n[e]]);a.push(t),o.push(i)}return[a,o]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=(0,B.e)(this.rasterInfo)),(0,o.a)(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,s={}){const r={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};s.srcResolution&&(r.srcResolution=s.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=r,c=a/t,u=o/i,f=l<n&&c*u>=16;if(f||l===n&&(c>8||u>8)||0===a||0===o){const a=new D.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=(0,B.f)(a,this.rasterInfo.spatialReference,e,r.datumTransformation);const h=!o||s.srcResolution&&o.x+o.y<s.srcResolution.x+s.srcResolution.y;if(f&&s.srcResolution&&h){const e=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;o={x:s.srcResolution.x*t,y:s.srcResolution.y*t}}}o&&(r.srcResolution=o,this._updateSourceDataInfo(e,r))}return(r.srcWidth/t>8||r.srcHeight/i>8)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:a,excessiveReading:l}=(0,B.s)(s,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||(0,B.c)(e,i,r);if(null==c)return;const u=(0,o.u)(this.rasterInfo.transform);u&&(c=u.inverseTransform(c)),t.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/a.x-.1),h=Math.ceil((c.ymax-c.ymin)/a.y-.1);t.pyramidLevel=n,t.pyramidResolution=a,t.srcWidth=f,t.srcHeight=h}_getRequestOptionsWithSliceId(e){return(0,o.i)(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:s,pyramidLevel:r,useTransposedTile:n}=t,a=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[s])return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if((0,o.a)(l)||!n){const t=e.pixels.map((e=>e[s])),n={location:i,value:t,pyramidLevel:r},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(n.magdirValue=a.map((e=>e[0]))),n}let c=e.pixels.map((e=>Array.prototype.slice.call(e,s*a,s*a+a))),u=this._computeMagDirValues(c);const{requestSomeSlices:f,identifyOptions:h}=t;let d=(0,O.c)(l,h.transposedVariableName);if(f){const e=(0,O.d)(d,(0,o.u)(h.multidimensionalDefinition),(0,o.u)(h.timeExtent));c=c.map((t=>e.map((e=>t[e])))),u=u?.map((t=>e.map((e=>t[e])))),d=e.map((e=>d[e]))}return{location:i,value:null,dataSeries:d.map(((e,t)=>{const i={value:c.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new v.Z({...e,isSlice:!0})))};return u?.length&&(i.magdirValue=[u[0][t],u[1][t]]),i})),pyramidLevel:r}}};(0,s._)([(0,f.Cb)()],ee.prototype,"_rasterTileAlighmentInfo",void 0),(0,s._)([(0,f.Cb)({readOnly:!0})],ee.prototype,"_isGlobalWrappableSource",null),(0,s._)([(0,f.Cb)(S.u)],ee.prototype,"url",null),(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],ee.prototype,"datasetName",void 0),(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),(0,s._)([(0,f.Cb)()],ee.prototype,"rasterInfo",void 0),(0,s._)([(0,f.Cb)()],ee.prototype,"ioConfig",void 0),(0,s._)([(0,f.Cb)()],ee.prototype,"sourceJSON",void 0),ee=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.BaseRaster")],ee);const te=ee;let ie=class extends te{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._primaryRasters=null}async open(e){await this.init();const{rasterFunction:t}=this,{rasters:i,rasterIds:s}=t.getPrimaryRasters(),r=i.map((t=>t.rasterInfo?void 0:t.open(e)));await Promise.all(r);const n=i.map((({rasterInfo:e})=>e)),o=t.bind({rasterInfos:n,rasterIds:s});if(!o.success)throw new a.Z("raster-function:open",`cannot bind the function: ${o.error??""}`);await this.syncJobHandler(),this.set("sourceJSON",i[0].sourceJSON),this.set("rasterInfo",t.rasterInfo)}async syncJobHandler(){const{rasterFunction:e}=this;if(this._primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler)return this.rasterJobHandler.updateRasterFunction(e)}async fetchPixels(e,t,i,s={}){const{rasters:r,rasterIds:n}=this._primaryRasters,a=r.map((r=>r.fetchPixels(e,t,i,s))),l=await Promise.all(a),c=l.map((e=>e.pixelBlock));if(c.every((e=>(0,o.a)(e))))return l[0];const u=l.find((e=>(0,o.i)(e.pixelBlock)))?.extent??e,f=this.rasterJobHandler?await this.rasterJobHandler.process({extent:u,primaryPixelBlocks:c,primaryRasterIds:n}):this.rasterFunction.process({extent:u,primaryPixelBlocks:c,primaryRasterIds:n});return{...l[0],pixelBlock:f}}};(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),(0,s._)([(0,f.Cb)()],ie.prototype,"tileType",void 0),(0,s._)([(0,f.Cb)()],ie.prototype,"rasterFunction",void 0),ie=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.FunctionRaster")],ie);const se=ie,re=I.L.getLogger("esri.layers.mixins.ImageryTileMixin"),ne=e=>{let t=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.sourceJSON=null,this.symbolizer=null}get fullExtent(){return this.rasterInfo?.extent}get rasterInfo(){return this.raster?.rasterInfo}get spatialReference(){return this.rasterInfo?.spatialReference??w.Z.WGS84}get tileInfo(){return this.rasterInfo?.storageInfo.tileInfo}set url(e){this._set("url",(0,_.s)(e,re))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async convertVectorFieldData(e,t){if((0,o.a)(e)||!this.rasterInfo)return null;const i=this._rasterJobHandler.instance,s=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:e,dataType:s},t):(0,j.c)(e,s)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):(0,$.c)(e.meshType,e.simulationSettings,e.flowData,(0,o.i)(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo??{};if((0,o.a)(t))return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;!(0,o.a)(i)&&i.length||(i=(0,O.a)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const s=e.timeExtent||this.timeExtent;if((0,o.i)(i)&&(0,o.i)(s)&&((0,o.i)(s.start)||(0,o.i)(s.end))){i=i.map((e=>e.clone()));const r=t.variables.find((({name:e})=>e===i[0].variableName))?.dimensions?.find((({name:e})=>"StdTime"===e)),n=i.find((({dimensionName:e})=>"StdTime"===e));if(!r||!n)return{...e,multidimensionalDefinition:null};const{start:a,end:l}=s,c=(0,o.a)(a)?null:a.getTime(),u=(0,o.a)(l)?null:l.getTime(),f=c??u,h=u??c;if((0,o.i)(r.values)){const e=r.values.filter((e=>{if(Array.isArray(e)){if(f===h)return e[0]<=f&&e[1]>=f;const t=e[0]<=f&&e[1]>f||e[0]<h&&e[1]>=h,i=e[0]>=f&&e[1]<=h||e[0]<f&&e[1]>h;return t||i}return f===h?e===f:e>=f&&e<=h}));if(e.length){const t=e.sort(((e,t)=>f===h?(e[0]??e)-(t[0]??t):Math.abs((e[1]??e)-h)-Math.abs((t[1]??t)-h)))[0];n.values=[t]}else i=null}else if(r.hasRegularIntervals&&r.extent){const[e,t]=r.extent;f>t||h<e?i=null:n.values=f===h?[f]:[Math.max(e,f),Math.min(t,h)]}}return(0,o.i)(i)&&(0,O.h)(i,this.multidimensionalSubset)?{...e,multidimensionalDefinition:null}:{...e,multidimensionalDefinition:i}}async updateRenderer(){const{loaded:e,symbolizer:t}=this;if(!e||!t)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const i=this._rasterJobHandler.instance;i&&(t.rendererJSON=(0,U.n)(this.renderer.toJSON()),t.bind(),await i.updateSymbolizer(t),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!((0,o.i)(i)&&i.pixels&&i.pixels.length>0))return null;let s;await this.updateRenderer();const r=this._rasterJobHandler.instance,n=this.bandIds??[];return s=r?await r.symbolize({...e,simpleStretchParams:t,bandIds:n}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:n}),s}getTileUrl(e,t,i){return"RasterTileServer"===this.raster?.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t,i=!1){if(!this.loaded||(0,o.a)(t))return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const s=(0,w.g)(e);return k.Z.create({size:256,spatialReference:e,origin:s?{x:s.origin[0],y:s.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,s,r={}){if(i(this),r.requestAsImageElement){const i=this.getTileUrl(e,t,s);return(0,b.default)(i,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:r.signal}).then((e=>e.data))}if((0,o.i)(this.rasterInfo.multidimensionalInfo)&&(r=this.normalizeRasterFetchOptions(r),(0,o.a)(r.multidimensionalDefinition))){const i=r.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,s,i),pixelBlock:null}}return await this._initJobHandler(),await this._updateRasterFunction(),"raster-shaded-relief"===this.renderer.type&&(r={...r,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,s,r)}async fetchPixels(e,t,i,s={}){return(0,o.i)(this.rasterInfo.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),(0,o.a)(s.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),await this._updateRasterFunction(),this.raster.fetchPixels(e,t,i,s))}async identify(e,t={}){return i(this),!(0,o.i)(this.rasterInfo.multidimensionalInfo)||this.rasterInfo.hasMultidimensionalTranspose&&((0,O.i)(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent)||(t=this.normalizeRasterFetchOptions(t),!(0,o.a)(t.multidimensionalDefinition))?this.raster.identify(e,t):{location:e,value:null}}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.rasterInfo?.multidimensionalInfo;if((0,o.a)(e)||"standard-time"!==this.rasterInfo?.dataType)return!1;const t=this.multidimensionalDefinition,i=t?.[0]?.variableName;return e.variables.some((e=>e.name===i&&(!t?.[0].dimensionName||e.dimensions.some((e=>"StdTime"===e.name)))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(e){const t=e??this.rasterInfo.multidimensionalInfo;return(0,O.g)(this.multidimensionalSubset,t)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=(0,O.a)(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new C.R;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{i(this),this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer(),"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler()})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(null==this.interpolation){i(this);const e=(0,U.b)(this.rasterInfo,this.raster.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e)}}_configDefaultRenderer(){i(this);const e=this.raster.rasterInfo;if(this.bandIds||(this.bandIds=(0,U.a)(e)),!this.renderer){const t=(0,U.c)(e,{bandIds:this.bandIds,variableName:(0,o.i)(this.multidimensionalDefinition)?this.multidimensionalDefinition[0]?.variableName:null});"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&((e.statistics?.[0].max??0)>1e24||(e.statistics?.[0].min??0)<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t}this.symbolizer?(this.symbolizer.rendererJSON=(0,U.n)(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new Z.R({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const t=this.symbolizer.bind();t.success||re.warn("imagery-tile-mixin",t.error||"The given renderer is not supported by the layer.")}async _updateRasterFunction(){if("imagery-tile"!==this.type||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;let e=this.raster;if("Function"===e?.datasetFormat){const t=e.rasterFunction.getPrimaryRasters();e=t.rasters[0]}const{rasterFunction:t}=this;if(t){const i=(0,G.c)(t.toJSON(),{raster:e}),s=new se({rasterFunction:i});s.rasterJobHandler=this._rasterJobHandler.instance,await s.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=s}else this.raster=e}};function i(e){if(!e.raster||!e.rasterInfo)throw new a.Z("imagery-tile","no raster")}return(0,s._)([(0,f.Cb)()],t.prototype,"_cachedRendererJson",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"_cachedRasterFunctionJson",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"_compatibleFullExtent",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"_rasterJobHandler",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"bandIds",void 0),(0,s._)([(0,f.Cb)({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),(0,s._)([(0,f.Cb)({json:{read:!1}})],t.prototype,"fullExtent",null),(0,s._)([(0,f.Cb)()],t.prototype,"interpolation",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"ioConfig",void 0),(0,s._)([(0,f.Cb)({type:[v.Z]})],t.prototype,"multidimensionalDefinition",void 0),(0,s._)([(0,f.Cb)({type:R.Z,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"raster",void 0),(0,s._)([(0,f.Cb)({type:T.Z})],t.prototype,"rasterFunction",void 0),(0,s._)([(0,f.Cb)()],t.prototype,"rasterInfo",null),(0,s._)([(0,f.Cb)()],t.prototype,"sourceJSON",void 0),(0,s._)([(0,f.Cb)({json:{read:!1}})],t.prototype,"spatialReference",null),(0,s._)([(0,f.Cb)({json:{read:!1}})],t.prototype,"tileInfo",null),(0,s._)([(0,f.Cb)(S.u)],t.prototype,"url",null),(0,s._)([(0,f.Cb)({types:n.dr})],t.prototype,"renderer",null),(0,s._)([(0,f.Cb)()],t.prototype,"symbolizer",void 0),t=(0,s._)([(0,m.j)("esri.layers.ImageryTileMixin")],t),t};var ae=i(89440),oe=i(39241),le=i(68219),ce=i(6416),ue=i(82377),fe=i(88056),he=i(22572),de=i(87258);function pe(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=[];if(t){const r=pe(e,i);for(let e=0;e<r.length;e++)pe(r[e],t).forEach((e=>s.push(e)));return s}const r=e.getElementsByTagNameNS("*",i);if(!r||0===r.length)return[];for(let e=0;e<r.length;e++)s.push(r[e]||r.item[e]);return s}function me(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=pe(e,i);return s.length>0?t?me(s[0],t):s[0]:null}function ye(e,t=null){const i=t?me(e,t):e;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function ge(e,t){return function(e,t){const i=pe(e,t),s=[];let r;for(let e=0;e<i.length;e++)r=i[e].textContent||i[e].nodeValue,r&&(r=r.trim(),""!==r&&s.push(r));return s}(e,t).map((e=>Number(e)))}function xe(e,t){const i=ye(e,t);return Number(i)}function be(e,t){const i=e?.nodeName?.toLowerCase(),s=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===s}var Ie=i(9411),we=i(93613),_e=i(78893);i(56420),i(74742),i(28239),i(59765),i(77361),i(61261),i(79764),i(95873),i(23771),i(89241);class Se{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const s=t.getUint32(4,!0),r=t.getUint16(8,!0),n=t.getUint16(10,!0),a={version:i,recordCount:s,headerByteCount:r,recordByteCount:n};let o=32;const l=[],c=[];let u;if(3===i){for(;13!==t.getUint8(o);)u=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:(0,Z.b)(new Uint8Array(e,o,11)),type:u,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(u)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<s&&e.byteLength-o>n;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push((0,Z.b)(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const s=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(s.substring(0,4),10),parseInt(s.substring(4,6),10)-1,parseInt(s.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=n}}const f=function(e){const t=e.fields,i=e.records,s=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",r=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),n=r.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[s]=o++,l=1;l<n.length;l++)t[n[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:r,features:a}}({fields:l,records:c});return{header:a,fields:l,records:c,recordSet:f}}}const ve=new Map;ve.set("int16","esriFieldTypeSmallInteger"),ve.set("int32","esriFieldTypeInteger"),ve.set("int64","esriFieldTypeInteger"),ve.set("float32","esriFieldTypeSingle"),ve.set("float64","esriFieldTypeDouble"),ve.set("text","esriFieldTypeString");let Re=class extends te{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new a.Z("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(t);if("thematic"===s.dataType){const e=await this._fetchAuxiliaryInformation();s.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,s={}){const{transposeInfo:r}=this.rasterInfo.storageInfo,{transposedVariableName:n}=s,a=!(!r||!n),o=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(o<0)return null;const l=this._buildCacheFilePath(o,t,i,s.multidimensionalDefinition,n),c=this._getIndexRecordFromBundle(t,i,a),u=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!u)return null;const f=new Uint8Array(u.data),h=this._getTileEndAndContentType(f,c);if(0===h.recordSize)return null;const d=await this.request(l,{range:{from:h.position,to:h.position+h.recordSize},responseType:"array-buffer",signal:s.signal});if(!d)return null;const[p,m]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:p,height:m,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:s,colormap:r,blockWidth:n,blockHeight:a,firstPyramidLevel:o,maximumPyramidLevel:l}=e,c=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),u=e.extent.spatialReference,f=e.geodataXform?.spatialReference,h=new w.Z(u?.wkid||u?.wkt?u:f);let d=new q.Z({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:h});const p=new D.Z({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:h}),m=Math.round((d.xmax-d.xmin)/p.x),y=Math.round((d.ymax-d.ymin)/p.y),g=this._parseTransform(e.geodataXform),x=g?d:null;g&&(d=g.forwardTransform(d),p.x=(d.xmax-d.xmin)/m,p.y=(d.ymax-d.ymin)/y);const b=e.properties??{},I=e.format.toLowerCase().replace("cache/",""),_=new D.Z(e.origin.x,e.origin.y,h);let S,v,R,T;if(r&&r.colors)for(S=[],v=0;v<r.colors.length;v++)R=r.colors[v],T=r.values?r.values[v]:v,S.push([T,255&R,R<<16>>>24,R<<8>>>24,R>>>24]);const C=e.LODInfos,P=[];for(v=0;v<C.levels.length;v++)P.push({level:C.levels[v],resolution:C.resolutions[v],scale:96/.0254*C.resolutions[v]});const F=new k.Z({dpi:96,lods:P,format:I,origin:_,size:[n,a],spatialReference:h}),O={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},B=[{maxCol:Math.ceil(m/n)-1,maxRow:Math.ceil(y/a)-1,minCol:0,minRow:0}];let z=2;if(l>0)for(v=0;v<l;v++)B.push({maxCol:Math.ceil(m/z/n)-1,maxRow:Math.ceil(y/z/a)-1,minCol:0,minRow:0}),z*=2;const N=e.mdInfo;let J=null;if(N&&b._yxs){const e=b._yxs;J={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]}}return{storageInfo:O,rasterInfo:new M.Z({width:m,height:y,pixelType:t,bandCount:i,extent:d,nativeExtent:x,transform:g,spatialReference:h,pixelSize:p,keyProperties:b,statistics:c,histograms:s,multidimensionalInfo:N,colormap:S,storageInfo:new M.R({blockWidth:n,blockHeight:a,pyramidBlockWidth:n,pyramidBlockHeight:a,origin:_,tileInfo:F,transposeInfo:J,firstPyramidLevel:o,maximumPyramidLevel:l,blockBoundary:B})})}}_parseTransform(e){if(!(0,he.i)(e))throw new a.Z("cloudraster:open","the data contains unsupported geodata transform types");const t=(0,he.r)(e);if("identity"===t.type)return null;if("polynomial"!==t.type||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new a.Z("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),s=await Promise.all([t,i]);let r;if(s[0]){let e=s[0].fields;const t=s[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":ve.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(r={fields:e,features:i})}}return!r&&s[1]&&(r=Se.parse(s[1]).recordSet),de.default.fromJSON(r)}_buildCacheFilePath(e,t,i,s,r){const n=this._getPackageSize(!!r),a=Math.floor(t/n)*n,l=Math.floor(i/n)*n,c="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let u="L";u+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:f}=this.rasterInfo,h=s?.[0];if((0,o.a)(f)||!h)return`${this.url}/_alllayers/${u}/${c}.bundle`;let d="_yxs";if(!r){d=f.variables.find((e=>e.name===h.variableName)).dimensions[0].values.indexOf(h.values[0]).toString(16);const e=4-d.length;for(let t=0;t<e;t++)d="0"+d;d="S"+d}const p=this._getVariableFolderName(r||h.variableName);return`${this.url}/_alllayers/${p}/${d}/${u}/${c}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&(0,o.i)(t)?t.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:i}=t;return e&&(0,o.i)(i)?i.tileSize:t.tileInfo.size}_getVariableFolderName(e){return""===(e=e.trim())?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,i=!1){const s=this._getPackageSize(i),r=s*(e%s)+t%s;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let s,r=0;for(s=0;s<5;s++)r|=(255&i[s])<<8*s;const n=0xffffffffff&r;for(r=0,s=5;s<8;s++)r|=(255&i[s])<<8*(s-5);return{position:n,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};(0,s._)([(0,f.Cb)({readOnly:!0})],Re.prototype,"storageInfo",void 0),(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],Re.prototype,"datasetFormat",void 0),Re=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.CloudRaster")],Re);const Te=Re;let Ce=class extends te{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(e){await this.init();const t=this.data,{pixelBlock:i,statistics:s,histograms:r,name:n,keyProperties:a,nativeExtent:o,transform:l}=this.data,{width:c,height:u,pixelType:f}=i,h=t.extent??new q.Z({xmin:-.5,ymin:.5,xmax:c-.5,ymax:u-.5,spatialReference:new w.Z({wkid:3857})}),d=t.isPseudoSpatialReference??!t.extent,p={x:h.width/c,y:h.height/u},m=new M.Z({width:c,height:u,pixelType:f,extent:h,nativeExtent:o,transform:l,pixelSize:p,spatialReference:h.spatialReference,bandCount:3,keyProperties:a||{},statistics:s,isPseudoSpatialReference:d,histograms:r});this.createRemoteDatasetStorageInfo(m,512,512),this._set("rasterInfo",m),this.updateTileInfo(),await this._buildInMemoryRaster(i,{width:512,height:512},e),this.datasetName=n,this.url="/InMemory/"+n}fetchRawTile(e,t,i,s={}){const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,t,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s},i):Promise.resolve((0,W.s)(e,t,s)),n=(0,o.i)(this.rasterInfo.statistics),l=(0,o.i)(this.rasterInfo.histograms),u=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve((0,K.e)(e)),f=await(0,c.as)([r,u]);if(!f[0].value&&f[1].value)throw new a.Z("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=f[0].value,n||(this.rasterInfo.statistics=f[1].value?.statistics),l||(this.rasterInfo.histograms=f[1].value?.histograms)}};(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],Ce.prototype,"datasetFormat",void 0),(0,s._)([(0,f.Cb)()],Ce.prototype,"data",void 0),Ce=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.InMemoryRaster")],Ce);const ke=Ce;function Pe(e,t){if(!e||!t)return null;const i=[];for(let s=0;s<e.length;s++)i.push(e[s]),i.push(t[s]);return i}function Fe(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new w.Z({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),s=e.indexOf("PROJCS"),r=s>-1?s:e.indexOf("GEOGCS");if(-1===r)return null;const n=e.slice(r,e.lastIndexOf("]",i)+1).trim(),a=e.slice(i,e.lastIndexOf("]")).trim();t=Me(n);const o=new w.Z(t?{wkid:t}:{wkt:n}),l=Me(a);return l&&(o.vcsWkid=l),o}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=Me(e),new w.Z(0!==t?{wkid:t}:{wkt:e})):null}function Me(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),s=i[0]?.toLowerCase();if(("epsg"===s||"esri"===s)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function Oe(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(be(e,"SRS")){if(!t.spatialReference){const i=ye(e);t.spatialReference=Fe(i)}}else if(be(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:s}=function(e){const t=me(e,"GeodataXform"),i=Fe(xe(t,"SpatialReference/WKID")||ye(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const s=xe(t,"PolynomialOrder")??1,r=ge(t,"CoeffX/Double"),n=ge(t,"CoeffY/Double"),a=ge(t,"InverseCoeffX/Double"),o=ge(t,"InverseCoeffY/Double"),l=Pe(r,n),c=Pe(a,o);return{spatialReference:i,transform:l&&c&&l.length&&c.length?new he.P({spatialReference:i,polynomialOrder:s,forwardCoefficients:l,inverseCoefficients:c}):null}}(e);t.transform=s,t.spatialReference||(t.spatialReference=i)}else pe(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=ye(e)));else if(be(e,"PAMRasterBand")){const i=function(e){const t=xe(e,"NoDataValue"),i=me(e,"Histograms/HistItem"),s=xe(i,"HistMin"),r=xe(i,"HistMax"),n=xe(i,"BucketCount"),a=ye(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,u;pe(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":u=t}}));const f=xe(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=s&&null!=r?{min:s,max:r,size:n||a.length,counts:a}:null,sourceBandIndex:f,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:u}:null}}(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i.length){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)).filter(o.i):null;const s=!!i[0].histogram;t.histograms=s?i.map((e=>e.histogram)).filter(o.i):null}return t}let Be=class extends te{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:s,histograms:r,transform:n}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new w.Z({wkid:3857})),r?.length&&null==s&&(s=(0,K.d)(r));const{width:o,height:l}=t;let c=new q.Z({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:i});const u=n?n.forwardTransform(c):c;let f=!0;if(n){const e=n.forwardCoefficients;f=e&&0===e[1]&&0===e[2],f&&(n=null,c=u)}const h=new ke({data:{extent:u,nativeExtent:c,transform:n,pixelBlock:t,statistics:s,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await h.open(),h.data=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}fetchRawTile(e,t,i,s={}){return this._inMemoryRaster.fetchRawTile(e,t,i,s)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=(0,Z.g)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new a.Z("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const s=i.toLowerCase(),r="gif"===s||"bmp"===s||!(0,V.h)("ios");return await this.decodePixelBlock(t,{format:s,useCanvas:r,hasNoZlibMask:!0})}async _fetchAuxiliaryData(e){const t=(0,o.u)(e?.signal),i=this.ioConfig.skipExtensions??[],s=i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,n="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,a=n&&i.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:t}),l=await(0,c.as)([s,a]);if(t?.aborted)throw(0,c.zE)();const u=Oe(l[0].value?.data);if(!u.transform){const e=l[1].value?l[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;u.transform=6===e?.length?new he.P({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return u}};(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],Be.prototype,"datasetFormat",void 0),Be=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.ImageAuxRaster")],Be);const De=Be;let ze=class extends te{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new a.Z("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new a.Z("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo(),this.tileType=s.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===s.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name?.slice(s.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:t});if((0,o.a)(r))throw new a.Z("image-server-raster:open","cannot initialize image service");const n="Map"===this.tileType?(0,Ie.r)(s.tileInfo,s):k.Z.fromJSON(s.tileInfo);(0,o.l)(n);const[l,c]=this._computeMinMaxLOD(r,n),{extent:u,pixelSize:f}=r,h=.5/r.width*f.x,d=Math.max(f.x,f.y),{lods:p}=n;("Map"!==this.tileType&&0!==s.maxScale||Math.abs(f.x-f.y)>h||!p.some((e=>Math.abs(e.resolution-d)<h)))&&(f.x=f.y=l.resolution,r.width=Math.ceil((u.xmax-u.xmin)/f.x-.1),r.height=Math.ceil((u.ymax-u.ymin)/f.y-.1));const m=l.level-c.level,[y,g]=n.size,x=[];p.forEach((e=>{e.level>=c.level&&e.level<=l.level&&x.push({x:e.resolution,y:e.resolution})})),x.sort(((e,t)=>e.x-t.x));const b=this.computeBlockBoundary(u,y,g,n.origin,x,m),I=x.length>1?x.slice(1):null;let w;if(s.transposeInfo&&(w={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0}),r.storageInfo=new M.R({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:I,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:m,tileInfo:n,transposeInfo:w,blockBoundary:b}),this._fixGCSShift(r),this._set("rasterInfo",r),s.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:r.storageInfo.tileInfo,parsedUrl:(0,X.mN)(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Ie.T({layer:e})}}async fetchRawTile(e,t,i,s={}){const{storageInfo:r,extent:n}=this.rasterInfo,{transposeInfo:a}=r,l=(0,o.i)(a)&&!!s.transposedVariableName;if(this._slices&&!l&&null==s.sliceId)return null;const c=l?0:r.maximumPyramidLevel-e+this._levelOffset,u=`${this.url}/tile/${c}/${t}/${i}`,f=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:h}=await this.request(u,{query:f,responseType:"array-buffer",signal:s.signal});if(!h)return null;const d=l?a.tileSize:r.tileInfo.size,p=await this.decodePixelBlock(h,{width:d[0],height:d[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:l}),m=r.blockBoundary[e];if("jpg"!==r.compression||i>m.minCol&&i<m.maxCol&&t>m.minRow&&t<m.maxRow)return p;const{origin:y,blockWidth:g,blockHeight:x}=r,{x:b,y:I}=this.getPyramidPixelSize(e),w=Math.round((n.xmin-y.x)/b)%g,_=Math.round((n.xmax-y.x)/b)%g||g,S=Math.round((y.y-n.ymax)/I)%x,v=Math.round((y.y-n.ymin)/I)%x||x,R=i===m.minCol?w:0,T=t===m.minRow?S:0,C=i===m.maxCol?_:g,k=t===m.maxRow?v:x;return(0,W.b)(p,{x:R,y:T},{width:C-R,height:k-T}),p}getSliceIndex(e){if(!this._slices||(0,o.a)(e)||0===e.length)return null;const t=e;for(let e=0;e<this._slices.length;e++){const i=this._slices[e].multidimensionalDefinition;if(i.length===t.length&&!i.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return e}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,(0,o.u)(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let n=r-s+this._levelOffset;const a=i.srcLocation;for(;n>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(n,i.row,i.col,t))break}catch{}if(n--,s++,i=this.identifyPixelLocation(a,s,(0,o.u)(t.datumTransformation)),null===i)return null}return-1===n||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),s=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=w.Z.fromJSON(t.spatialReference||e.spatialReference),n=new D.Z({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new M.Z({width:i,height:s,bandCount:3,extent:q.Z.fromJSON(e),spatialReference:r,pixelSize:n,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=(0,we.f)(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,n=await Promise.all([s,r]);return this._slices=n[1],n[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new he.G,e.extent=e.transform.forwardTransform(t))}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,s=.5/e.width*i.x,{lods:r}=t,n=t.lodAt(Math.max.apply(null,r.map((e=>e.level)))),a=t.lodAt(Math.min.apply(null,r.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=r[0].level,[n,a];if("Raster"===o)return[r.find((e=>e.resolution===i.x))??n,a];const{minScale:l,maxScale:c}=this.sourceJSON;let u=n;c>0&&(u=r.find((e=>Math.abs(e.scale-c)<s)),u||(u=r.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??n));let f=a;return l>0&&(f=r.find((e=>Math.abs(e.scale-l)<s))??a,this._levelOffset=f.level-a.level),[u,f]}};(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],ze.prototype,"datasetFormat",void 0),(0,s._)([(0,f.Cb)()],ze.prototype,"tileType",void 0),ze=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.ImageServerRaster")],ze);const Ne=ze,Je=new Map;Je.set("Int8","s8"),Je.set("UInt8","u8"),Je.set("Int16","s16"),Je.set("UInt16","u16"),Je.set("Int32","s32"),Je.set("UInt32","u32"),Je.set("Float32","f32"),Je.set("Float64","f32"),Je.set("Double64","f32");const Ee=new Map;Ee.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Ee.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Ee.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Ee.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Le=class extends te{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?(0,o.u)(e.signal):null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:s,files:r}=this._parseHeader(i.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const t=await this._fetchAuxiliaryData(e);null!=t&&(s.statistics=t.statistics??s.statistics,s.histograms=t.histograms,t.histograms&&(0,o.a)(s.statistics)&&(s.statistics=(0,K.d)(t.histograms)))}this._set("rasterInfo",s),this._files=r;const n=await this.request(r.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(n.data);const{blockWidth:a,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:u,height:f}=this.rasterInfo,h=[],d=this._getBandSegmentCount();let p=0,m=-1;for(;p<this._storageIndex.length;){m++;const e=Math.ceil(u/a/c**m)-1,t=Math.ceil(f/l/c**m)-1;p+=(e+1)*(t+1)*d*4,h.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){const{blockWidth:r,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:c,pixelType:u}=this.rasterInfo,{ranges:f,actualTileWidth:h,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!f||0===f.length)return null;if(0===f[0].from&&0===f[0].to){const e=new Uint8Array(r*n);return new Y.Z({width:r,height:n,pixels:null,mask:e,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m=this._getBandSegmentCount(),y=[];let g=0;for(g=0;g<m;g++)(!p||p.indexOf[g]>-1)&&y.push(this.request(this._files.data,{range:{from:f[g].from,to:f[g].to},responseType:"array-buffer",signal:s.signal}));const x=await Promise.all(y),b=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),I=new Uint8Array(b);let w=0;for(g=0;g<m;g++)I.set(new Uint8Array(x[g].data),w),w+=x[g].data.byteLength;const _=Ee.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(I.buffer,{width:r,height:n,format:_,planes:p?.length||c,pixelType:u});if((0,o.i)(this.rasterInfo.noDataValue)&&"lerc"!==_&&!S.mask){const e=this.rasterInfo.noDataValue[0];if(null!=e){const t=S.width*S.height,i=new Uint8Array(t);if(Math.abs(e)>1e24)for(g=0;g<t;g++)Math.abs((S.pixels[0][g]-e)/e)>1e-6&&(i[g]=1);else for(g=0;g<t;g++)S.pixels[0][g]!==e&&(i[g]=1);S.mask=i}}let v=0,R=0;if(h!==r||d!==n){let e=S.mask;if(e)for(g=0;g<n;g++)if(R=g*r,g<d)for(v=h;v<r;v++)e[R+v]=0;else for(v=0;v<r;v++)e[R+v]=0;else for(e=new Uint8Array(r*n),S.mask=e,g=0;g<d;g++)for(R=g*r,v=0;v<h;v++)e[R+v]=1}return S}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,s,r,n,a;if(Z.i){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),s=new Uint8Array(r),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)s[4*n+a]=i[4*n+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Ee.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:s,blockHeight:r,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,f,h=0,d=0;for(f=0;f<e;f++)d=n**f,c=Math.ceil(a/s/d),u=Math.ceil(o/r/d),h+=c*u;d=n**e,c=Math.ceil(a/s/d),u=Math.ceil(o/r/d),h+=t*c+i,h*=4*l;const p=this._storageIndex.subarray(h,h+4*l);let m=0,y=0;const g=[];for(let e=0;e<l;e++)m=p[4*e+0]*2**32+p[4*e+1],y=m+p[4*e+2]*2**32+p[4*e+3],g.push({from:m,to:y});return{ranges:g,actualTileWidth:i<c-1?s:Math.ceil(a/d)-s*(c-1),actualTileHeight:t<u-1?r:Math.ceil(o/d)-r*(u-1)}}_parseHeader(e){const t=me(e,"MRF_META/Raster");if(!t)throw new a.Z("mrf:open","not a valid MRF format");const i=me(t,"Size"),s=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),n=parseInt(i.getAttribute("c"),10),o=(ye(t,"Compression")||"none").toLowerCase();if(!Ee.has(o))throw new a.Z("mrf:open","currently does not support compression "+o);const l=ye(t,"DataType")||"UInt8",c=Je.get(l);if(null==c)throw new a.Z("mrf:open","currently does not support pixel type "+l);const u=me(t,"PageSize"),f=parseInt(u.getAttribute("x"),10),h=parseInt(u.getAttribute("y"),10),d=me(t,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((e=>parseFloat(e))))),me(e,"MRF_META/CachedSource"))throw new a.Z("mrf:open","currently does not support MRF referencing other data files");const y=me(e,"MRF_META/GeoTags"),g=me(y,"BoundingBox");let x,b=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),i=parseFloat(g.getAttribute("maxx")),s=parseFloat(g.getAttribute("maxy")),r=ye(y,"Projection")||"";let n=w.Z.WGS84;if("LOCAL_CS[]"!==r)if(r.toLowerCase().startsWith("epsg:")){const e=Number(r.slice(5));isNaN(e)||0===e||(n=new w.Z({wkid:e}))}else n=Fe(r)??w.Z.WGS84;else b=!0,n=new w.Z({wkid:3857});x=new q.Z(e,t,i,s),x.spatialReference=n}else b=!0,x=new q.Z({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:new w.Z({wkid:3857})});const I=me(e,"MRF_META/Rsets"),_=parseInt(I&&I.getAttribute("scale")||"2",10),S=x.spatialReference,v=new M.R({origin:new D.Z({x:x.xmin,y:x.ymax,spatialReference:S}),blockWidth:f,blockHeight:h,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:o,pyramidScalingFactor:_}),R=new D.Z({x:x.width/s,y:x.height/r,spatialReference:S}),T=new M.Z({width:s,height:r,extent:x,isPseudoSpatialReference:b,spatialReference:S,bandCount:n,pixelType:c,pixelSize:R,noDataValue:p,storageInfo:v}),C=ye(e,"datafile"),k=ye(e,"IndexFile");return{rasterInfo:T,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:C||this.url.replace(".mrf",Ee.get(o).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Oe(t)}catch{return null}}};(0,s._)([(0,f.Cb)()],Le.prototype,"_files",void 0),(0,s._)([(0,f.Cb)()],Le.prototype,"_storageIndex",void 0),(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],Le.prototype,"datasetFormat",void 0),Le=(0,s._)([(0,m.j)("esri.layers.support.rasterIO.MRFRaster")],Le);const Ae=Le,He=(e,t)=>e.get(t)?.values,Ze=(e,t)=>e.get(t)?.values?.[0];let We=class extends te{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?(0,o.u)(e.signal):null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new a.Z("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:s,firstIFDPos:r,isBigTiff:n}=(0,Z.p)(i),l=[];await this._readIFDs(l,i,s,r,0,n?8:4,t);const{imageInfo:c,rasterInfo:u}=this._parseIFDs(l);if(this._headerInfo={littleEndian:s,isBigTiff:n,ifds:l,...c},this._set("rasterInfo",u),!c.isSupported)throw new a.Z("tiffraster:open","this tiff is not supported: "+c.message);if(!c.tileWidth)throw new a.Z("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:f=[]}=this.ioConfig;if(!f.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,u)}f.includes("vat.dbf")||1!==u.bandCount||"u8"!==u.pixelType||(u.attributeTable=await this._fetchAuxiliaryTable(e),(0,o.i)(u.attributeTable)&&(u.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const r=this._getTileLocation(e,t,i);if(!r)return null;const{ranges:n,actualTileWidth:a,actualTileHeight:o,ifd:l}=r,c=n.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),u=await Promise.all(c),f=u.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),h=1===u.length?u[0].data:new ArrayBuffer(f),d=[0],p=[0];if(u.length>1){const e=new Uint8Array(h);for(let t=0,i=0;t<u.length;t++){const s=u[t].data;e.set(new Uint8Array(s),i),d[t]=i,i+=s.byteLength,p[t]=s.byteLength}}const{blockWidth:m,blockHeight:y}=this.getBlockWidthHeight(e),g=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:d,sizes:p},width:m,height:y,planes:null,pixelType:null});let x,b,I;if(a!==m||o!==y){let e=g.mask;if(e)for(x=0;x<y;x++)if(I=x*m,x<o)for(b=a;b<m;b++)e[I+b]=0;else for(b=0;b<m;b++)e[I+b]=0;else for(e=new Uint8Array(m*y),g.mask=e,x=0;x<o;x++)for(I=x*m,b=0;b<a;b++)e[I+b]=1}return g}_parseIFDs(e){const t=(0,Z.a)(e),{width:i,height:s,tileWidth:r,tileHeight:n,planes:a,pixelType:o,compression:l,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:f,pyramidBlockHeight:h,tileBoundary:d,affine:p,metadata:m}=t;let y=Fe(t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid),g=!1;null==y&&(g=!0,y=new w.Z({wkid:3857}));const x=new q.Z({...t.extent,spatialReference:y}),b=new D.Z(x?{x:x.xmin,y:x.ymax,spatialReference:y}:{x:0,y:0}),I=new M.R({blockWidth:r,blockHeight:n,pyramidBlockWidth:f,pyramidBlockHeight:h,compression:l,origin:b,firstPyramidLevel:c,maximumPyramidLevel:u,blockBoundary:d}),_=new D.Z({x:(x.xmax-x.xmin)/i,y:(x.ymax-x.ymin)/s,spatialReference:y}),S=m?{BandProperties:m.bandProperties,DataType:m.dataType}:{};let v=null;const R=Ze(e[0],"PHOTOMETRICINTERPRETATION"),T=He(e[0],"COLORMAP");if(3===R&&T?.length>3&&T.length%3==0){v=[];const e=T.length/3;for(let t=0;t<e;t++)v.push([t,T[t]>>>8,T[t+e]>>>8,T[t+2*e]>>>8])}const C=new M.Z({width:i,height:s,bandCount:a,pixelType:o,pixelSize:_,storageInfo:I,spatialReference:y,isPseudoSpatialReference:g,keyProperties:S,extent:x,colormap:v,statistics:m?m.statistics:null});return p?.length&&(C.nativeExtent=new q.Z({xmin:-.5,ymin:.5-s,xmax:i-.5,ymax:.5,spatialReference:y}),C.transform=new he.P({polynomialOrder:1,forwardCoefficients:[p[2]+p[0]/2,p[5]-p[3]/2,p[0],p[3],-p[1],-p[4]]}),C.extent=C.transform.forwardTransform(C.nativeExtent),C.pixelSize=new D.Z({x:(x.xmax-x.xmin)/i,y:(x.ymax-x.ymin)/s,spatialReference:y}),I.origin.x=-.5,I.origin.y=.5),{imageInfo:t,rasterInfo:C}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&(0,o.a)(t.statistics)&&(t.statistics=(0,K.d)(e.histograms)),e.transform&&(0,o.a)(t.transform)){t.transform=e.transform,t.nativeExtent=t.extent;const i=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new D.Z({x:(i.xmax-i.xmin)/t.width,y:(i.ymax-i.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=i}t.spatialReference||(t.spatialReference=e.spatialReference)}async _readIFDs(e,t,i,s,r,n=4,a){if(!s)return null;(s>=t.byteLength||s<0)&&(t=(await this.request(this.url,{range:{from:s+r,to:s+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=s+r,s=0);const o=await this._readIFD(t,i,s,r,Z.T.TIFF_TAGS,n,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-r,r,n,a)}async _readIFD(e,t,i,s,r=Z.T.TIFF_TAGS,n=4,a){if(!e)return null;const l=(0,Z.c)(e,t,i,s,r,n);if(l.success){const i=[];if(l.ifd?.forEach((e=>{e.values||i.push(e)})),i.length>0){const r=i.map((e=>e.offlineOffsetSize)).filter(o.i),n=Math.min.apply(null,r.map((e=>e[0])));if(Math.min.apply(null,r.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:r}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:a});e=r,s=n,i.forEach((i=>(0,Z.e)(e,t,i,s)))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const i=l.ifd.get("GEOKEYDIRECTORY"),r=i?.values;if(r&&r.length>4){const n=r[0]+"."+r[1]+"."+r[2],o=await this._readIFD(e,t,i.valueOffset+6-s,s,Z.T.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[n]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<l.requiredBufferSize?null:this._readIFD(e,t,0,s,Z.T.TIFF_TAGS,4,a)}}_getTileLocation(e,t,i){const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,n=0===e?0:e-(s-1),a=this._headerInfo?.ifds[n];if(!a)return null;const o=(0,Z.f)(a,this._headerInfo),l=He(a,"TILEOFFSETS");if(void 0===l)return null;const c=He(a,"TILEBYTECOUNTS"),{minRow:u,minCol:f,maxRow:h,maxCol:d}=r[n];if(t>h||i>d||t<u||i<f)return null;const p=Ze(a,"IMAGEWIDTH"),m=Ze(a,"IMAGELENGTH"),y=Ze(a,"TILEWIDTH"),g=Ze(a,"TILELENGTH"),x=o?this.rasterInfo.bandCount:1,b=x*t*(d+1)+i,I=[{from:l[b],to:l[b+x-1]+c[b+x-1]-1}];if(o){let e=!0;for(let t=0;t<x;t++)if(l[b+t]+c[b+t]!==l[b+t+1]){e=!1;break}if(!e)for(let e=0;e<x;e++)I[e]={from:l[b+e],to:l[b+e]+c[b+e]-1}}const w=l[b],_=c[b];return null==w||null==_?null:{ranges:I,ifd:a,actualTileWidth:i===d&&p%y||y,actualTileHeight:t===h&&m%g||g}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Oe(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),i=Se.parse(t);return i?.recordSet?de.default.fromJSON(i.recordSet):null}catch{return null}}};(0,s._)([(0,f.Cb)()],We.prototype,"_files",void 0),(0,s._)([(0,f.Cb)()],We.prototype,"_headerInfo",void 0),(0,s._)([(0,f.Cb)()],We.prototype,"_bufferSize",void 0),(0,s._)([(0,f.Cb)({type:String,json:{write:!0}})],We.prototype,"datasetFormat",void 0),We=(0,s._)([(0,m.j)("esri.layers.support.rasterDatasets.TIFFRaster")],We);const je=We,qe=new Map;qe.set("CRF",{desc:"Cloud Raster Format",constructor:Te}),qe.set("MRF",{desc:"Meta Raster Format",constructor:Ae}),qe.set("TIFF",{desc:"GeoTIFF",constructor:je}),qe.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Ne}),qe.set("JPG",{desc:"JPG Raster Format",constructor:De}),qe.set("PNG",{desc:"PNG Raster Format",constructor:De}),qe.set("GIF",{desc:"GIF Raster Format",constructor:De}),qe.set("BMP",{desc:"BMP Raster Format",constructor:De});class Ge{static get supportedFormats(){const e=new Set;return qe.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:s}=e;let r=e.datasetFormat;null==r&&t.lastIndexOf(".")&&(r=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===r||"TIF"===r?r="TIFF":"JPG"!==r&&"JPEG"!==r&&"JFIF"!==r||(r="JPG"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const n={url:t,sourceJSON:s,datasetFormat:r,ioConfig:i??{bandIds:null,sampling:null}};let o,l;if(r&&this.supportedFormats.has(r)){if("CRF"===r&&!i?.enableCRF)throw new a.Z("rasterfactory:open",`cannot open raster: ${t}`);return o=qe.get(r).constructor,l=new o(n),await l.open({signal:e.signal}),l}if(r)throw new a.Z("rasterfactory:open","not a supported format "+r);const c=Array.from(qe.keys());let u=0;const f=()=>(r=c[u++],r&&("CRF"!==r||i?.enableCRF)?(o=qe.get(r).constructor,l=new o(n),l.open({signal:e.signal}).then((()=>l)).catch((()=>f()))):null);return f()}static register(e,t,i){qe.has(e.toUpperCase())||qe.set(e.toUpperCase(),{desc:t,constructor:i})}}let Ue=class extends((0,g.h)((0,ce.M)((0,ae.O)((0,oe.I)((0,x.N)(ne((0,ue.n)((0,le.Q)((0,l.M)(y.Z)))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=(0,o.i)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(c.r9).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[new Q.Z({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:t}=this,{attributeTable:i}=t,s=(0,o.i)(i)?i.fields:null;if(s){const t=s.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e=e.concat(t)}const{dataType:r,multidimensionalInfo:n}=t;if(("vector-magdir"===r||"vector-uv"===r)&&(0,o.i)(n)){const t=n.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new Q.Z({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new Q.Z({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return e}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const s=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,r=(0,n.ij)(s,i)||void 0;if(null!=r)return r}createPopupTemplate(e){return(0,_e.eZ)({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new a.Z("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){if(this.raster)this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url;else{const t=await Ge.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(this.rasterFunction){const e=(0,G.c)(this.rasterFunction.toJSON(),{raster:t}),i=new se({rasterFunction:e});await i.open(),this.raster=i}else this.raster=t}const{rasterInfo:t}=this.raster;if(!t)throw new a.Z("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles((0,u.YP)((()=>this.customParameters),(e=>{this.raster.ioConfig.customFetchParameters=e})))}};(0,s._)([(0,f.Cb)({type:[h.I],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],Ue.prototype,"bandIds",void 0),(0,s._)([(0,f.Cb)({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),(0,d.e)(fe.i)],Ue.prototype,"interpolation",void 0),(0,s._)([(0,f.Cb)({json:{write:!0}})],Ue.prototype,"multidimensionalDefinition",void 0),(0,s._)([(0,f.Cb)(S.a)],Ue.prototype,"legendEnabled",void 0),(0,s._)([(0,f.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Ue.prototype,"isReference",void 0),(0,s._)([(0,f.Cb)({type:["show","hide"]})],Ue.prototype,"listMode",void 0),(0,s._)([(0,f.Cb)({json:{read:!0,write:!0}})],Ue.prototype,"blendMode",void 0),(0,s._)([(0,f.Cb)()],Ue.prototype,"sourceJSON",void 0),(0,s._)([(0,f.Cb)({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],Ue.prototype,"version",void 0),(0,s._)([(0,f.Cb)()],Ue.prototype,"title",void 0),(0,s._)([(0,f.Cb)({readOnly:!0,json:{read:!1}})],Ue.prototype,"type",void 0),(0,s._)([(0,f.Cb)({type:["ArcGISTiledImageServiceLayer"]})],Ue.prototype,"operationalLayerType",void 0),(0,s._)([(0,f.Cb)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],Ue.prototype,"popupEnabled",void 0),(0,s._)([(0,f.Cb)({type:r.Z,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Ue.prototype,"popupTemplate",void 0),(0,s._)([(0,f.Cb)({readOnly:!0})],Ue.prototype,"defaultPopupTemplate",null),(0,s._)([(0,f.Cb)({readOnly:!0,type:[Q.Z]})],Ue.prototype,"fields",void 0),(0,s._)([(0,f.Cb)({readOnly:!0,type:[Q.Z]})],Ue.prototype,"rasterFields",null),(0,s._)([(0,f.Cb)({types:n.dr,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:n.FK,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],Ue.prototype,"renderer",null),(0,s._)([(0,p.r)("renderer")],Ue.prototype,"readRenderer",null),Ue=(0,s._)([(0,m.j)("esri.layers.ImageryTileLayer")],Ue);const $e=Ue}}]);