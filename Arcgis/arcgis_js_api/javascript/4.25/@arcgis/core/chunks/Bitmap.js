/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{i as t,a as e,g as i}from"./maybe.js";import{createResolver as s,onAbortOrThrow as r,throwIfNotAbortError as h}from"../core/promiseUtils.js";import{d as o,e as a,r as n,g as u,m as l}from"./mat3.js";import{c as d}from"./mat3f32.js";import{f as c}from"./vec2f32.js";import{D as p}from"./DisplayObject.js";import{C as _}from"./context-util.js";import{T as x,P as g,S as m,a as f,b as B}from"./enums3.js";import{T as w}from"./Texture.js";class R{constructor(t,e,i){this.pixelBlock=t,this.extent=e,this.originalPixelBlock=i}get width(){return t(this.pixelBlock)?this.pixelBlock.width:0}get height(){return t(this.pixelBlock)?this.pixelBlock.height:0}render(t){const i=this.pixelBlock;if(e(i))return;const s=this.filter({pixelBlock:i});if(e(s.pixelBlock))return;const r=s.pixelBlock.getAsRGBA(),h=t.createImageData(s.pixelBlock.width,s.pixelBlock.height);h.data.set(r),t.putImageData(h,0,0)}getRenderedRasterPixels(){const t=this.filter({pixelBlock:this.pixelBlock});return e(t.pixelBlock)?null:{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)}}}function T(t){return t&&"render"in t}function b(t){const e=document.createElement("canvas");return e.width=t.width,e.height=t.height,t.render(e.getContext("2d")),e}class v extends p{constructor(t=null,e){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._width=void 0,this.x=0,this.y=0,this.immutable=e.immutable??!1,this.requestRenderOnSourceChangedEnabled=e.requestRenderOnSourceChangedEnabled??!0,this.source=t,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),t(this._uploadStatus)&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return void 0!==this._height?this._height:this._sourceHeight}set height(t){this._height=t}get source(){return this._source}set source(t){null==t&&null==this._source||(this._source=t,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width),this.invalidateTexture())}get width(){return void 0!==this._width?this._width:this._sourceWidth}set width(t){this._width=t}beforeRender(t){super.beforeRender(t),this.updateTexture(t)}async setSourceAsync(e,i){t(this._uploadStatus)&&this._uploadStatus.controller.abort();const h=new AbortController,o=s();return r(i,(()=>h.abort())),r(h,(t=>o.reject(t))),this._uploadStatus={controller:h,resolver:o},this.source=e,o.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this.requestRenderOnSourceChangedEnabled&&this.requestRender())}updateTransitionProperties(t,e){t>=64&&(this.fadeTransitionEnabled=!1,this.inFadeTransition=!1),super.updateTransitionProperties(t,e)}setTransform(t){const e=o(this.transforms.dvs),[i,s]=t.toScreenNoRotation([0,0],[this.x,this.y]),r=this.resolution/this.pixelRatio/t.resolution,h=r*this.width,d=r*this.height,p=Math.PI*this.rotation/180;a(e,e,c(i,s)),a(e,e,c(h/2,d/2)),n(e,e,-p),a(e,e,c(-h/2,-d/2)),u(e,e,c(h,d)),l(this.transforms.dvs,t.displayViewMat3,e)}setSamplingProfile(t){this._texture&&(t.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(t.samplingMode))}bind(t,e){this._texture&&t.bindTexture(this._texture,e)}async updateTexture({context:e,painter:s}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(e)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const r=T(o=this.source)?o instanceof R?i(o.getRenderedRasterPixels(),(t=>t.renderedRasterPixels)):b(o):o;var o;try{if(t(this._uploadStatus)){const{controller:t,resolver:e}=this._uploadStatus,i={signal:t.signal},{width:h,height:o}=this,a=this._texture,n=s.textureUploadManager;await n.enqueueTextureUpdate({data:r,texture:a,width:h,height:o},i),e.resolve(),this._uploadStatus=null}else this._texture.setData(r);this.ready()}catch(t){h(t)}}onDetach(){this.destroy()}_createTransforms(){return{dvs:d()}}_createTexture(t){const e=this.immutable&&t.type===_.WEBGL2;return new w(t,{target:x.TEXTURE_2D,pixelFormat:g.RGBA,internalFormat:e?m.RGBA8:g.RGBA,dataType:f.UNSIGNED_BYTE,wrapMode:B.CLAMP_TO_EDGE,isImmutable:e,width:this._sourceWidth,height:this._sourceHeight})}}export{v as B,R as I,T as i,b as r};
