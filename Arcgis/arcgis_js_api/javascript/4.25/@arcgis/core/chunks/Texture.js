/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{h as t}from"./object.js";import{i as e}from"./mathUtils.js";import{i as r,u as i}from"./maybe.js";import o from"../core/Error.js";import{L as a}from"./Logger.js";import{C as s}from"./context-util.js";import{T as n,c as l,b as h,R as p,a as _,P as m,S as d,C as u}from"./enums3.js";const c=a.getLogger("esri.views.webgl.checkWebGLError"),E=!!t("enable-feature:webgl-debug");function g(){return E}function T(){return E}function x(t){if(g()){const e=t.getError();if(e){const r=function(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(t,e),i=(new Error).stack;c.error(new o("webgl-error","WebGL error occured",{message:r,stack:i}))}}}function f(t){return window.WebGL2RenderingContext&&t instanceof window.WebGL2RenderingContext}const M={target:n.TEXTURE_2D,samplingMode:l.LINEAR,wrapMode:h.REPEAT,flipped:!1,hasMipmap:!1,isOpaque:!1,unpackAlignment:4,preMultiplyAlpha:!1,isImmutable:!1};class w{constructor(t,e,r=null){this._context=t,this.type="texture",this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,t.instanceCounter.increment(p.Texture,this),this._descriptor={...M,...e};for(const t in M)void 0===this._descriptor[t]&&(this._descriptor[t]=M[t]);if(t.type!==s.WEBGL2&&(this._descriptor.isImmutable&&(this._descriptor.isImmutable=!1),b(this._descriptor.target)))throw new Error("3D and array textures are not supported in WebGL1");this._descriptor.target===n.TEXTURE_CUBE_MAP?this._setDataCubeMap(r):this.setData(r)}get glName(){return this._glName}get descriptor(){return this._descriptor}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._context.gl&&this._glName&&(this._context.unbindTexture(this),this._context.gl.deleteTexture(this._glName),this._glName=null,this._context.instanceCounter.decrement(p.Texture,this))}release(){this.dispose()}resize(t,e){const r=this._descriptor;if(r.width!==t||r.height!==e){if(this._wasImmutablyAllocated)throw new Error("Immutable textures can't be resized!");r.width=t,r.height=e,this._descriptor.target===n.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=n.TEXTURE_CUBE_MAP_POSITIVE_X;e<=n.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,e){if(!this._context||!this._context.gl)return;const i=this._context.gl;this._glName||(this._glName=i.createTexture()),void 0===t&&(t=null);const o=this._descriptor,a=e??o.target,s=b(a);null===t&&(o.width=o.width||4,o.height=o.height||4,s&&(o.depth=o.depth??1));const n=this._context.bindTexture(this,w.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(w.TEXTURE_UNIT_FOR_UPDATES),w._validateTexture(this._context,o),this._configurePixelStorage(),x(i);const l=o.pixelFormat;let h=o.internalFormat??this._deriveInternalFormat(l,o.dataType);if(I(t)){let e=t.width,r=t.height;const n=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,r=t.videoHeight),o.width&&o.height,s&&o.depth,o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,h,o.hasMipmap,e,r,n),this._texImage(a,0,h,e,r,n,t),x(i),o.hasMipmap&&this.generateMipmap(),void 0===o.width&&(o.width=e),void 0===o.height&&(o.height=r),s&&void 0===o.depth&&(o.depth=n)}else{const{width:e,height:n,depth:l}=o;if(null==e||null==n)throw new Error("Width and height must be specified!");if(s&&null==l)throw new Error("Depth must be specified!");if(o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,h,o.hasMipmap,e,n,l),i.DEPTH24_STENCIL8&&h===i.DEPTH_STENCIL&&(h=i.DEPTH24_STENCIL8),A(t)){const r=t.levels,s=R(a,e,n,l),p=Math.min(s-1,r.length-1);f(i)?i.texParameteri(o.target,i.TEXTURE_MAX_LEVEL,p):o.hasMipmap=o.hasMipmap&&s===r.length;const _=h;if(!(_ in u))throw new Error("Attempting to use compressed data with an umcompressed format!");this._forEachMipmapLevel(((t,e,i,o)=>{const s=r[Math.min(t,r.length-1)];this._compressedTexImage(a,t,_,e,i,o,s)}),p)}else r(t)?(this._texImage(a,0,h,e,n,l,t),x(i),o.hasMipmap&&this.generateMipmap()):this._forEachMipmapLevel(((t,e,r,o)=>{this._texImage(a,t,h,e,r,o,null),x(i)}))}w._applySamplingMode(i,this._descriptor),w._applyWrapMode(i,this._descriptor),w._applyAnisotropicFilteringParameters(this._context,this._descriptor),x(i),this._context.bindTexture(n,w.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,e,r,i,o,a,s=0){a||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const n=this._context.gl,l=this._descriptor,{pixelFormat:h,dataType:p,target:_,isImmutable:m}=l,d=l.internalFormat??this._deriveInternalFormat(h,p);if(m&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");const u=this._context.bindTexture(this,w.TEXTURE_UNIT_FOR_UPDATES,!0);if((e<0||r<0||i>l.width||o>l.height||e+i>l.width||r+o>l.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),s){if(!f(n))return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(n.UNPACK_SKIP_ROWS,s)}if(I(a)?f(n)?n.texSubImage2D(_,t,e,r,i,o,h,p,a):n.texSubImage2D(_,t,e,r,h,p,a):A(a)?n.compressedTexSubImage2D(_,t,e,r,i,o,d,a.levels[t]):n.texSubImage2D(_,t,e,r,i,o,h,p,a),s){if(!f(n))return void console.error("Webgl2 must be enabled to use dataRowOffset!");n.pixelStorei(n.UNPACK_SKIP_ROWS,0)}this._context.bindTexture(u,w.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,r,i,o,a,s,n){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const l=this._context.gl;if(!f(l))throw new Error("3D textures are not supported in WebGL1");const h=this._descriptor,{pixelFormat:p,dataType:_,isImmutable:m,target:d}=h,u=h.internalFormat??this._deriveInternalFormat(p,_);if(m&&!this._wasImmutablyAllocated)throw new Error("Cannot update immutable texture before allocation!");b(d)||console.warn("Attempting to set 3D texture data on a non-3D texture");const c=this._context.bindTexture(this,w.TEXTURE_UNIT_FOR_UPDATES);if(this._context.setActiveTexture(w.TEXTURE_UNIT_FOR_UPDATES),(e<0||r<0||i<0||o>h.width||a>h.height||s>h.depth||e+o>h.width||r+a>h.height||i+s>h.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage(),A(n))n=n.levels[t],l.compressedTexSubImage3D(d,t,e,r,i,o,a,s,u,n);else{const h=n;l.texSubImage3D(d,t,e,r,i,o,a,s,p,_,h)}this._context.bindTexture(c,w.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new Error("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,w._validateTexture(this._context,t)}t.samplingMode===l.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=l.LINEAR_MIPMAP_NEAREST):t.samplingMode===l.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=l.NEAREST_MIPMAP_NEAREST);const e=this._context.bindTexture(this,w.TEXTURE_UNIT_FOR_UPDATES);this._context.setActiveTexture(w.TEXTURE_UNIT_FOR_UPDATES),this._context.gl.generateMipmap(t.target),this._context.bindTexture(e,w.TEXTURE_UNIT_FOR_UPDATES)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,w._validateTexture(this._context,this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const t=this._context.gl,e=this._descriptor;this._samplingModeDirty&&(w._applySamplingMode(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(w._applyWrapMode(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(t,e){if(this._context.type===s.WEBGL1)return t;switch(e){case _.FLOAT:switch(t){case m.RGBA:return d.RGBA32F;case m.RGB:return d.RGB32F;default:throw new Error("Unable to derive format")}case _.UNSIGNED_BYTE:switch(t){case m.RGBA:return d.RGBA8;case m.RGB:return d.RGB8}default:return t}}_configurePixelStorage(){const t=this._context.gl,{unpackAlignment:e,flipped:r,preMultiplyAlpha:i}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,r?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,i?1:0)}_texStorage(t,e,r,i,o,a){const s=this._context.gl;if(!f(s))throw new Error("Immutable textures are not supported in WebGL1");if(!(e in d))throw new Error("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const n=r?R(t,i,o,a):1;if(b(t)){if(null==a)throw new Error("Missing depth dimension for 3D texture upload");s.texStorage3D(t,n,e,i,o,a)}else s.texStorage2D(t,n,e,i,o);this._wasImmutablyAllocated=!0}_texImage(t,e,o,a,n,l,h){const p=this._context.gl;let _=null;const m=this._context.type===s.WEBGL2,d=b(t),{isImmutable:u,pixelFormat:c,dataType:E}=this._descriptor;if(m&&(_=p),m||!I(h))if(u){if(r(h)){const r=h;if(d){if(null==l)throw new Error("Missing depth dimension for 3D texture upload");_.texSubImage3D(t,e,0,0,0,a,n,l,c,E,r)}else p.texSubImage2D(t,e,0,0,a,n,c,E,r)}}else{const r=i(h);if(d){if(null==l)throw new Error("Missing depth dimension for 3D texture upload");_.texImage3D(t,e,o,a,n,l,0,c,E,r)}else p.texImage2D(t,e,o,a,n,0,c,E,r)}else p.texImage2D(t,0,o,c,E,h)}_compressedTexImage(t,e,i,o,a,n,l){const h=this._context.gl;let p=null;const _=b(t),m=this._descriptor.isImmutable;if(_){if(this._context.type!==s.WEBGL2)throw new Error("3D textures are not supported in WebGL1");p=h}if(m){if(r(l))if(_){if(null==n)throw new Error("Missing depth dimension for 3D texture upload");p.compressedTexSubImage3D(t,e,0,0,0,o,a,n,i,l)}else h.compressedTexSubImage2D(t,e,0,0,o,a,i,l)}else if(_){if(null==n)throw new Error("Missing depth dimension for 3D texture upload");p.compressedTexImage3D(t,e,i,o,a,n,0,l)}else h.compressedTexImage2D(t,e,i,o,a,0,l)}_forEachMipmapLevel(t,e=1/0){let{width:r,height:i,depth:o,hasMipmap:a,target:s}=this._descriptor;const l=s===n.TEXTURE_3D;if(null==r||null==i||l&&null==o)throw new Error("Missing texture dimensions for mipmap calculation");for(let s=0;t(s,r,i,o),a&&(1!==r||1!==i||l&&1!==o)&&!(s>=e);++s)r=Math.max(1,r>>1),i=Math.max(1,i>>1),l&&(o=Math.max(1,o>>1))}static _validateTexture(t,r){(null!=r.width&&r.width<0||null!=r.height&&r.height<0||null!=r.depth&&r.depth<0)&&console.error("Negative dimension parameters are not allowed!");const i=f(t.gl),o=null!=r.width&&e(r.width)&&null!=r.height&&e(r.height);i||!r.isImmutable&&!b(r.target)||console.error("Immutable and 3D-like textures are not supported in WebGL1!"),i||o||("number"==typeof r.wrapMode?r.wrapMode!==h.CLAMP_TO_EDGE&&console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"):r.wrapMode.s===h.CLAMP_TO_EDGE&&r.wrapMode.t===h.CLAMP_TO_EDGE||console.error("Non-power-of-two textures must have a wrap mode of CLAMP_TO_EDGE!"),r.hasMipmap&&console.error("Mipmapping requires power-of-two textures!"))}static _applySamplingMode(t,e){let r=e.samplingMode,i=e.samplingMode;r===l.LINEAR_MIPMAP_NEAREST||r===l.LINEAR_MIPMAP_LINEAR?(r=l.LINEAR,e.hasMipmap||(i=l.LINEAR)):r!==l.NEAREST_MIPMAP_NEAREST&&r!==l.NEAREST_MIPMAP_LINEAR||(r=l.NEAREST,e.hasMipmap||(i=l.NEAREST)),t.texParameteri(e.target,t.TEXTURE_MAG_FILTER,r),t.texParameteri(e.target,t.TEXTURE_MIN_FILTER,i)}static _applyWrapMode(t,e){"number"==typeof e.wrapMode?(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode)):(t.texParameteri(e.target,t.TEXTURE_WRAP_S,e.wrapMode.s),t.texParameteri(e.target,t.TEXTURE_WRAP_T,e.wrapMode.t))}static _applyAnisotropicFilteringParameters(t,e){const r=t.capabilities.textureFilterAnisotropic;r&&t.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}}function A(t){return r(t)&&"type"in t&&"compressed"===t.type}function I(t){return r(t)&&!A(t)&&!function(t){return r(t)&&"byteLength"in t}(t)}function b(t){return t===n.TEXTURE_3D||t===n.TEXTURE_2D_ARRAY}function R(t,e,r,i=1){let o=Math.max(e,r);return t===n.TEXTURE_3D&&(o=Math.max(o,i)),Math.round(Math.log(o)/Math.LN2)+1}w.TEXTURE_UNIT_FOR_UPDATES=0;export{w as T,T as a,x as c,f as i,g as w};
