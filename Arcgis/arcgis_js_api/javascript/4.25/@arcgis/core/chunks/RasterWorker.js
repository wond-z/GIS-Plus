/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import"../geometry.js";import{i as r,u as t}from"./maybe.js";import o from"../geometry/support/GeographicTransformation.js";import s from"../layers/support/PixelBlock.js";import{d as e,R as i}from"./RasterSymbolizer.js";import{s as m,m as p,d as a,g as l}from"./pixelUtils.js";import{c as n}from"./rasterFunctionHelper.js";import{r as c,l as j,d as f}from"./rasterProjectionHelper.js";import{e as u}from"./stretchUtils.js";import{c as d,d as y}from"./vectorFieldUtils.js";import{r as S}from"./utils8.js";import{c as g}from"./dataUtils.js";import h from"../geometry/Extent.js";import"./ensureType.js";import"./object.js";import"../core/lang.js";import"./Logger.js";import"../config.js";import"./string.js";import"../geometry/Geometry.js";import"./tslib.es6.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./get.js";import"./utils.js";import"./handleUtils.js";import"./metadata.js";import"./ArrayPool.js";import"../core/accessorSupport/decorators/subclass.js";import"./tracking.js";import"../core/Error.js";import"../core/accessorSupport/decorators/property.js";import"./watch.js";import"../core/scheduling.js";import"./nextTick.js";import"../core/promiseUtils.js";import"./reader.js";import"../geometry/SpatialReference.js";import"./writer.js";import"../geometry/Multipoint.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"./Ellipsoid.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./typeUtils.js";import"./jsonMap.js";import"../geometry/support/jsonUtils.js";import"../geometry/support/GeographicTransformationStep.js";import"./assets.js";import"../request.js";import"../kernel.js";import"../core/urlUtils.js";import"./colorUtils2.js";import"../layers/support/RasterInfo.js";import"./colorRampUtils.js";import"../Color.js";import"./colorUtils.js";import"./mathUtils.js";import"./vec3.js";import"./common.js";import"./enumeration.js";import"./colorRamps.js";import"../rest/support/AlgorithmicColorRamp.js";import"../rest/support/ColorRamp.js";import"../rest/support/MultipartColorRamp.js";import"./unitUtils.js";import"./projectionEllipsoid.js";import"./pe.js";import"../geometry/projection.js";import"./SimpleObservable.js";import"./mat4.js";import"./aaBoundingRect.js";import"./geodesicConstants.js";import"./zscale.js";import"./stretchRendererUtils.js";class x{convertVectorFieldData(t){const o=s.fromJSON(t.pixelBlock),e=d(o,t.type);return Promise.resolve(r(e)&&e.toJSON())}async decode(r){const t=await e(r.data,r.options);return t&&t.toJSON()}symbolize(t){t.pixelBlock=s.fromJSON(t.pixelBlock),t.extent=t.extent?h.fromJSON(t.extent):null;const o=this.symbolizer.symbolize(t);return Promise.resolve(r(o)&&o.toJSON())}async updateSymbolizer(r){this.symbolizer=i.fromJSON(r.symbolizerJSON),r.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=r.histograms)}async updateRasterFunction(r){this.rasterFunction=n(r.rasterFunctionJSON)}async process(t){const o=this.rasterFunction.process({extent:h.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map((t=>r(t)?s.fromJSON(t):null)),primaryRasterIds:t.primaryRasterIds});return r(o)?o.toJSON():null}stretch(t){const o=this.symbolizer.simpleStretch(s.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(r(o)&&o.toJSON())}estimateStatisticsHistograms(r){const t=u(s.fromJSON(r.srcPixelBlock));return Promise.resolve(t)}split(r){const t=m(s.fromJSON(r.srcPixelBlock),r.tileSize,r.maximumPyramidLevel);return t&&t.forEach(((r,o)=>{t.set(o,r?.toJSON())})),Promise.resolve(t)}async mosaicAndTransform(r){const o=r.srcPixelBlocks.map((r=>r?new s(r):null)),e=p(o,r.srcMosaicSize,{blockWidths:r.blockWidths,alignmentInfo:r.alignmentInfo,clipOffset:r.clipOffset,clipSize:r.clipSize});let i,m=e;return r.coefs&&(m=a(e,r.destDimension,r.coefs,r.sampleSpacing,r.interpolation)),r.projectDirections&&r.gcsGrid&&(i=l(r.destDimension,r.gcsGrid),m=t(y(m,r.isUV?"vector-uv":"vector-magdir",i))),{pixelBlock:m?.toJSON(),localNorthDirections:i}}async createFlowMesh(r,t){const o={data:new Float32Array(r.flowData.buffer),mask:new Uint8Array(r.flowData.maskBuffer),width:r.flowData.width,height:r.flowData.height},{vertexData:s,indexData:e}=await g(r.meshType,r.simulationSettings,o,t.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:e.buffer},transferList:[s.buffer,e.buffer]}}async getProjectionOffsetGrid(r){const t=h.fromJSON(r.projectedExtent),s=h.fromJSON(r.srcBufferExtent);let e=null;r.datumTransformationSteps&&(e=new o({steps:r.datumTransformationSteps})),(r.includeGCSGrid||c(t.spatialReference,s.spatialReference,e))&&await j();const i=r.rasterTransform?S(r.rasterTransform):null;return f({...r,projectedExtent:t,srcBufferExtent:s,datumTransformation:e,rasterTransform:i})}}export{x as default};
