/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import{L as t}from"./Logger.js";import{isAbortError as i}from"../core/promiseUtils.js";import{watch as r}from"../core/reactiveUtils.js";import{property as s}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"./ensureType.js";import{subclass as o}from"../core/accessorSupport/decorators/subclass.js";import{e as a}from"../geometry/SpatialReference.js";import{B as p,c as m,r as l}from"./imageUtils3.js";import{L as n}from"./LayerView2D.js";import{T as c}from"./TileInfoView.js";import{T as h}from"./TileKey2.js";import{T as j,a as u}from"./TileStrategy.js";import f from"../views/layers/LayerView.js";import{R as y}from"./RefreshableLayerView.js";import{T as d}from"./TileLayerView.js";import{a as g}from"./drapedUtils.js";import"../config.js";import"./object.js";import"./maybe.js";import"./string.js";import"../core/Error.js";import"./handleUtils.js";import"./watch.js";import"./ArrayPool.js";import"../core/scheduling.js";import"./nextTick.js";import"./get.js";import"./utils.js";import"./tracking.js";import"./metadata.js";import"../core/JSONSupport.js";import"../core/Accessor.js";import"../core/Handles.js";import"./writer.js";import"./BitmapTileContainer.js";import"./aaBoundingRect.js";import"./mathUtils.js";import"./vec3.js";import"./common.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"./reader.js";import"../geometry/Point.js";import"../core/accessorSupport/decorators/cast.js";import"../geometry/support/webMercatorUtils.js";import"./Ellipsoid.js";import"./mat3f32.js";import"./Bitmap.js";import"./mat3.js";import"./vec2f32.js";import"./DisplayObject.js";import"../core/Evented.js";import"./context-util.js";import"./enums3.js";import"./Texture.js";import"./TiledDisplayObject.js";import"./WGLContainer.js";import"./WGLBrushVTLSymbol.js";import"./vec4f32.js";import"./definitions.js";import"./enums4.js";import"./number2.js";import"./FramebufferObject.js";import"./StyleDefinition.js";import"./enums.js";import"./config.js";import"./GeometryUtils2.js";import"./pixelUtils.js";import"../layers/support/PixelBlock.js";import"./DefaultVertexAttributeLayouts.js";import"./vec2f64.js";import"./VertexElementDescriptor.js";import"./Utils18.js";import"./ShaderCompiler.js";import"./ProgramTemplate.js";import"./Program.js";import"./MaterialKey.js";import"./alignmentUtils.js";import"./utils19.js";import"./screenUtils.js";import"./heatmapUtils.js";import"./vec4f64.js";import"../Color.js";import"./colorUtils.js";import"./heatmapTextureUtils.js";import"./Container.js";import"./EffectView.js";import"./parser.js";import"./mat4f32.js";import"./mat4.js";import"./_commonjsHelpers.js";import"./earcut.js";import"./vec2.js";import"./featureConversionUtils.js";import"../geometry/support/jsonUtils.js";import"../geometry/Multipoint.js";import"./zmUtils.js";import"../geometry/Polygon.js";import"./extentUtils.js";import"../geometry/Polyline.js";import"./OptimizedFeature.js";import"./OptimizedFeatureSet.js";import"./TileContainer.js";import"../core/Collection.js";import"./shared.js";import"./SimpleObservable.js";import"./collectionUtils.js";import"./ClipRect.js";import"../geometry.js";import"./typeUtils.js";import"./jsonMap.js";import"./QueueProcessor.js";import"./Queue.js";import"../core/HandleOwner.js";import"./WatchUpdatingTracking.js";import"../core/Identifiable.js";import"../core/Promise.js";import"./unitUtils.js";import"./projectionEllipsoid.js";const w=[0,0];let _=class extends(d(y(p(n(f))))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||!1!==this.layer.resampling}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new c(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new j({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(e,t)=>this.fetchTile(e,t)}),this._tileStrategy=new u({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(r((()=>this.resampling),(()=>{this.doRefresh()}))),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){return a(this.layer.tileInfo?.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return g(e,t,this.view)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))))}isUpdating(){return this._fetchQueue?.updating??!1}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(w,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate()}async fetchTile(e,t={}){const r="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:o=0}=t;if(!r)try{return await this._fetchImage(e,s)}catch(r){if(!i(r)&&!this.resampling)return m(this._tileInfoView.tileInfo.size);if(o<3){const i=this._tileInfoView.getTileParentId(e.id);if(i){const r=new h(i),s=await this.fetchTile(r,{...t,resamplingLevel:o+1});return l(this._tileInfoView,s,r,e)}}throw r}const a=new h(0,0,0,0);let p;try{if(await r.fetchAvailabilityUpsample(e.level,e.row,e.col,a,{signal:s}),a.level!==e.level&&!this.resampling)return m(this._tileInfoView.tileInfo.size);p=await this._fetchImage(a,s)}catch(t){if(i(t))throw t;p=await this._fetchImage(e,s)}return this.resampling?l(this._tileInfoView,p,a,e):p}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()))}catch(e){i(e)||t.getLogger(this.declaredClass).error(e)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};e([s()],_.prototype,"_fetchQueue",void 0),e([s()],_.prototype,"resampling",null),_=e([o("esri.views.2d.layers.TileLayerView2D")],_);const T=_;export{T as default};
