/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import t from"../core/Error.js";import{i as a,u as r}from"./maybe.js";import{L as i}from"./Logger.js";import"./ensureType.js";import{p as s}from"../core/lang.js";import"./object.js";import{subclass as n}from"../core/accessorSupport/decorators/subclass.js";import{a as o,c as l,b as u}from"./generateRendererUtils.js";import{g as c,m,s as p,u as d,h as y,a as h,c as f,b as g,d as w}from"./statsWorker.js";import{open as F}from"../core/workers/workers.js";import{g as S,F as v}from"./utils11.js";import{timeout as x,eachAlways as _,throwIfAborted as V}from"../core/promiseUtils.js";import{whenOnce as q}from"../core/reactiveUtils.js";import{property as z}from"../core/accessorSupport/decorators/property.js";import{t as L}from"./quantizationUtils.js";import{i as T}from"./arcgisLayerUrl.js";import{k as E}from"./fieldType.js";import{isStringField as C,isNumericField as b,isDateField as M}from"../layers/support/fieldUtils.js";import{JSONSupport as k}from"../core/JSONSupport.js";import j,{Q}from"../rest/support/Query.js";import I from"../rest/support/StatisticDefinition.js";import{getArcadeForPredominantCategory as O,getSQLForPredominantCategoryName as A}from"../smartMapping/statistics/support/predominanceUtils.js";import N from"../core/Loadable.js";import{e as P,m as R,g as B,a as D,b as G,c as J,d as U,f as W,h as H,i as $,j as Z,k as X,l as K}from"./utils12.js";import{p as Y,i as ee,c as te,g as ae,a as re,r as ie,s as se}from"./utils13.js";import{D as ne}from"./DataLayerSource.js";import oe from"../request.js";import{fromJSON as le}from"../renderers/support/jsonUtils.js";import{e as ue}from"./executeQuery.js";import{p as ce}from"./utils4.js";import"../kernel.js";import"../core/urlUtils.js";import"../rest/query/support/AttachmentInfo.js";import"../rest/support/AttachmentQuery.js";import"../geometry/Extent.js";import"../geometry/Geometry.js";import"../geometry/Multipoint.js";import"../geometry/Point.js";import"../geometry/Polygon.js";import"../geometry/Polyline.js";import"../geometry/support/normalizeUtils.js";import"./pbf.js";import"./unitUtils.js";import"../geometry/SpatialReference.js";import"../geometry.js";import me from"../rest/support/FeatureSet.js";import"./featureConversionUtils.js";import"../rest/support/RelationshipQuery.js";import"../rest/support/TopFeaturesQuery.js";import{T as pe}from"./Task.js";import de from"../Graphic.js";class ye{async open(e){this.connection=await F("statsWorker",{strategy:"distributed",signal:e})}destroy(){this.connection?.close()}static getInstance(){return ye.instance||(ye.instance=new ye),ye.instance}async summaryStatistics(e,a){if(!this.connection)throw new t("worker-client:summary-statistics","connection is required");return this.connection.invoke("summaryStatistics",{attribute:e,features:a})}async uniqueValues(e,a){if(!this.connection)throw new t("worker-client:unique-values","connection is required");return this.connection.invoke("uniqueValues",{attribute:e,features:a})}async classBreaks(e,a){if(!this.connection)throw new t("worker-client:class-breaks","connection is required");return this.connection.invoke("classBreaks",{attribute:e,features:a})}async histogram(e,a){if(!this.connection)throw new t("worker-client:histogram","connection is required");return this.connection.invoke("histogram",{attribute:e,features:a})}async heatmapStatistics(e,a){if(!this.connection)throw new t("worker-client:heatmap-statistics","connection is required");return this.connection.invoke("heatmapStatistics",{attribute:e,features:a})}}let he=class extends k{constructor(){super(...arguments),this.classificationDefinition=null,this.where=null}};e([z({type:o,json:{read:{source:"classificationDef"},write:{target:"classificationDef"}}})],he.prototype,"classificationDefinition",void 0),e([z({type:String,json:{write:!0}})],he.prototype,"where",void 0),he=e([n("esri.rest.support.GenerateRendererParameters")],he);const fe=he;let ge=class extends o{constructor(){super(...arguments),this.attributeField=null,this.attributeField2=null,this.attributeField3=null,this.fieldDelimiter=null,this.type="unique-value-definition"}get uniqueValueFields(){const e=[];return this.attributeField&&e.push(this.attributeField),this.attributeField2&&e.push(this.attributeField2),this.attributeField3&&e.push(this.attributeField3),e}};e([z()],ge.prototype,"attributeField",void 0),e([z()],ge.prototype,"attributeField2",void 0),e([z()],ge.prototype,"attributeField3",void 0),e([z({json:{write:!0}})],ge.prototype,"fieldDelimiter",void 0),e([z({json:{write:!0}})],ge.prototype,"uniqueValueFields",null),e([z()],ge.prototype,"type",void 0),ge=e([n("esri.rest.support.UniqueValueDefinition")],ge);const we=ge;let Fe=class extends N{constructor(e){super(e)}};e([z({constructOnly:!0})],Fe.prototype,"layer",void 0),e([z()],Fe.prototype,"geometryType",void 0),e([z()],Fe.prototype,"objectIdField",void 0),e([z()],Fe.prototype,"supportsSQLExpression",void 0),e([z()],Fe.prototype,"hasQueryEngine",void 0),e([z()],Fe.prototype,"minScale",void 0),e([z()],Fe.prototype,"maxScale",void 0),e([z()],Fe.prototype,"fullExtent",void 0),Fe=e([n("esri.smartMapping.support.adapters.LayerAdapter")],Fe);const Se=Fe;function ve(e,t,a){if("classBreaks"===e.type){const r=le(e);return{classBreaks:r.classBreakInfos.map(((e,i)=>(0===i&&null!=t&&(e.minValue=t),i===r.classBreakInfos.length-1&&null!=a&&(e.maxValue=a),{minValue:e.minValue,maxValue:e.maxValue,label:e.label}))),normalizationTotal:r.normalizationTotal}}return{uniqueValues:e.uniqueValueInfos.map(((r,i)=>(0===i&&null!=t&&(r.value=t),i===e.uniqueValueInfos.length-1&&null!=a&&(r.value=a),{count:r.count,value:r.value,label:r.label})))}}let xe=class extends pe{constructor(e){super(e),this.checkValueRange=null,this.gdbVersion=null,this.source=null}get parsedUrl(){const e=this._parseUrl(this.url);return e?(e.path+="/generateRenderer",e):null}execute(e,t){const a={checkValueRange:this.checkValueRange,gdbVersion:this.gdbVersion,source:this.source};return async function(e,t,a,r){const i=ce(e),{source:s,checkValueRange:n}=t,{classificationDefinition:o}=a,l={...a.toJSON(),f:"json"};let u=null;if(u="esri.tasks.support.ClassBreaksDefinition"===o.declaredClass?o.classificationField:o.attributeField,s){const e={source:s?.toJSON()};l.layer=JSON.stringify(e)}l.classificationDef&&(l.classificationDef=JSON.stringify(l.classificationDef));let c={query:l};r&&(c={...r,...c});const m={url:i.path,field:u,checkValueRange:n},p=i.path+"/generateRenderer";return oe(p,c).then((e=>function(e,t){const{field:a,checkValueRange:r,url:i}=e,s=t&&t.data;if(!s)return;if(!r){const e=ve(s);return Promise.resolve(e)}const n=new I({statisticType:"min",onStatisticField:a}),o=new I({statisticType:"max",onStatisticField:a}),l=new j({outStatistics:[n,o]});return ue(i,l).then((e=>{const t=e.features[0].attributes;let a=null,r=null;for(const e in t)0===e.toLowerCase().indexOf("min")?a=t[e]:r=t[e];return ve(s,a,r)}))}(m,e)))}(this.url,a,e,{...this.requestOptions,...t})}};e([z()],xe.prototype,"checkValueRange",void 0),e([z()],xe.prototype,"gdbVersion",void 0),e([z({type:ne})],xe.prototype,"source",void 0),e([z({readOnly:!0})],xe.prototype,"parsedUrl",null),xe=e([n("esri.tasks.GenerateRendererTask")],xe);const _e=xe;let Ve,qe=class extends Se{constructor(e){super(e)}destroy(){this._hasLocalSource=null,this.workerClient?.destroy()}_isStatsSupportedOnService(){const e=this.layer;return!e.get("capabilities.query.supportsStatistics")||"multipatch"===this.geometryType&&!T(e.url)&&e.version<10.5?Promise.reject(new t("feature-layer-adapter:not-supported","Layer does not support statistics query")):Promise.resolve()}async _waitForLayerViewUpdate(e){if(!e)throw new t("feature-layer-adapter:insufficient-data","layerView is required to fetch the features");const a=new AbortController,r=q((()=>!e.updating),a.signal);await x(r,5e3,a).catch((e=>{throw i.getLogger(this.declaredClass).warn("LayerView is taking too long to update. Aborting fetch from layerView."),e}))}async _fetchFeaturesFromMemory(e,t,a,r){const i=this.layer,s="json"===r;if(this._hasLocalSource){const e=await i.queryFeatures(t);return s?P(e.features):e.features}if(await this._waitForLayerViewUpdate(e),s&&"queryFeaturesJSON"in e&&e.queryFeaturesJSON){const{features:r}=await e.queryFeaturesJSON(t,{signal:a});return r}const n=await e.queryFeatures(t,{signal:a});return s?P(n.features):n.features}_fetchFeaturesFromService(e,t){return this.layer.queryFeatures(e,{signal:t}).then((e=>e.features))}_fetchFeaturesJSONFromService(e,t){return this._fetchFeaturesFromService(e,t).then(P)}_fetchFeaturesForStats(e,t){return S({field:e.field,field2:e.field2,field3:e.field3,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,filter:e.filter,requiredFields:a,signal:e.signal},t)))}_summaryStatsFromGenRend(e){const t=e.normalizationType,a=e.normalizationField;return this.classBreaks({field:e.field,numClasses:5,classificationMethod:"standard-deviation",standardDeviationInterval:.25,normalizationType:t,normalizationField:"field"===t?a:void 0,minValue:e.minValue,maxValue:e.maxValue,filter:e.filter,signal:e.signal}).then((e=>{let t,a,r;if(e.classBreakInfos.some((e=>(e.hasAvg&&(t=e),!!t))),t){const e=t.maxValue-t.minValue;a=t.minValue+e/2,r=4*e}const i={min:e.minValue,max:e.maxValue,avg:a,stddev:r};return Y(i)}))}_getSummaryStatsQuery(e,t){const{field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,minValue:n,maxValue:o,filter:l}=e,u=this.supportsSQLExpression&&t?R(this,a):e.sqlExpression,p=B({field:a,normalizationType:r,normalizationField:i,normalizationTotal:s,layer:this}),d=u||p,y=d?h(d,n,o):null,f=c({field:a,normalizationField:i,normalizationType:r}),g=m(e.sqlWhere,f),w=m(g,y),F=ee({normalizationField:i,normalizationType:r,sqlExpression:u,supportsSQLExpression:this.supportsSQLExpression,minValue:n,maxValue:o}),S=C(this.getField(a)),v=se.filter((e=>"nullcount"===e?F:!S||"count"===e)),x=this.layer.createQuery();return x.where=m(x.where,w),x.sqlFormat=u?"standard":null,x.outStatistics=v.map((e=>{const t=new I;let a=null,r=null,i=`${e}_value`;return"variance"===e?(a="var",r=d):"nullcount"===e?(a="count",r=this.layer.objectIdField,i="totalcount_value"):"median"===e?(a="percentile-continuous",r=d,t.statisticParameters={value:.5}):(a=e,r=d),t.statisticType=a,t.onStatisticField=r,t.outStatisticFieldName=i,t})),this._updateQueryWithFeatureFilter(x,l),x}async _summaryStatsFromServiceQuery(e,t){await this._isStatsSupportedOnService(),"percent-of-total"===e.normalizationType&&(e.normalizationTotal=await this._getNormalizationTotal(e.field,e.normalizationType,e.filter));const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=D(r,t);return Y(i)}async _summaryStatsFromClientQuery(e,t){const a=this._getSummaryStatsQuery(e,t),r=await this.layer.queryFeatures(a,{signal:e.signal}),i=D(r,t);return Y(i)}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l=(!i&&!s&&n&&"querySummaryStatistics"in n?await n.querySummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await p({attribute:{field:e},features:s})).sum;if(null==l)throw new t("feature-layer-adapter:invalid","invalid normalizationTotal");return l}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:c,query:m,fieldInfos:d}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"querySummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?E.toJSON(t.type):null,o.viewInfoParams=G(a),o.fieldInfos=d),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:c,query:m},n)),!l&&!u&&c&&"querySummaryStatistics"in c?c.querySummaryStatistics(m,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):p({attribute:o,features:u})}async _getFilteredFeatures(e,t){let r=[];if("intersects"===t?.spatialRelationship){Ve||(Ve=await import("../geometry/geometryEngineAsync.js"));const i=a(t.geometry)?t.geometry:null;for(const t of e){const e=a(t.geometry)?t.geometry:null;e&&i&&await Ve.intersect(e,i)&&r.push(t)}}else r=e;return e.length&&"declaredClass"in e[0]&&"esri.Graphic"===e[0].declaredClass?{graphics:r}:{featuresJSON:r}}async _processStatsFromMemoryParams(e){const{features:a,filter:r}=e;if(a?.length)return this._getFilteredFeatures(a,r);const{view:i,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:c,layerViewFunc:m,signal:p}=e;let d=null,y=null,h=null,f=null,g=null;if(i)try{d=await i.whenLayerView(this.layer),y=m in d&&"function"==typeof d[m]}catch{y=!1}if(y)try{await this._waitForLayerViewUpdate(d);const e=await S({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});J(this,e,d).length?y=!1:(h=this.layer.createQuery(),h.outFields=e,h.returnGeometry=!1,this._updateQueryWithFeatureFilter(h,r)),d.suspended&&(y=!1)}catch{y=!1}if(!y&&(f=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:c,filter:r,view:i,signal:p},"json"),g=(await S({valueExpression:u})).map((e=>this.getField(e)?.toJSON())).filter(Boolean),!f?.length))throw new t("feature-layer-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:d,query:h,featuresJSON:f,fieldInfos:g}}_uvFromGenRenderer(e,t){const a=e.field,r=new we;r.attributeField=a;const i=new fe;return i.classificationDefinition=r,this.generateRenderer(i,e.signal).then((e=>{const t={},r=this.getField(a);return e.uniqueValues.forEach((e=>{let a=e.value;null!=a&&""!==a&&("string"!=typeof a||""!==a.trim()&&"<null>"!==a.toLowerCase())||(a=null),null==t[a]?t[a]={count:e.count,data:b(r)&&a?Number(a):a}:t[a].count=t[a].count+e.count})),{count:t}})).then((a=>te(a,[t],e.returnAllCodedValues)))}_getUVQueryOutStatistic(e,t){const a="countOF"+(e||"Expr"),r=new I;return r.statisticType="count",r.onStatisticField=t?"1":e,r.outStatisticFieldName=a,r}_getUVQuery(e){const{field:t,field2:a,field3:r,sqlExpression:i}=e,s=!(!t||!a),n=this.layer.createQuery();return n.where=m(n.where,e.sqlWhere),n.sqlFormat=i?"standard":null,n.outStatistics=[this._getUVQueryOutStatistic(s?null:t,s?"1":i)].filter(Boolean),n.groupByFieldsForStatistics=[t||i,a,r].filter(Boolean),this._updateQueryWithFeatureFilter(n,e.filter),n}async _uvFromServiceQuery(e,t){return this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(this._getUVQuery(e),{signal:e.signal}))).then((t=>U(t,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:v,view:e.view,signal:e.signal}))).then((a=>te(a,t,e.returnAllCodedValues,v)))}async _uvFromClientQuery(e,t){const{signal:a}=e,r=this._getUVQuery(e),i=await this.layer.queryFeatures(r,{signal:a}),s=await U(i,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:v,view:e.view,signal:e.signal});return te(s,t,e.returnAllCodedValues,v)}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:c,fieldInfos:m}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryUniqueValues"}),p={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:v,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(p.viewInfoParams=G(a),p.fieldInfos=m),!o&&!l&&u&&"queryUniqueValues"in u?u.queryUniqueValues(c,p,{signal:n}):o?this.workerClient.uniqueValues(p,o):d({attribute:p,features:l})}_calcBinsSQL(e,t,a){const r=[],i=t.length;return t.forEach(((t,s)=>{const[n,o]=t;let l=null;l=0!==s||a?s!==i-1||a?m(`${e} >= ${n}`,`${e} ${s===i-1?" <= ":" < "} ${o}`):`${e} >= ${n}`:`${e} < ${o}`,r.push("WHEN ("+l+") THEN "+(s+1))})),["CASE",r.join(" "),"ELSE 0","END"].join(" ")}_getNormalizationTotal(e,t,a,r){return e&&"percent-of-total"===t?this.summaryStatistics({field:e,filter:a,signal:r}).then((e=>e.sum)):Promise.resolve(null)}_getQueryParamsForExpr(e,t){const a=e.valueExpression||e.sqlExpression,r=e.signal;if(!a){const{field:a,normalizationType:i,normalizationField:s}=e,n=a?this.getField(a):null,o=M(n),l={field:a,normalizationType:i,normalizationField:s,normalizationTotal:t,layer:this};return{sqlExpression:o?R(this,a):B(l),sqlWhere:o?null:e.sqlWhere||c({field:a,normalizationType:i,normalizationField:s}),filter:e.filter,signal:r}}return{valueExpression:e.valueExpression,sqlExpression:e.sqlExpression,sqlWhere:e.sqlWhere,filter:e.filter,signal:r}}_getDataRange(e,t,a){return null!=t&&null!=a?Promise.resolve({min:t,max:a}):this.summaryStatistics(e).then((e=>({min:e.min,max:e.max})))}_histogramForExpr(e){return this._getNormalizationTotal(e.field,e.normalizationType,e.filter,e.signal).then((t=>{const a=this._getQueryParamsForExpr(e,t);return this._getDataRange(a,e.minValue,e.maxValue).then((r=>{const{min:i,max:s}=r,n=e.numBins||10,o=ae(i,s,n),l=this._calcBinsSQL(a.sqlExpression,o,null!=e.minValue&&null!=e.maxValue),u=new I({statisticType:"count",outStatisticFieldName:"countOFExpr",onStatisticField:"1"}),c=this.layer.createQuery();return c.where=m(c.where,a.sqlWhere),c.sqlFormat="standard",c.outStatistics=[u],c.groupByFieldsForStatistics=[l],c.orderByFields=[l],this._updateQueryWithFeatureFilter(c,e.filter),this._isStatsSupportedOnService().then((()=>this.layer.queryFeatures(c,{signal:a.signal}))).then((e=>W(e,i,s,n,t)))}))}))}_histogramForField(e){let a=null;return a=null!=e.minValue&&null!=e.maxValue?Promise.resolve({min:e.minValue,max:e.maxValue}):this.summaryStatistics(e).then((e=>{if(!e.count)throw new t("feature-layer-adapter:insufficient-data","Either the layer has no features or none of the features have data for the field");return{min:e.min,max:e.max}})),a.then((t=>this._getBins({min:t.min,max:t.max},e.field,e.numBins,e.view,e.filter,e.signal)))}_getBins(e,t,a=10,r,i,s){const{min:n,max:o,normTotal:l,excludeZerosExpr:u}=e,c=e.intervals||ae(n,o,a),m=e.sqlExpr||t;return this._queryBins(c,m,u,r,i,s).then((e=>({bins:e.map(((e,t)=>({minValue:c[t][0],maxValue:c[t][1],count:e.value}))),minValue:n,maxValue:o,normalizationTotal:l})))}_queryBins(e,t,a,r,i,s){const n=[],o=e.length;for(let r=0;r<o;r++){const i=m(a,m(t+" >= "+e[r][0],null!==e[r][1]?t+(r===o-1?" <= ":" < ")+e[r][1]:""));n.push(i)}return _(n.map((e=>this.queryFeatureCount({whereClause:e,view:r,filter:i,signal:s}))))}_binParamsFromGenRend(e,t){const{field:a,normalizationType:r,normalizationField:i,signal:s}=e,n=c({field:a,normalizationType:r,normalizationField:i}),o=new fe({classificationDefinition:re({field:a,normalizationType:r,normalizationField:i,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numBins||10}),where:m(n,t)});return this.generateRenderer(o,s).then((e=>{const{normalizationTotal:t,classBreaks:s}=e;return H({field:a,normalizationType:r,normalizationField:i,normalizationTotal:t,classBreaks:s,where:n,layer:this})}))}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryHistogram"}),c={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(c.viewInfoParams=G(t),c.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(c.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryHistogram"in o?o.queryHistogram(l,c,{signal:i}):s?this.workerClient.histogram(c,s):y({attribute:c,features:n})}_classBreaksFromGenRend(e){const{field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,signal:s}=e,n=c({field:t,normalizationType:a,normalizationField:r}),o=B({field:t,normalizationType:a,normalizationField:r,normalizationTotal:i,layer:this}),l=h(o,e.minValue,e.maxValue),u=re({field:t,normalizationType:a,normalizationField:r,classificationMethod:e.classificationMethod,standardDeviationInterval:e.standardDeviationInterval,breakCount:e.numClasses||5}),p=new fe;return p.classificationDefinition=u,p.where=m(n,l),this.generateRenderer(p,s).then((t=>ie(t,e.classificationMethod)))}_classBreaksFromInterpolation(e){const{minValue:t,maxValue:a}=e,r=e.numClasses||5,i=[],s=(a-t)/r;for(let e=0;e<r;e++){const a=t+e*s;i.push({minValue:a,maxValue:a+s})}i[r-1].maxValue=a;const n={classBreaks:i,normalizationTotal:e.normalizationTotal},o=ie(n,e.classificationMethod);return Promise.resolve(o)}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryClassBreaks"}),c={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(c.viewInfoParams=G(t),c.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(c.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryClassBreaks"in o?o.queryClassBreaks(l,c,{signal:i}):s?this.workerClient.classBreaks(c,s):f({attribute:c,features:n})}async _heatmapStatsFromMemory(e,t){const{view:a,field:r,radius:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams({...e,returnGeometry:!0}),o=new Q({extent:a.extent,tolerance:"2d"===a.type?a.state.resolution:a.pixelSizeAt(a.center)}),l={field:r,fieldOffset:t,radius:i,transform:L(o),spatialReference:a.spatialReference?.toJSON(),size:a.size};return s?.length||n?.length?s?this.workerClient.heatmapStatistics(l,s):g({attribute:l,features:n}):{count:0,min:null,max:null,avg:null,stddev:null}}_updateQueryWithFeatureFilter(e,t){t&&(e.geometry=t.geometry,e.spatialRelationship=t.spatialRelationship)}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!0,supportsStatistics:!0}:null}getFieldDomain(e,t){return this.layer.getFieldDomain(e,t)}summaryStatistics(e){const{field:a,normalizationType:r,sqlExpression:i,view:s,features:n,useFeaturesInView:o}=e,l=a?this.getField(a):null,u=M(l),c=e.valueExpression||i,m=c&&!i,p=this._hasLocalSource||n||o,d=s&&"3d"===s.type;return p||m?m||n||o||d?this._summaryStatsFromMemory(e,l):this._summaryStatsFromClientQuery(e,u):this.supportsSQLExpression||!u&&!c&&"natural-log"!==r&&"square-root"!==r?(r&&!this.supportsSQLExpression?this._summaryStatsFromGenRend(e):this._summaryStatsFromServiceQuery(e,u)).catch((()=>(V(e.signal),this._summaryStatsFromMemory(e,l)))):Promise.reject(new t("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries"))}async uniqueValues(e){const{valueExpression:t,sqlExpression:a,features:r,useFeaturesInView:i,signal:s}=e,n=t&&(!a||!this.supportsSQLExpression),o=this._hasLocalSource||r||i||n,l=e.view,u=l&&"3d"===l.type,c=await $(e,this);return o?n||r||i||u?this._uvFromMemory(e,c):this._uvFromClientQuery(e,c):this._uvFromServiceQuery(e,c).catch((t=>(V(s),!e.field||e.field2||e.field3||e.filter?t:this._uvFromGenRenderer(e,c[0])))).catch((()=>(V(s),u?this._uvFromMemory(e,c):this._uvFromClientQuery(e,c))))}histogram(e){const{field:a,normalizationType:r,normalizationField:i,classificationMethod:s,view:n,filter:o,signal:l}=e,u=a?this.getField(a):null,c=M(u),m=e.valueExpression||e.sqlExpression,p=m&&!e.sqlExpression,d=this._hasLocalSource||e.features||e.useFeaturesInView||p,y=this.supportsSQLExpression,f=!s||"equal-interval"===s,g=e.minValue,w=e.maxValue,F=null!=g&&null!=w,S=e.numBins||10;return d?this._histogramFromMemory(e):(m||y)&&f?y||!m&&"natural-log"!==r&&"square-root"!==r?this._histogramForExpr(e):Promise.reject(new t("feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries")):c&&f?Promise.reject(new t("feature-layer-adapter:not-supported","Normalization and date field are not allowed when layer does not support standardized SQL expression for queries")):r||!f?this._binParamsFromGenRend(e).then((s=>{if(!F)return this._getBins(s,a,S,n,o,l);if(g>s.max||w<s.min)throw new t("histogram:insufficient-data","Range defined by 'minValue' and 'maxValue' does not intersect available data range of the field");if(f)return this._getBins({min:g,max:w,sqlExpr:s.sqlExpr,excludeZerosExpr:s.excludeZerosExpr},a,S,n,o,l);{const t={field:a,normalizationType:r,normalizationField:i,normalizationTotal:s.normTotal,layer:this},u=B(t),c=h(u,g,w);return this._binParamsFromGenRend(e,c).then((e=>this._getBins(e,a,S,n,o,l)))}})):this._histogramForField(e)}classBreaks(e){const t=!1!==e.analyzeData,a=this._hasLocalSource||e.features||e.useFeaturesInView||e.valueExpression||e.filter;return t&&a?this._classBreaksFromMemory(e):(t?this._classBreaksFromGenRend(e):this._classBreaksFromInterpolation(e)).catch((()=>(V(e.signal),this._classBreaksFromMemory(e))))}queryFeatureCount(e){if(this._hasLocalSource)return Promise.reject(new t("feature-layer-adapter:not-supported","Layer does not support count query"));const a=this.layer,r=a.createQuery();return r.where=m(r.where,e.whereClause),this._updateQueryWithFeatureFilter(r,e.filter),a.queryFeatureCount(r,{signal:e.signal})}generateRenderer(e,a){const r=this.layer;if(this._hasLocalSource||r.version<10.1)return Promise.reject(new t("feature-layer-adapter:not-supported","Layer does not support generateRenderer operation (requires ArcGIS Server version 10.1+)"));const i=new _e({url:r.parsedUrl.path,source:r.dynamicDataSource,gdbVersion:r.gdbVersion}),s=r.createQuery();return e.where=m(e.where,s.where),i.execute(e,{signal:a})}heatmapStatistics(e){const{field:t,fieldOffset:a,view:r,signal:i}=e;return(t&&null==a?this.summaryStatistics({field:t,view:r,signal:i}):Promise.resolve(null)).then((t=>{let r=a||0;if(t){const{count:e,min:a,max:i}=t;e?a===i&&0===a?r=1:i<=0?r="abs":a<0&&(r=-1.01*a):r=1}return this._heatmapStatsFromMemory(e,r).then((e=>({...e,summaryStatistics:t,fieldOffset:r})))}))}async predominantCategories(e){if(!this._hasLocalSource&&!this.supportsSQLExpression)throw new t("feature-layer-adapter:not-supported","Layer does not support advanced SQL expressions and standardized queries");const{fields:a,view:r,signal:i}=e,s=O(a),n=A(a),o=r&&this._hasLocalSource?await this._uvFromMemory({valueExpression:s,view:r,signal:i}):await this._uvFromServiceQuery({sqlExpression:n.expression,valueExpression:s,signal:i});return Z(o.uniqueValueInfos,a)}async getSampleFeatures(e,t){const{view:a,sampleSize:r,requiredFields:i,returnGeometry:n,filter:o,signal:l}=e,u=this.layer.createQuery(),c="json"===t;u.outSpatialReference=e.spatialReference||a&&a.spatialReference,u.returnGeometry=!!n,u.outFields=i,this._updateQueryWithFeatureFilter(u,o);let m=[],p=!1;if(a)try{const e=await a.whenLayerView(this.layer);if(p=!J(this,i,e).length,p&&(m=await this._fetchFeaturesFromMemory(e,u,l,t),m.length&&r>0&&r<=m.length))return s(m,r,1)}catch(e){V(l)}try{if(this._hasLocalSource)return p?m:c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);const t=await this.queryFeatureCount({view:a,filter:o,signal:l}),i=this.layer.capabilities.query.maxRecordCount;let n=-1===r?t:r;if(n=i&&n>i?i:n,t<=m.length||m.length>=i)return m;const d=a.extent.width/a.width/a.scale*4e5;if(u.maxAllowableOffset=e.resolution||d,t<=n)return c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l);if(t<=2e4){const e=this.layer.createQuery();this._updateQueryWithFeatureFilter(e,o);const t=await this.layer.queryObjectIds();return u.objectIds=s(t,n,1),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}return this.layer.get("capabilities.query.supportsPagination")&&(u.num=Math.min(n,2e4)),c?this._fetchFeaturesJSONFromService(u,l):this._fetchFeaturesFromService(u,l)}catch(e){return V(l),m}}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this._hasLocalSource=!t.url&&!!t.source,this.hasQueryEngine=this._hasLocalSource,this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=ye.getInstance(),await this.workerClient.open(r(r(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([z({constructOnly:!0})],qe.prototype,"layer",void 0),qe=e([n("esri.smartMapping.support.adapters.FeatureLayerAdapter")],qe);const ze=qe;function Le(e){return"esri.rest.support.ClassBreaksDefinition"===e.declaredClass}function Te(e){return"esri.rest.support.UniqueValueDefinition"===e.declaredClass}let Ee=class extends ze{constructor(e){super(e)}async _createGenerateRendererResult(e,a,r,i,s){const n=e?.features,o=n?.length;if(!o)throw new t("csv-layer-adapter:insufficient-data","No features are available to calculate statistics");const c=P(n);let m=null;if("percent-of-total"===i&&(m=(await this.workerClient.summaryStatistics({field:a},c)).sum,null==m))throw new t("csv-layer-adapter:invalid","invalid normalizationTotal");if(Le(s)){const e=(await w({field:a,normalizationType:i,normalizationField:r,normalizationTotal:m},c)).filter((e=>Number.isFinite(e)));return l({definition:s,values:e,normalizationTotal:m})}if(Te(s)){const e=(await w({field:a},c)).filter((e=>null!=e&&"string"==typeof e&&""!==e.trim()));return u(e)}}generateRenderer(e,t){const a=e.classificationDefinition;let r=null,i=null,s=null;Le(a)?(r=a.classificationField,i=a.normalizationField,s=a.normalizationType):Te(a)&&(r=a.attributeField);const n=this.layer;return S({field:r,normalizationField:i}).then((o=>{const l=n.createQuery();return l.returnGeometry=!1,l.outFields=o,l.where=m(l.where,e.where),n.queryFeatures(l,{signal:t}).then((e=>this._createGenerateRendererResult(e,r,i,s,a)))}))}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=!0,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.workerClient=ye.getInstance(),await this.workerClient.open(r(r(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};Ee=e([n("esri.smartMapping.support.adapters.CSVLayerAdapter")],Ee);const Ce=Ee;let be=class extends ze{constructor(e){super(e)}async _getNormalizationTotalFromMemory(e,a,r){const{featuresJSON:i,graphics:s,layerView:n,query:o}=a,l=(!i&&!s&&n&&"queryAggregateSummaryStatistics"in n?await n.queryAggregateSummaryStatistics(o,{field:e},{signal:r}):i?await this.workerClient.summaryStatistics({field:e},i):await p({attribute:{field:e},features:s})).sum;if(null==l)throw new t("feature-layer-binning-adapter:invalid","invalid normalizationTotal");return l}async _processStatsFromMemoryParams(e){const{features:a,filter:r}=e;if(a?.length)return this._getFilteredFeatures(a,r);const{view:i,field:s,field2:n,field3:o,normalizationField:l,valueExpression:u,returnGeometry:c,layerViewFunc:m,signal:p}=e;let d=null,y=null,h=null,f=null,g=null;if(i)try{if(d=await i.whenLayerView(this.layer),y=m in d&&"function"==typeof d[m],y){await this._waitForLayerViewUpdate(d);const e=await S({field:s,field2:n,field3:o,normalizationField:l,valueExpression:u});X(this,e).length?y=!1:(h="createAggregateQuery"in d&&d.createAggregateQuery(),h?(h.outFields=e,h.returnGeometry=!1,this._updateQueryWithFeatureFilter(h,r)):y=!1),d.suspended&&(y=!1)}}catch{y=!1}if(!y&&(g=K(this.layer).map((e=>e.toJSON())),f=await this._fetchFeaturesForStats({field:s,field2:n,field3:o,valueExpression:u,normalizationField:l,returnGeometry:c,filter:r,view:i,signal:p},"json"),!f?.length))throw new t("feature-layer-binning-adapter:insufficient-data","No features are available to calculate statistics");return{layerView:d,query:h,featuresJSON:f,fieldInfos:g}}async _summaryStatsFromMemory(e,t){const{view:a,field:r,valueExpression:i,normalizationType:s,signal:n}=e,o={field:r,valueExpression:i,normalizationType:s,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue},{featuresJSON:l,graphics:u,layerView:c,query:m,fieldInfos:d}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateSummaryStatistics"});return i&&a&&(l||u)&&(o.fieldType=t?.type?E.toJSON(t.type):null,o.viewInfoParams=G(a),o.fieldInfos=d),"percent-of-total"===s&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotalFromMemory(r,{featuresJSON:l,graphics:u,layerView:c,query:m},n)),!l&&!u&&c&&"queryAggregateSummaryStatistics"in c?c.queryAggregateSummaryStatistics(m,o,{signal:n}):l?this.workerClient.summaryStatistics(o,l):p({attribute:o,features:u})}async _uvFromMemory(e,t){const{view:a,field:r,valueExpression:i,returnAllCodedValues:s,signal:n}=e,{featuresJSON:o,graphics:l,layerView:u,query:c,fieldInfos:m}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateUniqueValues"}),p={field:r,field2:e.field2,field3:e.field3,fieldDelimiter:v,valueExpression:i,domains:t,returnAllCodedValues:s};return i&&a&&(o||l)&&(p.viewInfoParams=G(a),p.fieldInfos=m),!o&&!l&&u&&"queryAggregateUniqueValues"in u?u.queryAggregateUniqueValues(c,p,{signal:n}):o?this.workerClient.uniqueValues(p,o):d({attribute:p,features:l})}async _histogramFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateHistogram"}),c={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return r&&t&&(s||n)&&(c.viewInfoParams=G(t),c.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(c.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateHistogram"in o?o.queryAggregateHistogram(l,c,{signal:i}):s?this.workerClient.histogram(c,s):y({attribute:c,features:n})}async _classBreaksFromMemory(e){const{view:t,field:a,valueExpression:r,signal:i}=e,{featuresJSON:s,graphics:n,layerView:o,query:l,fieldInfos:u}=await this._processStatsFromMemoryParams({...e,layerViewFunc:"queryAggregateClassBreaks"}),c={field:a,valueExpression:r,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return r&&t&&(s||n)&&(c.viewInfoParams=G(t),c.fieldInfos=u),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(c.normalizationTotal=await this._getNormalizationTotalFromMemory(a,{featuresJSON:s,graphics:n,layerView:o,query:l},i)),!s&&!n&&o&&"queryAggregateClassBreaks"in o?o.queryAggregateClassBreaks(l,c,{signal:i}):s?this.workerClient.classBreaks(c,s):f({attribute:c,features:n})}getField(e=""){return K(this.layer)?.find((t=>t.name.toLowerCase()===e?.toLowerCase()))}getFieldUsageInfo(e){return this.getField(e)?{supportsLabelingInfo:!0,supportsRenderer:!0,supportsPopupTemplate:!0,supportsLayerQuery:!1,supportsStatistics:!0}:null}getFieldDomain(e,t){return null}async summaryStatistics(e){const{field:a}=e,r=a?this.getField(a):null,i=M(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t("feature-layer-binning-adapter:not-supported","Date field and sqlExpression are not supported");return this._summaryStatsFromMemory(e,r)}async uniqueValues(e){const t=await $(e,this);return this._uvFromMemory(e,t)}async histogram(e){const{field:a}=e,r=a?this.getField(a):null,i=M(r),s=e.sqlExpression&&!e.valueExpression&&!a;if(i||s)throw new t("feature-layer-binning-adapter:not-supported","Date field and sqlExpression are not supported");return this._histogramFromMemory(e)}async classBreaks(e){return(!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)).catch((()=>(V(e.signal),this._classBreaksFromMemory(e))))}async queryFeatureCount(e){const a=await e.view.whenLayerView(this.layer);if(!("queryAggregateCount"in a)||!a.queryAggregateCount)throw new t("feature-layer-binning-adapter:not-supported","LayerView is not supported.");await this._waitForLayerViewUpdate(a);const r=a.createAggregateQuery();return r.where=m(r.where,e.whereClause),this._updateQueryWithFeatureFilter(r,e.filter),a.queryAggregateCount(r,{signal:e.signal})}generateRenderer(e,a){throw new t("feature-layer-binning-adapter:not-supported","'generateRenderer' is not supported.")}heatmapStatistics(e){throw new t("feature-layer-binning-adapter:not-supported","'heatmapStatistics' is not supported.")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=O(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return Z(s.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:r,sampleSize:i,requiredFields:n,returnGeometry:o,filter:l,signal:u}=e;if(!r)throw new t("feature-layer-binning-adapter:not-supported","'view' is required to get sample features for binning.");if("3d"===r.type)throw new t("feature-layer-binning-adapter:not-supported","3d 'view' is not supported to get sample features for binning.");const c=await r.whenLayerView(this.layer);if(!("queryAggregateJSON"in c&&c.queryAggregateJSON&&"queryAggregates"in c&&c.queryAggregates))throw new t("feature-layer-binning-adapter:not-supported","LayerView is not supported.");if(await this._waitForLayerViewUpdate(c),X(this,n).length)throw new t("feature-layer-binning-adapter:insufficient-data","Layer does not have required fields");const m="json"===a,p=c.createAggregateQuery();p.outSpatialReference=e.spatialReference||r&&r.spatialReference,p.returnGeometry=!!o,p.outFields=n,this._updateQueryWithFeatureFilter(p,l);const{features:d}=m?await c.queryAggregateJSON(p,{signal:u}):await c.queryAggregates(p,{signal:u});return d.length&&i>0&&i<=d.length?s(d,i,1):d}load(e){const a=this.layer.load(e).then((async a=>{if(this.geometryType="polygon",this.objectIdField=null,this.supportsSQLExpression=!1,this._hasLocalSource=!1,this.hasQueryEngine=!0,this.minScale=a.minScale,this.maxScale=a.maxScale,this.fullExtent=a.fullExtent,"geometryType"in a&&"point"!==a.geometryType)throw new t("feature-layer-binning-adapter:invalid-parameters","Only 'point' geometry type is supported");const i="featureReduction"in a&&a.featureReduction;if("binning"!==i?.type&&"cluster"!==i?.type)throw new t("feature-layer-binning-adapter:invalid-parameters",`Feature reduction type ${i?.type} is not supported`);this.workerClient=ye.getInstance(),await this.workerClient.open(r(r(e).signal))}));return this.addResolvingPromise(a),Promise.resolve(this)}};be=e([n("esri.smartMapping.support.adapters.FeatureLayerBinningAdapter")],be);const Me=be;let ke=class extends ze{constructor(e){super(e)}async _waitForLayerViewUpdate(e){if(!e)throw new t("ogc-feature-layer-adapter:insufficient-data","layerView is required to fetch the features");await q((()=>!e.updating))}async _summaryStatsFromClientQuery(e,a){const{signal:i,view:s}=e;if(!s)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this._getSummaryStatsQuery(e,a),o=await s.whenLayerView(this.layer);await q((()=>!o.updating),r(i));const l=await o.queryFeatures(n,{signal:i}),u=D(l,a);return Y(u)}async _uvFromClientQuery(e,a){const{signal:i,view:s}=e;if(!s)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this._getUVQuery(e),o=await s.whenLayerView(this.layer);await q((()=>!o.updating),r(i));const l=await o.queryFeatures(n,{signal:i}),u=await U(l,{layer:this,field:e.field,field2:e.field2,field3:e.field3,fieldDelimiter:v,view:e.view,signal:e.signal});return te(u,a,e.returnAllCodedValues,v)}summaryStatistics(e){const{field:a,valueExpression:r,sqlExpression:i,features:s,view:n}=e,o=a?this.getField(a):null,l=M(o),u=!!r,c="3d"===n?.type;if(!r&&i&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return u||s||c?this._summaryStatsFromMemory(e,o):this._summaryStatsFromClientQuery(e,l)}async uniqueValues(e){const{valueExpression:a,sqlExpression:r,features:i,view:s}=e,n=await $(e,this),o=!!a,l="3d"===s?.type;if(!a&&r&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return o||i||l?this._uvFromMemory(e,n):this._uvFromClientQuery(e,n)}histogram(e){const{features:a,valueExpression:r,normalizationType:i,sqlExpression:s}=e,n=a||!!r;if(!r&&s&&!this.supportsSQLExpression)throw new t("ogc-feature-layer-adapter:not-supported","Layer does not support standardized SQL expression for queries");return n||i?this._histogramFromMemory(e):this._histogramForField(e)}classBreaks(e){return!1!==e.analyzeData?this._classBreaksFromMemory(e):this._classBreaksFromInterpolation(e)}async queryFeatureCount(e){const{whereClause:a,view:i,signal:s}=e;if(!i)throw new t("ogc-feature-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const n=this.layer.createQuery();n.where=m(n.where,a);const o=await i.whenLayerView(this.layer);return await q((()=>!o.updating),r(s)),o.queryFeatureCount(n,{signal:s})}generateRenderer(e,a){throw new t("ogc-feature-layer-adapter:not-supported","OGCFeatureLayer does not support generateRenderer operation")}async predominantCategories(e){const{fields:t,view:a,signal:r}=e,i=O(t),s=await this._uvFromMemory({valueExpression:i,view:a,signal:r});return Z(s.uniqueValueInfos,t)}async getSampleFeatures(e,a){const{view:r,sampleSize:i,requiredFields:n,returnGeometry:o,signal:l}=e,u=this.layer.createQuery();if(u.outSpatialReference=e.spatialReference||r&&r.spatialReference,u.returnGeometry=!!o,u.outFields=n,!r)throw new t("ogc-feature-layer-adapter:not-supported","view is required to get sample features for OGCFeatureLayer");const c=await r.whenLayerView(this.layer);if(J(this,n,c).length)throw new t("ogc-feature-layer-adapter:not-supported","Required fields need to be passed in the outFields for OGCFeatureLayer");const m=await this._fetchFeaturesFromMemory(c,u,l,a);return s(m,i>0&&i<=m.length?i:m.length,1)}load(e){const t=this.layer.load(e).then((async t=>{this.geometryType=t.geometryType,this.objectIdField=t.objectIdField,this.supportsSQLExpression=t.get("capabilities.query.supportsSqlExpression"),this.minScale=t.minScale,this.maxScale=t.maxScale,this.fullExtent=t.fullExtent,this.workerClient=ye.getInstance(),await this.workerClient.open(r(r(e).signal))}));return this.addResolvingPromise(t),Promise.resolve(this)}};ke=e([n("esri.smartMapping.support.adapters.OGCFeatureLayerAdapter")],ke);const je=ke;let Qe=class extends Se{constructor(e){super(e)}destroy(){this._featureLayerAdapter=null,this.workerClient?.destroy()}_hasCachedStatistics(e){return this.layer.hasCachedStatistics(e)}_updateQuery(e,t=[],a=[]){if(!a.length)return e;const r=this.layer.objectIdField,i=e.clone(),s=t.filter((e=>{const t=this.layer.getField(e);return!a.includes(t.name)})),n=s.some((e=>this.layer.getField(e).name===r));return i.outFields=n?s:[...s,r],i}async _fetchFeaturesFromMemory(e,a,r){if(!e)throw new t("scene-layer-adapter:insufficient-data","view is required to fetch the features from layerView");const i=await e.whenLayerView(this.layer),s=new AbortController,n=s.signal,o=q((()=>!i.updating),n);await x(o,5e3,s);const l=J(this,r,i);V(n);const u=this._updateQuery(a,r,l),c=await i.queryFeatures(u,{signal:n});V(n);const m=c.features;return l.length?i.whenGraphicAttributes(m,l):m}async _fetchFeaturesJSONFromMemory(e,t,a){return this._fetchFeaturesFromMemory(e,t,a).then(P)}_fetchFeaturesForStats(e,t){return S({field:e.field,normalizationField:e.normalizationField,valueExpression:e.valueExpression}).then((a=>this.getSampleFeatures({sampleSize:-1,view:e.view,returnGeometry:e.returnGeometry,requiredFields:a,signal:e.signal},t)))}async _processStatsFromMemoryParams(e){const a=e.features;if(a?.length)return a.length&&"declaredClass"in a[0]&&"esri.Graphic"===a[0].declaredClass?{graphics:a}:{featuresJSON:a};const{view:r,field:i,normalizationField:s,valueExpression:n,signal:o}=e,l=await this._fetchFeaturesForStats({field:i,valueExpression:n,normalizationField:s,view:r,signal:o});if(!l?.length)throw new t("scene-layer-adapter:insufficient-data","No features are available to calculate statistics");return{graphics:l}}_generateFeatureSetForCachedHistogram(e,t=e.minimum,a=e.maximum,r){const i=[];for(let e=0;e<r;e++)i[e]=0;const s=e.counts.length,n=e.minimum,o=e.maximum;for(let l=0;l<s;l++){const u=(l+.5)/s,c=((1-u)*n+u*o-t)/(a-t)*r;c>=0&&c<=r&&(i[c===r?r-1:Math.floor(c)]+=e.counts[l])}const l=[];i.forEach(((e,t)=>{const a=new de({attributes:{}});a.attributes.EXPR_1=t+1,a.attributes.countOFExpr=e,l.push(a)}));const u=new me;return u.features=l,u}_getCachedStatistics(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.minValue||e.maxValue?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression', 'sqlWhere', 'minValue' or 'maxValue' is specified")):r.queryCachedStatistics(a&&a.name,{signal:e.signal}).then((e=>{const t=e.stats,{min:a,max:r,totalValuesCount:i}=t;let{avg:s,stddev:n,sum:o,variance:l,count:u}=t;return 0===a&&0===r||(s=0===s?null:s,o=0===o?null:o,n=0===n?null:n,l=0===l?null:l,u=0===u?null:u),null==u&&(null!=o&&null!=s?u=Math.round(o/s):null!=i&&(u=i)),{avg:s,count:u,max:r,min:a,stddev:n,sum:o,variance:l}}))}async _getNormalizationTotal(e,a,r){const i=(a?await this.workerClient.summaryStatistics({field:e},a):await p({attribute:{field:e},features:r})).sum;if(null==i)throw new t("scene-layer-adapter:invalid","invalid normalizationTotal");return i}async _getSummaryStatisticsFromMemory(e,t){const{view:a,field:r,normalizationField:i,valueExpression:s}=e,{featuresJSON:n,graphics:o}=await this._processStatsFromMemoryParams(e),l={field:r,valueExpression:s,normalizationType:e.normalizationType,normalizationField:i,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue};return e.valueExpression&&a&&n&&(l.fieldType=t?.type?E.toJSON(t.type):null,l.viewInfoParams=G(a)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(l.normalizationTotal=await this._getNormalizationTotal(r,n,o)),n?this.workerClient.summaryStatistics(l,n):p({attribute:l,features:o})}_getCachedStatisticsForUniqueValues(e,a){const r=this.layer,i=a&&a.name,s=a&&this.getFieldDomain(e.field);return e.valueExpression||e.sqlExpression||e.sqlWhere?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression', 'sqlExpression' or 'sqlWhere' is specified")):r.queryCachedStatistics(i,{signal:e.signal}).then((t=>{const s=t.stats;if(!s.mostFrequentValues)throw new Error;const n=t.labels&&t.labels.labels,o={},l=[],u="countOF"+i;s.mostFrequentValues.forEach((e=>{const t=new de({attributes:{}});t.attributes[i]=a&&a.name!==r.objectIdField&&(b(a)||M(a))?Number(e.value):e.value,t.attributes[u]=e.count,l.push(t)})),n&&n.forEach((e=>{o[e.value]=e.label}));const c=new me;return c.features=l,U(c,{layer:this,field:e.field,labels:o,view:e.view,signal:e.signal})})).then((t=>te(t,[s],e.returnAllCodedValues)))}async _getUniqueValuesFromMemory(e,t){const{view:a,field:r,field2:i,field3:s,valueExpression:n,returnAllCodedValues:o}=e,l={field:r,field2:i,field3:s,fieldDelimiter:v,valueExpression:n,domains:t,returnAllCodedValues:o},{featuresJSON:u,graphics:c}=await this._processStatsFromMemoryParams(e);return e.valueExpression&&a&&u&&(l.viewInfoParams=G(a)),u?this.workerClient.uniqueValues(l,u):d({attribute:l,features:c})}_getCachedStatisticsForHistogram(e,a){const r=this.layer;return e.valueExpression||e.sqlExpression||e.sqlWhere||e.normalizationType?Promise.reject(new t("scene-layer-adapter:not-supported","This Layer does not support calculating statistics when 'valueExpression' or 'sqlExpression' or 'sqlWhere' or 'normalizationType' is specified")):r.queryCachedStatistics(a&&a.name,{signal:e.signal}).then((t=>{const a=t.stats,{minValue:r,maxValue:i}=e,s=null!=r?r:a.min,n=null!=i?i:a.max,o=e.numBins||10,l=this._generateFeatureSetForCachedHistogram(a.histogram,s,n,o);return W(l,s,n,o)}))}async _getClassBreaksFromMemory(e){const{view:t,field:a,normalizationField:r,valueExpression:i}=e,{featuresJSON:s,graphics:n}=await this._processStatsFromMemoryParams(e),o={field:a,valueExpression:i,normalizationType:e.normalizationType,normalizationField:r,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numClasses:e.numClasses};return e.valueExpression&&t&&s&&(o.viewInfoParams=G(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(o.normalizationTotal=await this._getNormalizationTotal(a,s,n)),s?this.workerClient.classBreaks(o,s):f({attribute:o,features:n})}async _getHistogramFromMemory(e){const{view:t,field:a}=e,{featuresJSON:r,graphics:i}=await this._processStatsFromMemoryParams(e),s={field:a,valueExpression:e.valueExpression,normalizationType:e.normalizationType,normalizationField:e.normalizationField,normalizationTotal:e.normalizationTotal,minValue:e.minValue,maxValue:e.maxValue,standardDeviationInterval:e.standardDeviationInterval,classificationMethod:e.classificationMethod,numBins:e.numBins};return e.valueExpression&&t&&r&&(s.viewInfoParams=G(t)),"percent-of-total"===e.normalizationType&&null==e.normalizationTotal&&(s.normalizationTotal=await this._getNormalizationTotal(a,r,i)),r?this.workerClient.histogram(s,r):y({attribute:s,features:i})}getField(e=""){return this.layer.getField(e)}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this.layer.getFieldUsageInfo(t.name);return{supportsLabelingInfo:a.supportsLabelingInfo,supportsPopupTemplate:a.supportsPopupTemplate,supportsRenderer:a.supportsRenderer,supportsLayerQuery:a.supportsLayerQuery,supportsStatistics:!0}}getFieldDomain(e,t){return this._featureLayerAdapter?this._featureLayerAdapter.getFieldDomain(e,t):null}summaryStatistics(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.summaryStatistics(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a&&a.name)?this._getCachedStatistics(e,a).catch((()=>(V(e.signal),this._getSummaryStatisticsFromMemory(e,a)))):this._getSummaryStatisticsFromMemory(e,a)}async uniqueValues(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.uniqueValues(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const a=await $(e,this),{field:r,field2:i}=e,s=r&&i,n=this.getField(r);return!s&&this._hasCachedStatistics(n&&n.name)?this._getCachedStatisticsForUniqueValues(e,n).catch((()=>(V(e.signal),this._getUniqueValuesFromMemory(e,a)))):this._getUniqueValuesFromMemory(e,a)}histogram(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.histogram(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a&&a.name)?this._getCachedStatisticsForHistogram(e,a).catch((()=>(V(e.signal),this._getHistogramFromMemory(e)))):this._getHistogramFromMemory(e)}classBreaks(e){const a=this.getField(e.field);if(this._featureLayerAdapter)return this._featureLayerAdapter.classBreaks(e);if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");return this._hasCachedStatistics(a&&a.name)?Promise.reject(new t("scene-layer-adapter:not-supported","Cached stats not supported")):this._getClassBreaksFromMemory(e)}queryFeatureCount(e){return this._featureLayerAdapter?this._featureLayerAdapter.queryFeatureCount(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support count query"))}generateRenderer(e,a){return this._featureLayerAdapter?this._featureLayerAdapter.generateRenderer(e,a):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support generateRenderer operation"))}heatmapStatistics(e){return this._featureLayerAdapter?this._featureLayerAdapter.heatmapStatistics(e):Promise.reject(new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support heatmapStatistics operation"))}async predominantCategories(e){if(this._featureLayerAdapter)return this._featureLayerAdapter.predominantCategories(e);throw new t("scene-layer-adapter:not-supported","SceneLayer without associated FeatureLayer does not support predominantCategories")}async getSampleFeatures(e,a){if(e.filter)throw new t("scene-layer-adapter:not-supported","filter is not supported");const{view:r,sampleSize:i,requiredFields:n,returnGeometry:o,signal:l}=e,u="json"===a,c=this.layer.createQuery();c.outFields=n,c.returnGeometry=!!o,c.where=null,c.num=i;let m=[];try{if(m=u?await this._fetchFeaturesJSONFromMemory(r,c,n):await this._fetchFeaturesFromMemory(r,c,n),m.length&&i>0&&i<=m.length)return s(m,i,1)}catch(e){V(l)}let p=null;if(this._featureLayerAdapter){const t={...e};delete t.view,p=await this._featureLayerAdapter.getSampleFeatures(t,a)}return p&&p.length?p:s(m,m.length,1)}load(e){const t=this.layer.load(e).then((async t=>{this.workerClient=ye.getInstance(),await this.workerClient.open(r(r(e).signal));const i=t.associatedLayer;if(this.geometryType=t.geometryType,a(i))return this._featureLayerAdapter=new ze({layer:i}),this._featureLayerAdapter.load(e).then((()=>{this.objectIdField=this._featureLayerAdapter.objectIdField,this.supportsSQLExpression=this._featureLayerAdapter.supportsSQLExpression,this.minScale=this._featureLayerAdapter.minScale,this.maxScale=this._featureLayerAdapter.maxScale,this.fullExtent=this._featureLayerAdapter.fullExtent}));this.objectIdField=t.objectIdField,this.supportsSQLExpression=!1,this.hasQueryEngine=!1,this.fullExtent=t.fullExtent}));return this.addResolvingPromise(t),Promise.resolve(this)}};e([z({constructOnly:!0})],Qe.prototype,"layer",void 0),Qe=e([n("esri.smartMapping.support.adapters.SceneLayerAdapter")],Qe);const Ie=Qe;let Oe=class extends Ie{constructor(e){super(e)}getField(e=""){return this.layer.fieldsIndex.get(e)}getFieldUsageInfo(e){const t=this.getField(e);if(!t)return null;const a=this._hasCachedStatistics(t.name);return{supportsLabelingInfo:a,supportsPopupTemplate:a,supportsRenderer:a,supportsLayerQuery:!1,supportsStatistics:a}}getFieldDomain(){return null}load(e){const t=this.layer.load(e).then((()=>{this.geometryType="point",this.objectIdField=null,this.supportsSQLExpression=!1,this.hasQueryEngine=!1}));return this.addResolvingPromise(t),Promise.resolve(this)}};Oe=e([n("esri.smartMapping.support.adapters.PointCloudLayerAdapter")],Oe);const Ae=Oe;var Ne;!function(e){e[e.CSVLayer=0]="CSVLayer",e[e.GeoJSONLayer=1]="GeoJSONLayer",e[e.FeatureLayer=2]="FeatureLayer",e[e.OGCFeatureLayer=3]="OGCFeatureLayer",e[e.SceneLayer=4]="SceneLayer",e[e.PointCloudLayer=5]="PointCloudLayer",e[e.WFSLayer=6]="WFSLayer"}(Ne||(Ne={}));const Pe={[Ne.CSVLayer]:{adapter:Ce,type:"csv",label:"CSVLayer"},[Ne.FeatureLayer]:{adapter:ze,type:"feature",label:"FeatureLayer"},[Ne.OGCFeatureLayer]:{adapter:je,type:"ogc-feature",label:"OGCFeatureLayer"},[Ne.GeoJSONLayer]:{adapter:ze,type:"geojson",label:"GeoJSONLayer"},[Ne.SceneLayer]:{adapter:Ie,type:"scene",label:"SceneLayer"},[Ne.PointCloudLayer]:{adapter:Ae,type:"point-cloud",label:"PointCloudLayer"},[Ne.WFSLayer]:{adapter:ze,type:"wfs",label:"WFSLayer"}},Re=[Ne.CSVLayer,Ne.FeatureLayer,Ne.OGCFeatureLayer,Ne.GeoJSONLayer,Ne.SceneLayer,Ne.PointCloudLayer,Ne.WFSLayer],Be=[Ne.CSVLayer,Ne.FeatureLayer,Ne.OGCFeatureLayer,Ne.SceneLayer,Ne.GeoJSONLayer,Ne.WFSLayer],De=[Ne.CSVLayer,Ne.FeatureLayer,Ne.OGCFeatureLayer,Ne.GeoJSONLayer,Ne.WFSLayer];function Ge(e){return e.map((e=>Pe[e].label))}function Je(e){return e.map((e=>Pe[e].type))}function Ue(e,t=Re,a){if(e instanceof Se)return e;const r=function(e,t=Re){let a=null;return t.some((t=>{const r=e.type===Pe[t].type;return r&&(a=Pe[t].adapter),r})),a}(e,t);return r?a?new Me({layer:e}):new r({layer:e}):null}export{Ne as L,Je as a,De as b,Ue as c,Re as d,Be as f,Ge as g};
