/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{_ as e}from"./tslib.es6.js";import{s as t,J as r}from"./jsonMap.js";import{JSONSupport as s}from"../core/JSONSupport.js";import{i as o,h as i}from"./maybe.js";import{property as n}from"../core/accessorSupport/decorators/property.js";import"../core/lang.js";import"./ensureType.js";import{r as p}from"./reader.js";import{subclass as u}from"../core/accessorSupport/decorators/subclass.js";import{w as a}from"./writer.js";import{collectArcadeFieldNames as f}from"../layers/support/fieldUtils.js";import{s as l}from"./unitConversionUtils.js";var d;let m=d=class extends s{constructor(e){super(e)}async collectRequiredFields(e,t){return f(e,t,this.expression)}clone(){return new d({expression:this.expression,title:this.title})}equals(e){return this.expression===e.expression&&this.title===e.title}};e([n({type:String,json:{write:!0}})],m.prototype,"expression",void 0),e([n({type:String,json:{write:!0}})],m.prototype,"title",void 0),m=d=e([u("esri.layers.support.FeatureExpressionInfo")],m);const x=m;var h;const c=t()({onTheGround:"on-the-ground",relativeToGround:"relative-to-ground",relativeToScene:"relative-to-scene",absoluteHeight:"absolute-height"}),y=new r({foot:"feet",kilometer:"kilometers",meter:"meters",mile:"miles","us-foot":"us-feet",yard:"yards"});let E=h=class extends s{constructor(e){super(e),this.offset=null}readFeatureExpressionInfo(e,t){return null!=e?e:t.featureExpression&&0===t.featureExpression.value?{expression:"0"}:void 0}writeFeatureExpressionInfo(e,t,r,s){t[r]=e.write({},s),"0"===e.expression&&(t.featureExpression={value:0})}get mode(){const{offset:e,featureExpressionInfo:t}=this;return this._isOverridden("mode")?this._get("mode"):o(e)||t?"relative-to-ground":"on-the-ground"}set mode(e){this._override("mode",e)}set unit(e){this._set("unit",e)}write(e,t){return this.offset||this.mode||this.featureExpressionInfo||this.unit?super.write(e,t):null}clone(){return new h({mode:this.mode,offset:this.offset,featureExpressionInfo:this.featureExpressionInfo?this.featureExpressionInfo.clone():void 0,unit:this.unit})}equals(e){return this.mode===e.mode&&this.offset===e.offset&&this.unit===e.unit&&i(this.featureExpressionInfo,e.featureExpressionInfo)}};e([n({type:x,json:{write:!0}})],E.prototype,"featureExpressionInfo",void 0),e([p("featureExpressionInfo",["featureExpressionInfo","featureExpression"])],E.prototype,"readFeatureExpressionInfo",null),e([a("featureExpressionInfo",{featureExpressionInfo:{type:x},"featureExpression.value":{type:[0]}})],E.prototype,"writeFeatureExpressionInfo",null),e([n({type:c.apiValues,nonNullable:!0,json:{type:c.jsonValues,read:c.read,write:{writer:c.write,isRequired:!0}}})],E.prototype,"mode",null),e([n({type:Number,json:{write:!0}})],E.prototype,"offset",void 0),e([n({type:l,json:{type:String,read:y.read,write:y.write}})],E.prototype,"unit",null),E=h=e([u("esri.layers.support.ElevationInfo")],E);const j=E;export{j as E};
