/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.25/esri/copyright.txt for details.
*/
import{a as t,i as r}from"../../chunks/maybe.js";import{throwIfAborted as o}from"../../core/promiseUtils.js";import e from"../Mesh.js";import{M as s,b as n,u as i,g as c}from"../../chunks/georeference.js";import{L as a}from"../../chunks/Logger.js";import{a as p,g as m,d as u}from"../../chunks/vec3.js";import l,{M as f}from"./MeshComponent.js";import"../../chunks/object.js";import"../../core/lang.js";import"../../core/Error.js";import"../../config.js";import"../../chunks/string.js";import"../../chunks/tslib.es6.js";import"../../core/HandleOwner.js";import"../../core/Accessor.js";import"../../core/Handles.js";import"../../chunks/get.js";import"../../chunks/utils.js";import"../../chunks/handleUtils.js";import"../../chunks/metadata.js";import"../../chunks/ArrayPool.js";import"../../core/accessorSupport/decorators/subclass.js";import"../../chunks/tracking.js";import"../../chunks/ensureType.js";import"../../core/accessorSupport/decorators/property.js";import"../../chunks/watch.js";import"../../core/scheduling.js";import"../../chunks/nextTick.js";import"../../chunks/WatchUpdatingTracking.js";import"../../core/reactiveUtils.js";import"../../core/Loadable.js";import"../../core/Promise.js";import"../Extent.js";import"../Geometry.js";import"../../core/JSONSupport.js";import"../../chunks/reader.js";import"../SpatialReference.js";import"../../chunks/writer.js";import"../Point.js";import"../../core/accessorSupport/decorators/cast.js";import"./webMercatorUtils.js";import"../../chunks/Ellipsoid.js";import"../Polygon.js";import"../../chunks/extentUtils.js";import"../../chunks/zmUtils.js";import"../../chunks/axisAngleDegrees.js";import"../../chunks/mathUtils.js";import"../../chunks/common.js";import"../../chunks/quat.js";import"../../chunks/quatf64.js";import"../../chunks/triangulationUtils.js";import"../../chunks/earcut.js";import"../../chunks/deduplicate.js";import"../projection.js";import"../../chunks/unitUtils.js";import"../../chunks/jsonMap.js";import"../../chunks/projectionEllipsoid.js";import"../../chunks/SimpleObservable.js";import"../../chunks/mat4.js";import"../Multipoint.js";import"../../chunks/pe.js";import"../../chunks/assets.js";import"../../request.js";import"../../kernel.js";import"../../core/urlUtils.js";import"../Polyline.js";import"../../chunks/aaBoundingRect.js";import"../../chunks/geodesicConstants.js";import"./GeographicTransformation.js";import"./GeographicTransformationStep.js";import"../../chunks/zscale.js";import"../../chunks/mat3.js";import"../../chunks/mat3f64.js";import"../../chunks/mat4f64.js";import"../../chunks/projection.js";import"../../chunks/BufferView.js";import"../../chunks/vec2.js";import"../../chunks/vec32.js";import"./MeshMaterial.js";import"../../Color.js";import"../../chunks/colorUtils.js";import"./MeshTexture.js";import"../../chunks/imageUtils.js";import"../../chunks/persistableUrlUtils.js";import"./MeshMaterialMetallicRoughness.js";const h=a.getLogger("esri.geometry.support.triangleMeshMerge");function j(t,o){if(!o.rebake)return t.vertexAttributes;const e=n(t.vertexAttributes,t.transform,t.spatialReference);return r(o.transform)?i(e,o.transform.getOriginPoint(t.spatialReference),{geographic:o.transform.geographic}):e}function g(t,r,o){(function(t,r){return r.normal>0&&!t.vertexAttributes.normal})(t,r)&&"source"===o.shading&&(o.shading="flat")}function k(t,r,o,e,s){if(t.components)for(const n of t.components){const i=n.cloneWithDeduplication(o,e),c=r.position/3;if(i.faces)for(let t=0;t<i.faces.length;t++)i.faces[t]+=c;else{i.faces=new Uint32Array(t.vertexAttributes.position.length/3);for(let t=0;t<i.faces.length;t++)i.faces[t]=t+c}g(t,r,i),s.push(i)}else if(t.vertexAttributes&&t.vertexAttributes.position){const o=t.vertexAttributes.position.length/3,e=new Uint32Array(o),n=r.position/3;for(let t=0;t<o;t++)e[t]=t+n;const i=new l({faces:e});g(t,r,i),s.push(i)}}function b(o,e,s,n,i){if(!e)return;const c=e.position;if(!c)return;const a=e[o],p=s[o];if(t(a)){let t=n[o];const e=d[o];if(r(p)){for(let r=0;r<c.length;r+=3)for(let r=0;r<e;r++)p[t++]=i;n[o]=t}}else r(p)&&r(a)&&(function(t,r,o,e,s){for(let n=0;n<s;n++)o[e++]=t[r++]}(a,0,p,n[o],a.length),n[o]+=a.length)}const d={position:3,normal:3,tangent:4,uv:2,color:4};async function v(t,r,e){const s=await import("../../chunks/elevation.js");return o(e),s.create(t,r,e)}async function w(t,r){return await t.load(),(await import("../../chunks/elevationSampler.js")).create(t,r)}function A(t,r,o){return c(t,r,o)}function x(t,r,o){return i(t,r,o)}function y(o){const n=function(o,e){if(0===o.length)return h.error("merge()","Must specify one more geometries to merge"),null;const n=o[0].spatialReference;for(const t of o){if(!t.spatialReference.equals(n))return h.error("merge()","Geometries must all be in the same spatial reference"),null;if(!t.loaded)return h.error("merge()","Geometries must all be loaded before merging"),null}const i=function(o){let e=null,n=!0;const i=u();let c=0,a=!1;for(const s of o)if(!r(e)||!t(s.transform)&&s.transform.equals(e)||(n=!1),r(s.transform)){if(e&&e.geographic!==s.transform.geographic)return h.error("merge()","Inconsistent geographic mode for provided geometries transform. Some are geographic while others are not, unable to merge geometries."),null;t(e)&&(e=s.transform),s.transform.geographic&&(a=!0),c++,p(i,i,s.transform.origin)}if(t(e))return{transform:null,rebake:!1};if(n)return{transform:e.clone(),rebake:!1};const l=m(i,i,1/c);return{transform:new s({origin:l,geographic:a}),rebake:!0}}(o);if(t(i))return null;const c=function(t){let r=0,o=0,e=0,s=0,n=0;const i=function(t){let r=!1,o=!1,e=!1,s=!1;for(const n of t){const t=n.vertexAttributes;if(t&&t.position&&(t.uv&&(r=!0),t.normal&&(o=!0),t.tangent&&(s=!0),t.color&&(e=!0),o&&r&&e&&s))break}return{normal:o,uv:r,color:e,tangent:s}}(t);for(const c of t){const t=c.vertexAttributes;t&&t.position&&(r+=t.position.length,i.uv&&(o+=t.position.length/d.position*d.uv),i.normal&&(e+=t.position.length/d.position*d.normal),i.color&&(s+=t.position.length/d.position*d.color),i.tangent&&(n+=t.position.length/d.position*d.tangent))}return new f({position:new Float64Array(r),uv:o?new Float32Array(o):null,normal:e?new Float32Array(e):null,tangent:n?new Float32Array(n):null,color:s?new Uint8Array(s):null})}(o),a=[],l={position:0,uv:0,normal:0,tangent:0,color:0},g=new Map,v=new Map;for(const t of o){const r=j(t,i);e,k(t,l,g,v,a),b("position",r,c,l,0),b("normal",r,c,l,0),b("tangent",r,c,l,0),b("uv",t.vertexAttributes,c,l,0),b("color",t.vertexAttributes,c,l,255)}return{vertexAttributes:c,components:a,transform:i.transform,spatialReference:n}}(o);return r(n)?new e(n):null}export{w as createElevationSampler,v as createFromElevation,A as georeference,y as merge,x as ungeoreference};
